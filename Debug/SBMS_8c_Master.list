
SBMS_8c_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005b50  08005b50  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b50  08005b50  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  200000d0  08005c28  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  08005c28  00020e54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a158  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd1  00000000  00000000  0002a251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d64a  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a03  00000000  00000000  0003ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c322  00000000  00000000  0004357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008f89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cfc  00000000  00000000  0008f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000d0 	.word	0x200000d0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800504c 	.word	0x0800504c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000d4 	.word	0x200000d4
 8000220:	0800504c 	.word	0x0800504c

08000224 <flash_erase_page>:
{
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	while (FLASH->SR & FLASH_SR_BSY);
 800022c:	bf00      	nop
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <flash_erase_page+0x70>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <flash_erase_page+0xa>

		if (FLASH->SR & FLASH_SR_EOP) {
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <flash_erase_page+0x70>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <flash_erase_page+0x28>
			FLASH->SR = FLASH_SR_EOP;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <flash_erase_page+0x70>)
 8000248:	2220      	movs	r2, #32
 800024a:	60da      	str	r2, [r3, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <flash_erase_page+0x70>)
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <flash_erase_page+0x70>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6113      	str	r3, [r2, #16]
		FLASH->AR = address;
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <flash_erase_page+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <flash_erase_page+0x70>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <flash_erase_page+0x70>)
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6113      	str	r3, [r2, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 800026a:	bf00      	nop
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <flash_erase_page+0x70>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <flash_erase_page+0x48>
		FLASH->SR = FLASH_SR_EOP;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <flash_erase_page+0x70>)
 800027a:	2220      	movs	r2, #32
 800027c:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <flash_erase_page+0x70>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4a04      	ldr	r2, [pc, #16]	; (8000294 <flash_erase_page+0x70>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6113      	str	r3, [r2, #16]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40022000 	.word	0x40022000

08000298 <flash_unlock>:


void flash_unlock(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY_1;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <flash_unlock+0x18>)
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <flash_unlock+0x1c>)
 80002a0:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY_2;
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <flash_unlock+0x18>)
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <flash_unlock+0x20>)
 80002a6:	605a      	str	r2, [r3, #4]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40022000 	.word	0x40022000
 80002b4:	45670123 	.word	0x45670123
 80002b8:	cdef89ab 	.word	0xcdef89ab

080002bc <flash_lock>:

void flash_lock()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <flash_lock+0x18>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <flash_lock+0x18>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6113      	str	r3, [r2, #16]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40022000 	.word	0x40022000

080002d8 <flash_write>:



void flash_write(uint32_t address,uint32_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]


	while (FLASH->SR & FLASH_SR_BSY);
 80002e2:	bf00      	nop
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <flash_write+0x90>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <flash_write+0xc>
	if (FLASH->SR & FLASH_SR_EOP) {
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <flash_write+0x90>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <flash_write+0x2a>
		FLASH->SR = FLASH_SR_EOP;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <flash_write+0x90>)
 80002fe:	2220      	movs	r2, #32
 8000300:	60da      	str	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <flash_write+0x90>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <flash_write+0x90>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	b292      	uxth	r2, r2
 8000314:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000316:	bf00      	nop
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <flash_write+0x90>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <flash_write+0x40>
    		FLASH->SR = FLASH_SR_EOP;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <flash_write+0x90>)
 8000326:	2220      	movs	r2, #32
 8000328:	60da      	str	r2, [r3, #12]


	address+=2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3302      	adds	r3, #2
 800032e:	607b      	str	r3, [r7, #4]
	data>>=16;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	603b      	str	r3, [r7, #0]
    *(__IO uint16_t*)address = (uint16_t)data;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	b292      	uxth	r2, r2
 800033c:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800033e:	bf00      	nop
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <flash_write+0x90>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <flash_write+0x68>
    		FLASH->SR = FLASH_SR_EOP;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <flash_write+0x90>)
 800034e:	2220      	movs	r2, #32
 8000350:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <flash_write+0x90>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <flash_write+0x90>)
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	6113      	str	r3, [r2, #16]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000

0800036c <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
uint8_t flash_write_block()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
	__disable_irq();
	flash_unlock();
 8000376:	f7ff ff8f 	bl	8000298 <flash_unlock>
	uint32_t i=0;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <flash_write_block+0x8c>)
 8000380:	60bb      	str	r3, [r7, #8]
	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000382:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8000386:	607b      	str	r3, [r7, #4]
	uint32_t *source_adr = (void *)&LoggingData;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <flash_write_block+0x90>)
 800038a:	603b      	str	r3, [r7, #0]

	logDebugD("size: ",size,0);
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <flash_write_block+0x94>)
 800038e:	f003 ffab 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <flash_write_block+0x98>)
 800039a:	f003 fffd 	bl	8004398 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <flash_write_block+0x94>)
 80003a0:	f003 ffa2 	bl	80042e8 <printToBufferWithoutEndUART1>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <flash_write_block+0x9c>)
 80003ae:	f003 fff3 	bl	8004398 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80003b2:	68b8      	ldr	r0, [r7, #8]
 80003b4:	f7ff ff36 	bl	8000224 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e00e      	b.n	80003dc <flash_write_block+0x70>
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	009a      	lsls	r2, r3, #2
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	18d0      	adds	r0, r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f7ff ff81 	bl	80002d8 <flash_write>
	for (i = 0; i < size/4; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d3eb      	bcc.n	80003be <flash_write_block+0x52>
    }

	flash_lock();
 80003e6:	f7ff ff69 	bl	80002bc <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ea:	b662      	cpsie	i
}
 80003ec:	bf00      	nop
	__enable_irq();
	return 1;
 80003ee:	2301      	movs	r3, #1
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	0801e400 	.word	0x0801e400
 80003fc:	20000bf0 	.word	0x20000bf0
 8000400:	08005064 	.word	0x08005064
 8000404:	0800506c 	.word	0x0800506c
 8000408:	08005074 	.word	0x08005074

0800040c <flash_read_block>:
uint8_t flash_read_block()
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]


	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000416:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800041a:	60bb      	str	r3, [r7, #8]
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <flash_read_block+0x50>)
 800041e:	607b      	str	r3, [r7, #4]
	uint32_t *dest_adr = (void *)&LoggingData;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <flash_read_block+0x54>)
 8000422:	603b      	str	r3, [r7, #0]

	for (i=0; i < size/4; ++i)
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	e00c      	b.n	8000444 <flash_read_block+0x38>
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	6839      	ldr	r1, [r7, #0]
 8000438:	440b      	add	r3, r1
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	601a      	str	r2, [r3, #0]
	for (i=0; i < size/4; ++i)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ed      	bcc.n	800042a <flash_read_block+0x1e>
	}

	return 1;
 800044e:	2301      	movs	r3, #1

}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	0801e400 	.word	0x0801e400
 8000460:	20000bf0 	.word	0x20000bf0

08000464 <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	617b      	str	r3, [r7, #20]
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d305      	bcc.n	800048a <flash_read+0x26>
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d801      	bhi.n	800048a <flash_read+0x26>
	{
		return EEpromValue;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	e01d      	b.n	80004c6 <flash_read+0x62>
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <flash_read+0x6c>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <flash_read+0x70>)
 8000492:	f003 ff29 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <flash_read+0x74>)
 800049e:	f003 ff7b 	bl	8004398 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <flash_read+0x70>)
 80004a4:	f003 ff20 	bl	80042e8 <printToBufferWithoutEndUART1>
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <flash_read+0x78>)
 80004b0:	f003 ff72 	bl	8004398 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <flash_read+0x70>)
 80004b6:	f003 ff17 	bl	80042e8 <printToBufferWithoutEndUART1>
 80004ba:	2200      	movs	r2, #0
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <flash_read+0x7c>)
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <flash_read+0x80>)
 80004c0:	f003 ff6a 	bl	8004398 <printToBufferUART1D>
		return MinValue;
 80004c4:	68bb      	ldr	r3, [r7, #8]
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	08005064 	.word	0x08005064
 80004d8:	0800507c 	.word	0x0800507c
 80004dc:	08005094 	.word	0x08005094
 80004e0:	0801ec00 	.word	0x0801ec00
 80004e4:	080050a8 	.word	0x080050a8

080004e8 <CalibrationReadFromFlash>:
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage6_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage6);
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage7_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage7);
	logDebug("CalibrationFactoryWriteToFlash ");
}
void CalibrationReadFromFlash(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ec:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffb4 	bl	8000464 <flash_read>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a36      	ldr	r2, [pc, #216]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000500:	6013      	str	r3, [r2, #0]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,1,1000);
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffa9 	bl	8000464 <flash_read>
 8000512:	4603      	mov	r3, r0
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000516:	6093      	str	r3, [r2, #8]
	CalibrationData.CalibrationValueForCurrent2 = flash_read(CalibrationData.CalibrationValueForCurrent2_AddresInEEprom,1,1000);
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff9e 	bl	8000464 <flash_read>
 8000528:	4603      	mov	r3, r0
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800052c:	6113      	str	r3, [r2, #16]
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,1,1000);
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff93 	bl	8000464 <flash_read>
 800053e:	4603      	mov	r3, r0
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000542:	6193      	str	r3, [r2, #24]
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,1,1000);
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff88 	bl	8000464 <flash_read>
 8000554:	4603      	mov	r3, r0
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000558:	6213      	str	r3, [r2, #32]
	CalibrationData.CalibrationValueForVoltage3 = flash_read(CalibrationData.CalibrationValueForVoltage3_AddresInEEprom,1,1000);
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff7d 	bl	8000464 <flash_read>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800056e:	6293      	str	r3, [r2, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage4 = flash_read(CalibrationData.CalibrationValueForVoltage4_AddresInEEprom,1,1000);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff72 	bl	8000464 <flash_read>
 8000580:	4603      	mov	r3, r0
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage5 = flash_read(CalibrationData.CalibrationValueForVoltage5_AddresInEEprom,1,1000);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff67 	bl	8000464 <flash_read>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059a:	6393      	str	r3, [r2, #56]	; 0x38
	CalibrationData.CalibrationValueForVoltage6 = flash_read(CalibrationData.CalibrationValueForVoltage6_AddresInEEprom,1,1000);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff5c 	bl	8000464 <flash_read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
	CalibrationData.CalibrationValueForVoltage7 = flash_read(CalibrationData.CalibrationValueForVoltage7_AddresInEEprom,1,1000);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff51 	bl	8000464 <flash_read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005c6:	6493      	str	r3, [r2, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <CalibrationReadFromFlash+0xf4>)
 80005ca:	f003 fe8d 	bl	80042e8 <printToBufferWithoutEndUART1>
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <CalibrationReadFromFlash+0xf8>)
 80005d0:	f003 fdfe 	bl	80041d0 <printToBufferUART1>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000004 	.word	0x20000004
 80005dc:	08005064 	.word	0x08005064
 80005e0:	08005364 	.word	0x08005364

080005e4 <SettingsReadFromFlash>:
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
	logDebug("SettingsFactoryWriteToFlash ");
}
void SettingsReadFromFlash(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff36 	bl	8000464 <flash_read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005fc:	6013      	str	r3, [r2, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	220a      	movs	r2, #10
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff2c 	bl	8000464 <flash_read>
 800060c:	4603      	mov	r3, r0
 800060e:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000610:	6093      	str	r3, [r2, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff21 	bl	8000464 <flash_read>
 8000622:	4603      	mov	r3, r0
 8000624:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000626:	6113      	str	r3, [r2, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff16 	bl	8000464 <flash_read>
 8000638:	4603      	mov	r3, r0
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800063c:	6193      	str	r3, [r2, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff0b 	bl	8000464 <flash_read>
 800064e:	4603      	mov	r3, r0
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000652:	6213      	str	r3, [r2, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000658:	f242 7210 	movw	r2, #10000	; 0x2710
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff00 	bl	8000464 <flash_read>
 8000664:	4603      	mov	r3, r0
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000668:	6293      	str	r3, [r2, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fef5 	bl	8000464 <flash_read>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff feeb 	bl	8000464 <flash_read>
 800068e:	4603      	mov	r3, r0
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000692:	6393      	str	r3, [r2, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	2203      	movs	r2, #3
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fee1 	bl	8000464 <flash_read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <SettingsReadFromFlash+0xd8>)
 80006aa:	f003 fe1d 	bl	80042e8 <printToBufferWithoutEndUART1>
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsReadFromFlash+0xdc>)
 80006b0:	f003 fd8e 	bl	80041d0 <printToBufferUART1>

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000054 	.word	0x20000054
 80006bc:	08005064 	.word	0x08005064
 80006c0:	080053dc 	.word	0x080053dc

080006c4 <DataWhenPowerOffReadFromFlash>:
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
}
void DataWhenPowerOffReadFromFlash(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fec6 	bl	8000464 <flash_read>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006dc:	6013      	str	r3, [r2, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff febc 	bl	8000464 <flash_read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f0:	6093      	str	r3, [r2, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff feb2 	bl	8000464 <flash_read>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000704:	6113      	str	r3, [r2, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	2201      	movs	r2, #1
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fea8 	bl	8000464 <flash_read>
 8000714:	4603      	mov	r3, r0
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000718:	6193      	str	r3, [r2, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <DataWhenPowerOffReadFromFlash+0x70>)
 800071c:	f003 fde4 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <DataWhenPowerOffReadFromFlash+0x74>)
 8000722:	f003 fd55 	bl	80041d0 <printToBufferUART1>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c
 8000730:	ee6b2800 	.word	0xee6b2800
 8000734:	08005064 	.word	0x08005064
 8000738:	0800546c 	.word	0x0800546c

0800073c <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		EEpromReadStatus = 1;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <ReadFromFlash+0x84>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	 	logDebug("y1");
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <ReadFromFlash+0x88>)
 8000748:	f003 fdce 	bl	80042e8 <printToBufferWithoutEndUART1>
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <ReadFromFlash+0x8c>)
 800074e:	f003 fd3f 	bl	80041d0 <printToBufferUART1>
	 	delay_ms(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fb0e 	bl	8000d74 <delay_ms>
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
	    __disable_irq();
	    putCharDirectToUart2('A');
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f003 fcd9 	bl	8004114 <putCharDirectToUart2>
	    DataWhenPowerOffReadFromFlash();
 8000762:	f7ff ffaf 	bl	80006c4 <DataWhenPowerOffReadFromFlash>
	    putCharDirectToUart2('B');
 8000766:	2042      	movs	r0, #66	; 0x42
 8000768:	f003 fcd4 	bl	8004114 <putCharDirectToUart2>
	    SettingsReadFromFlash();
 800076c:	f7ff ff3a 	bl	80005e4 <SettingsReadFromFlash>
	    putCharDirectToUart2('C');
 8000770:	2043      	movs	r0, #67	; 0x43
 8000772:	f003 fccf 	bl	8004114 <putCharDirectToUart2>
	    CalibrationReadFromFlash();
 8000776:	f7ff feb7 	bl	80004e8 <CalibrationReadFromFlash>
	    putCharDirectToUart2('D');
 800077a:	2044      	movs	r0, #68	; 0x44
 800077c:	f003 fcca 	bl	8004114 <putCharDirectToUart2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000780:	b662      	cpsie	i
}
 8000782:	bf00      	nop


		__enable_irq();
		putCharDirectToUart2('X');
 8000784:	2058      	movs	r0, #88	; 0x58
 8000786:	f003 fcc5 	bl	8004114 <putCharDirectToUart2>
		if (EEpromReadStatus == 0)
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <ReadFromFlash+0x84>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <ReadFromFlash+0x6c>
		{
			logDebug("Read from EEprom - FAIL ");
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <ReadFromFlash+0x88>)
 8000794:	f003 fda8 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ReadFromFlash+0x90>)
 800079a:	f003 fd19 	bl	80041d0 <printToBufferUART1>
			EEpromReadStatus = 1;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <ReadFromFlash+0x84>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
			return 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e009      	b.n	80007bc <ReadFromFlash+0x80>
		}
		else
		{
			logDebug("Read from EEprom - SUCCESS");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ReadFromFlash+0x88>)
 80007aa:	f003 fd9d 	bl	80042e8 <printToBufferWithoutEndUART1>
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <ReadFromFlash+0x94>)
 80007b0:	f003 fd0e 	bl	80041d0 <printToBufferUART1>
			EEpromReadStatus = 1;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <ReadFromFlash+0x84>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
			return 1;
 80007ba:	2301      	movs	r3, #1
		}
}
 80007bc:	4618      	mov	r0, r3
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08005064 	.word	0x08005064
 80007c8:	080054b4 	.word	0x080054b4
 80007cc:	080054b8 	.word	0x080054b8
 80007d0:	080054d4 	.word	0x080054d4

080007d4 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 80007dc:	4ba0      	ldr	r3, [pc, #640]	; (8000a60 <WriteInLOG+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb39 	bl	8000e58 <itoa>
 80007e6:	60b8      	str	r0, [r7, #8]


	for(i=0;number[i]!='\0';i++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e012      	b.n	8000814 <WriteInLOG+0x40>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <WriteInLOG+0x28c>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	7bf9      	ldrb	r1, [r7, #15]
 80007fa:	781c      	ldrb	r4, [r3, #0]
 80007fc:	4898      	ldr	r0, [pc, #608]	; (8000a60 <WriteInLOG+0x28c>)
 80007fe:	4613      	mov	r3, r2
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4413      	add	r3, r2
 8000804:	4403      	add	r3, r0
 8000806:	440b      	add	r3, r1
 8000808:	3304      	adds	r3, #4
 800080a:	4622      	mov	r2, r4
 800080c:	701a      	strb	r2, [r3, #0]
	for(i=0;number[i]!='\0';i++)
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e6      	bne.n	80007ee <WriteInLOG+0x1a>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000820:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <WriteInLOG+0x28c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	7bf9      	ldrb	r1, [r7, #15]
 8000826:	488e      	ldr	r0, [pc, #568]	; (8000a60 <WriteInLOG+0x28c>)
 8000828:	4613      	mov	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	4413      	add	r3, r2
 800082e:	4403      	add	r3, r0
 8000830:	440b      	add	r3, r1
 8000832:	3304      	adds	r3, #4
 8000834:	223a      	movs	r2, #58	; 0x3a
 8000836:	701a      	strb	r2, [r3, #0]
	i++;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]

	for(j=0;str[j]!='\0';i++,j++)
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	e026      	b.n	8000892 <WriteInLOG+0xbe>
	{
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d810      	bhi.n	800086c <WriteInLOG+0x98>
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	4a83      	ldr	r2, [pc, #524]	; (8000a60 <WriteInLOG+0x28c>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	7bf9      	ldrb	r1, [r7, #15]
 8000856:	781c      	ldrb	r4, [r3, #0]
 8000858:	4881      	ldr	r0, [pc, #516]	; (8000a60 <WriteInLOG+0x28c>)
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	4403      	add	r3, r0
 8000862:	440b      	add	r3, r1
 8000864:	3304      	adds	r3, #4
 8000866:	4622      	mov	r2, r4
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e00c      	b.n	8000886 <WriteInLOG+0xb2>
		else
		{
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 800086c:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <WriteInLOG+0x28c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	7bf9      	ldrb	r1, [r7, #15]
 8000872:	487b      	ldr	r0, [pc, #492]	; (8000a60 <WriteInLOG+0x28c>)
 8000874:	4613      	mov	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	4403      	add	r3, r0
 800087c:	440b      	add	r3, r1
 800087e:	3304      	adds	r3, #4
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
			break;
 8000884:	e00b      	b.n	800089e <WriteInLOG+0xca>
	for(j=0;str[j]!='\0';i++,j++)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	3301      	adds	r3, #1
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1d2      	bne.n	8000844 <WriteInLOG+0x70>
		}
	}
	for (;i<16;i++)
 800089e:	e00e      	b.n	80008be <WriteInLOG+0xea>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 80008a0:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <WriteInLOG+0x28c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	7bf9      	ldrb	r1, [r7, #15]
 80008a6:	486e      	ldr	r0, [pc, #440]	; (8000a60 <WriteInLOG+0x28c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	4403      	add	r3, r0
 80008b0:	440b      	add	r3, r1
 80008b2:	3304      	adds	r3, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	701a      	strb	r2, [r3, #0]
	for (;i<16;i++)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d9ed      	bls.n	80008a0 <WriteInLOG+0xcc>
	}
	logDebugD("ii: ",i,0);
 80008c4:	4867      	ldr	r0, [pc, #412]	; (8000a64 <WriteInLOG+0x290>)
 80008c6:	f003 fd0f 	bl	80042e8 <printToBufferWithoutEndUART1>
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4865      	ldr	r0, [pc, #404]	; (8000a68 <WriteInLOG+0x294>)
 80008d2:	f003 fd61 	bl	8004398 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <WriteInLOG+0x28c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	7bf9      	ldrb	r1, [r7, #15]
 80008dc:	4860      	ldr	r0, [pc, #384]	; (8000a60 <WriteInLOG+0x28c>)
 80008de:	4613      	mov	r3, r2
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4413      	add	r3, r2
 80008e4:	4403      	add	r3, r0
 80008e6:	440b      	add	r3, r1
 80008e8:	3304      	adds	r3, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]

	LoggingData.RecordsQuantity++;
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <WriteInLOG+0x28c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <WriteInLOG+0x28c>)
 80008f6:	6013      	str	r3, [r2, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <WriteInLOG+0x28c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b17      	cmp	r3, #23
 80008fe:	f240 809e 	bls.w	8000a3e <WriteInLOG+0x26a>
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e093      	b.n	8000a30 <WriteInLOG+0x25c>
		{
			number = itoa(i);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 faa4 	bl	8000e58 <itoa>
 8000910:	60b8      	str	r0, [r7, #8]
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000912:	2300      	movs	r3, #0
 8000914:	737b      	strb	r3, [r7, #13]
 8000916:	e011      	b.n	800093c <WriteInLOG+0x168>
			{
				LoggingData.Records[i][k] = number[k];
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	7b79      	ldrb	r1, [r7, #13]
 8000922:	781c      	ldrb	r4, [r3, #0]
 8000924:	484e      	ldr	r0, [pc, #312]	; (8000a60 <WriteInLOG+0x28c>)
 8000926:	4613      	mov	r3, r2
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	4413      	add	r3, r2
 800092c:	4403      	add	r3, r0
 800092e:	440b      	add	r3, r1
 8000930:	3304      	adds	r3, #4
 8000932:	4622      	mov	r2, r4
 8000934:	701a      	strb	r2, [r3, #0]
			for(k=0;number[k]!='\0';k++)
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	3301      	adds	r3, #1
 800093a:	737b      	strb	r3, [r7, #13]
 800093c:	7b7b      	ldrb	r3, [r7, #13]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1e7      	bne.n	8000918 <WriteInLOG+0x144>
			}
			LoggingData.Records[i][k] = ':';
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	7b79      	ldrb	r1, [r7, #13]
 800094c:	4844      	ldr	r0, [pc, #272]	; (8000a60 <WriteInLOG+0x28c>)
 800094e:	4613      	mov	r3, r2
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	4413      	add	r3, r2
 8000954:	4403      	add	r3, r0
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	223a      	movs	r2, #58	; 0x3a
 800095c:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	3301      	adds	r3, #1
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	e035      	b.n	80009d2 <WriteInLOG+0x1fe>
			{
				if (i>=10)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b09      	cmp	r3, #9
 800096a:	d917      	bls.n	800099c <WriteInLOG+0x1c8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f103 010a 	add.w	r1, r3, #10
 8000972:	7bbc      	ldrb	r4, [r7, #14]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	7bb8      	ldrb	r0, [r7, #14]
 8000978:	4d39      	ldr	r5, [pc, #228]	; (8000a60 <WriteInLOG+0x28c>)
 800097a:	460b      	mov	r3, r1
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	440b      	add	r3, r1
 8000980:	442b      	add	r3, r5
 8000982:	4423      	add	r3, r4
 8000984:	3304      	adds	r3, #4
 8000986:	781c      	ldrb	r4, [r3, #0]
 8000988:	4935      	ldr	r1, [pc, #212]	; (8000a60 <WriteInLOG+0x28c>)
 800098a:	4613      	mov	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4413      	add	r3, r2
 8000990:	440b      	add	r3, r1
 8000992:	4403      	add	r3, r0
 8000994:	3304      	adds	r3, #4
 8000996:	4622      	mov	r2, r4
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e017      	b.n	80009cc <WriteInLOG+0x1f8>
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f103 010a 	add.w	r1, r3, #10
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	1c5c      	adds	r4, r3, #1
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	7bb8      	ldrb	r0, [r7, #14]
 80009aa:	4d2d      	ldr	r5, [pc, #180]	; (8000a60 <WriteInLOG+0x28c>)
 80009ac:	460b      	mov	r3, r1
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	440b      	add	r3, r1
 80009b2:	442b      	add	r3, r5
 80009b4:	4423      	add	r3, r4
 80009b6:	3304      	adds	r3, #4
 80009b8:	781c      	ldrb	r4, [r3, #0]
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <WriteInLOG+0x28c>)
 80009bc:	4613      	mov	r3, r2
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4413      	add	r3, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	4403      	add	r3, r0
 80009c6:	3304      	adds	r3, #4
 80009c8:	4622      	mov	r2, r4
 80009ca:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73bb      	strb	r3, [r7, #14]
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	7bb9      	ldrb	r1, [r7, #14]
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <WriteInLOG+0x28c>)
 80009d8:	4613      	mov	r3, r2
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	4403      	add	r3, r0
 80009e0:	440b      	add	r3, r1
 80009e2:	3304      	adds	r3, #4
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1bd      	bne.n	8000966 <WriteInLOG+0x192>
			}
			j--;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	73bb      	strb	r3, [r7, #14]
			for (;j<16;j++)
 80009f0:	e00d      	b.n	8000a0e <WriteInLOG+0x23a>
			{
				LoggingData.Records[i][j] = ' ';
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	7bb9      	ldrb	r1, [r7, #14]
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <WriteInLOG+0x28c>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	4413      	add	r3, r2
 80009fe:	4403      	add	r3, r0
 8000a00:	440b      	add	r3, r1
 8000a02:	3304      	adds	r3, #4
 8000a04:	2220      	movs	r2, #32
 8000a06:	701a      	strb	r2, [r3, #0]
			for (;j<16;j++)
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d9ee      	bls.n	80009f2 <WriteInLOG+0x21e>
			}
			LoggingData.Records[i][j] = '\0';
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	7bb9      	ldrb	r1, [r7, #14]
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <WriteInLOG+0x28c>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	4413      	add	r3, r2
 8000a20:	4403      	add	r3, r0
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b0d      	cmp	r3, #13
 8000a34:	f67f af68 	bls.w	8000908 <WriteInLOG+0x134>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <WriteInLOG+0x28c>)
 8000a3a:	220e      	movs	r2, #14
 8000a3c:	601a      	str	r2, [r3, #0]
	}
	flash_write_block();
 8000a3e:	f7ff fc95 	bl	800036c <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <WriteInLOG+0x290>)
 8000a44:	f003 fc50 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <WriteInLOG+0x28c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <WriteInLOG+0x298>)
 8000a52:	f003 fca1 	bl	8004398 <printToBufferUART1D>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000bf0 	.word	0x20000bf0
 8000a64:	080055f0 	.word	0x080055f0
 8000a68:	080055f8 	.word	0x080055f8
 8000a6c:	08005600 	.word	0x08005600

08000a70 <InfoToUARTBeforeStart>:
}



void InfoToUARTBeforeStart(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000a74:	487d      	ldr	r0, [pc, #500]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a76:	f003 fc37 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000a7a:	4b7d      	ldr	r3, [pc, #500]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	487c      	ldr	r0, [pc, #496]	; (8000c74 <InfoToUARTBeforeStart+0x204>)
 8000a84:	f003 fc88 	bl	8004398 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.CalibrationValueForCurrent1 ,0);
 8000a88:	4878      	ldr	r0, [pc, #480]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a8a:	f003 fc2d 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000a8e:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4878      	ldr	r0, [pc, #480]	; (8000c78 <InfoToUARTBeforeStart+0x208>)
 8000a98:	f003 fc7e 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent2 ,0);
 8000a9c:	4873      	ldr	r0, [pc, #460]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a9e:	f003 fc23 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4874      	ldr	r0, [pc, #464]	; (8000c7c <InfoToUARTBeforeStart+0x20c>)
 8000aac:	f003 fc74 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent2 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ab2:	f003 fc19 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000ab6:	4b6e      	ldr	r3, [pc, #440]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4870      	ldr	r0, [pc, #448]	; (8000c80 <InfoToUARTBeforeStart+0x210>)
 8000ac0:	f003 fc6a 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent3 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8000ac4:	4869      	ldr	r0, [pc, #420]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ac6:	f003 fc0f 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	486c      	ldr	r0, [pc, #432]	; (8000c84 <InfoToUARTBeforeStart+0x214>)
 8000ad4:	f003 fc60 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage3 ,0);
 8000ad8:	4864      	ldr	r0, [pc, #400]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ada:	f003 fc05 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4868      	ldr	r0, [pc, #416]	; (8000c88 <InfoToUARTBeforeStart+0x218>)
 8000ae8:	f003 fc56 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage4 ,0);
 8000aec:	485f      	ldr	r0, [pc, #380]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000aee:	f003 fbfb 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4864      	ldr	r0, [pc, #400]	; (8000c8c <InfoToUARTBeforeStart+0x21c>)
 8000afc:	f003 fc4c 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage3 =",CalibrationData.CalibrationValueForVoltage5 ,0);
 8000b00:	485a      	ldr	r0, [pc, #360]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b02:	f003 fbf1 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b06:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4860      	ldr	r0, [pc, #384]	; (8000c90 <InfoToUARTBeforeStart+0x220>)
 8000b10:	f003 fc42 	bl	8004398 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage4 =",CalibrationData.CalibrationValueForVoltage6 ,0) ;
 8000b14:	4855      	ldr	r0, [pc, #340]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b16:	f003 fbe7 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <InfoToUARTBeforeStart+0x224>)
 8000b24:	f003 fc38 	bl	8004398 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.CalibrationValueForVoltage7 ,0) ;
 8000b28:	4850      	ldr	r0, [pc, #320]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b2a:	f003 fbdd 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4858      	ldr	r0, [pc, #352]	; (8000c98 <InfoToUARTBeforeStart+0x228>)
 8000b38:	f003 fc2e 	bl	8004398 <printToBufferUART1D>
	delay_ms(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f000 f919 	bl	8000d74 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8000b42:	484a      	ldr	r0, [pc, #296]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b44:	f003 fbd0 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <InfoToUARTBeforeStart+0x230>)
 8000b52:	f003 fc21 	bl	8004398 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 8000b56:	4845      	ldr	r0, [pc, #276]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b58:	f003 fbc6 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <InfoToUARTBeforeStart+0x234>)
 8000b66:	f003 fc17 	bl	8004398 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 8000b6a:	4840      	ldr	r0, [pc, #256]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b6c:	f003 fbbc 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <InfoToUARTBeforeStart+0x238>)
 8000b7a:	f003 fc0d 	bl	8004398 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 8000b7e:	483b      	ldr	r0, [pc, #236]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b80:	f003 fbb2 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4847      	ldr	r0, [pc, #284]	; (8000cac <InfoToUARTBeforeStart+0x23c>)
 8000b8e:	f003 fc03 	bl	8004398 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b94:	f003 fba8 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4843      	ldr	r0, [pc, #268]	; (8000cb0 <InfoToUARTBeforeStart+0x240>)
 8000ba2:	f003 fbf9 	bl	8004398 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 8000ba6:	4831      	ldr	r0, [pc, #196]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ba8:	f003 fb9e 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483f      	ldr	r0, [pc, #252]	; (8000cb4 <InfoToUARTBeforeStart+0x244>)
 8000bb6:	f003 fbef 	bl	8004398 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bbc:	f003 fb94 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <InfoToUARTBeforeStart+0x248>)
 8000bca:	f003 fbe5 	bl	8004398 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 8000bce:	4827      	ldr	r0, [pc, #156]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bd0:	f003 fb8a 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4837      	ldr	r0, [pc, #220]	; (8000cbc <InfoToUARTBeforeStart+0x24c>)
 8000bde:	f003 fbdb 	bl	8004398 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000be4:	f003 fb80 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <InfoToUARTBeforeStart+0x250>)
 8000bf2:	f003 fbd1 	bl	8004398 <printToBufferUART1D>
	delay_ms(50);
 8000bf6:	2032      	movs	r0, #50	; 0x32
 8000bf8:	f000 f8bc 	bl	8000d74 <delay_ms>

	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bfe:	f003 fb73 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <InfoToUARTBeforeStart+0x258>)
 8000c0c:	f003 fbc4 	bl	8004398 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c12:	f003 fb69 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <InfoToUARTBeforeStart+0x25c>)
 8000c20:	f003 fbba 	bl	8004398 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c26:	f003 fb5f 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <InfoToUARTBeforeStart+0x260>)
 8000c34:	f003 fbb0 	bl	8004398 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c3a:	f003 fb55 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <InfoToUARTBeforeStart+0x264>)
 8000c48:	f003 fba6 	bl	8004398 <printToBufferUART1D>

	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c4e:	f003 fb4b 	bl	80042e8 <printToBufferWithoutEndUART1>
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <InfoToUARTBeforeStart+0x268>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <InfoToUARTBeforeStart+0x26c>)
 8000c5c:	f003 fb9c 	bl	8004398 <printToBufferUART1D>
	delay_ms(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f000 f887 	bl	8000d74 <delay_ms>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	08005604 	.word	0x08005604
 8000c70:	20000004 	.word	0x20000004
 8000c74:	0800560c 	.word	0x0800560c
 8000c78:	08005620 	.word	0x08005620
 8000c7c:	08005640 	.word	0x08005640
 8000c80:	08005660 	.word	0x08005660
 8000c84:	08005680 	.word	0x08005680
 8000c88:	080056a0 	.word	0x080056a0
 8000c8c:	080056c0 	.word	0x080056c0
 8000c90:	080056e0 	.word	0x080056e0
 8000c94:	08005700 	.word	0x08005700
 8000c98:	08005720 	.word	0x08005720
 8000c9c:	20000054 	.word	0x20000054
 8000ca0:	08005738 	.word	0x08005738
 8000ca4:	0800574c 	.word	0x0800574c
 8000ca8:	08005768 	.word	0x08005768
 8000cac:	08005778 	.word	0x08005778
 8000cb0:	08005788 	.word	0x08005788
 8000cb4:	08005798 	.word	0x08005798
 8000cb8:	080057a8 	.word	0x080057a8
 8000cbc:	080057bc 	.word	0x080057bc
 8000cc0:	080057d0 	.word	0x080057d0
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	080057f0 	.word	0x080057f0
 8000ccc:	0800580c 	.word	0x0800580c
 8000cd0:	08005834 	.word	0x08005834
 8000cd4:	08005858 	.word	0x08005858
 8000cd8:	200000cc 	.word	0x200000cc
 8000cdc:	08005864 	.word	0x08005864

08000ce0 <delay_us>:
void delay_us(uint32_t us)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	volatile uint32_t n = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	if (us==1) n=1;//в тактах процесора
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <delay_us+0x16>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
	if (us==2) n=2;//в тактах процесора
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d101      	bne.n	8000d00 <delay_us+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
	if (us==3) n=18;//в тактах процесора
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d101      	bne.n	8000d0a <delay_us+0x2a>
 8000d06:	2312      	movs	r3, #18
 8000d08:	617b      	str	r3, [r7, #20]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d90a      	bls.n	8000d26 <delay_us+0x46>
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <delay_us+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <delay_us+0x8c>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	3a03      	subs	r2, #3
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <delay_us+0x90>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	613b      	str	r3, [r7, #16]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60fb      	str	r3, [r7, #12]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <delay_us+0x90>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	60bb      	str	r3, [r7, #8]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d305      	bcc.n	8000d4c <delay_us+0x6c>
            n0+=SysTick->LOAD+1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <delay_us+0x90>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4413      	add	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        np=nc;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60fb      	str	r3, [r7, #12]
    }while(n0-nc<n);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	1a9a      	subs	r2, r3, r2
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3e9      	bcc.n	8000d30 <delay_us+0x50>
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200000cc 	.word	0x200000cc
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	while(value>0)
 8000d7c:	e006      	b.n	8000d8c <delay_ms+0x18>
	{
		delay_us(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f7ff ffad 	bl	8000ce0 <delay_us>
		value--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
	while(value>0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f5      	bne.n	8000d7e <delay_ms+0xa>
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <calcCRC>:
* количество байтов, участвующих в расчете (ровно)
* начальный код CRC (если считается не с начала массива),
* Для ускорения расчета используется таблица
***********************************************************************/
char calcCRC(char *Ptr, char Num, char CRC1)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0c2      	sub	sp, #264	; 0x108
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000daa:	6018      	str	r0, [r3, #0]
 8000dac:	4608      	mov	r0, r1
 8000dae:	4611      	mov	r1, r2
 8000db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000db4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000db8:	4602      	mov	r2, r0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dc0:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
   char CrcTable[256] = {
 8000dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <calcCRC+0xb8>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f004 f928 	bl	8005030 <memcpy>
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000dee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000df2:	1c59      	adds	r1, r3, #1
 8000df4:	6011      	str	r1, [r2, #0]
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dfc:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4053      	eors	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e0c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e10:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000e14:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000e18:	5c52      	ldrb	r2, [r2, r1]
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e20:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000e24:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000e28:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	3a01      	subs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e36:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1cf      	bne.n	8000de0 <calcCRC+0x44>
  return CRC1;
 8000e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e44:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08005878 	.word	0x08005878

08000e58 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	int32_t sign;
	int8_t i,k;
	char s[16];
	static char s1[16];
     if ((sign = n) < 0)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da02      	bge.n	8000e70 <itoa+0x18>
         n = -n;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	607b      	str	r3, [r7, #4]
     i = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	77fb      	strb	r3, [r7, #31]
     do {
         s[i++] = n % 10 + '0';
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <itoa+0xe4>)
 8000e78:	fb83 1302 	smull	r1, r3, r3, r2
 8000e7c:	1099      	asrs	r1, r3, #2
 8000e7e:	17d3      	asrs	r3, r2, #31
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	1ad1      	subs	r1, r2, r3
 8000e8c:	b2cb      	uxtb	r3, r1
 8000e8e:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	3201      	adds	r2, #1
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	77fa      	strb	r2, [r7, #31]
 8000e9a:	3330      	adds	r3, #48	; 0x30
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	f101 0320 	add.w	r3, r1, #32
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f803 2c18 	strb.w	r2, [r3, #-24]
     } while ((n /= 10) > 0);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <itoa+0xe4>)
 8000eac:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb0:	1092      	asrs	r2, r2, #2
 8000eb2:	17db      	asrs	r3, r3, #31
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	dcda      	bgt.n	8000e74 <itoa+0x1c>
     if (sign < 0)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da0b      	bge.n	8000edc <itoa+0x84>
         s[i++] = '-';
 8000ec4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000ec8:	b2d3      	uxtb	r3, r2
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	77fb      	strb	r3, [r7, #31]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	3320      	adds	r3, #32
 8000ed4:	443b      	add	r3, r7
 8000ed6:	222d      	movs	r2, #45	; 0x2d
 8000ed8:	f803 2c18 	strb.w	r2, [r3, #-24]
     s[i] = '\0';
 8000edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	443b      	add	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f803 2c18 	strb.w	r2, [r3, #-24]

     k=0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000eee:	e016      	b.n	8000f1e <itoa+0xc6>
     {
    	s1[k]=s[i-1];
 8000ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000efa:	3220      	adds	r2, #32
 8000efc:	443a      	add	r2, r7
 8000efe:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <itoa+0xe8>)
 8000f04:	54d1      	strb	r1, [r2, r3]
    	i--;
 8000f06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	77fb      	strb	r3, [r7, #31]
    	k++;
 8000f12:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1e4      	bne.n	8000ef0 <itoa+0x98>
     }
     s1[k] = '\0';
 8000f26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <itoa+0xe8>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	54d1      	strb	r1, [r2, r3]
     return s1;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <itoa+0xe8>)
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	66666667 	.word	0x66666667
 8000f40:	200009c0 	.word	0x200009c0

08000f44 <itoa_koma>:
     s1[k] = '\0';
     return s1;
}

char * itoa_koma(int32_t n,uint8_t koma)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b08f      	sub	sp, #60	; 0x3c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	int32_t sign;
	int8_t i,k,j;
	char s[17];
	char sKoma[17];
	static char s1[17];
    if ((sign = n) < 0)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
 8000f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da02      	bge.n	8000f60 <itoa_koma+0x1c>
    	n = -n;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	607b      	str	r3, [r7, #4]
     i = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     do
     {
         s[i++] = n % 10 + '0';
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <itoa_koma+0x1b8>)
 8000f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f6e:	1099      	asrs	r1, r3, #2
 8000f70:	17d3      	asrs	r3, r2, #31
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	1ad1      	subs	r1, r2, r3
 8000f7e:	b2cb      	uxtb	r3, r1
 8000f80:	f997 1037 	ldrsb.w	r1, [r7, #55]	; 0x37
 8000f84:	b2ca      	uxtb	r2, r1
 8000f86:	3201      	adds	r2, #1
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000f8e:	3330      	adds	r3, #48	; 0x30
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8000f96:	443b      	add	r3, r7
 8000f98:	f803 2c1c 	strb.w	r2, [r3, #-28]
     } while ((n /= 10) > 0);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	; (80010fc <itoa_koma+0x1b8>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	1092      	asrs	r2, r2, #2
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dcd9      	bgt.n	8000f66 <itoa_koma+0x22>
     s[i] = '\0';
 8000fb2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fb6:	3338      	adds	r3, #56	; 0x38
 8000fb8:	443b      	add	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f803 2c1c 	strb.w	r2, [r3, #-28]
     if (i<=1)
 8000fc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	dc0d      	bgt.n	8000fe4 <itoa_koma+0xa0>
     {
       	 s[i] = '0';
 8000fc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fcc:	3338      	adds	r3, #56	; 0x38
 8000fce:	443b      	add	r3, r7
 8000fd0:	2230      	movs	r2, #48	; 0x30
 8000fd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
       	 i++;
 8000fd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     if (i<=2&&koma>1)
 8000fe4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	dc10      	bgt.n	800100e <itoa_koma+0xca>
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d90d      	bls.n	800100e <itoa_koma+0xca>
     {
    	 s[i] = '0';
 8000ff2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ff6:	3338      	adds	r3, #56	; 0x38
 8000ff8:	443b      	add	r3, r7
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    	 i++;
 8001000:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     k=0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     j=0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     while (j<i)
 800101a:	e02c      	b.n	8001076 <itoa_koma+0x132>
     {
    	 if (k==koma)
 800101c:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	429a      	cmp	r2, r3
 8001024:	d10d      	bne.n	8001042 <itoa_koma+0xfe>
         {
         	 sKoma[k]='.';
 8001026:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800102a:	3338      	adds	r3, #56	; 0x38
 800102c:	443b      	add	r3, r7
 800102e:	222e      	movs	r2, #46	; 0x2e
 8001030:	f803 2c30 	strb.w	r2, [r3, #-48]
         	 k++;
 8001034:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
         }
    	 sKoma[k]=s[j];
 8001042:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001046:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800104a:	3238      	adds	r2, #56	; 0x38
 800104c:	443a      	add	r2, r7
 800104e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001052:	3338      	adds	r3, #56	; 0x38
 8001054:	443b      	add	r3, r7
 8001056:	f803 2c30 	strb.w	r2, [r3, #-48]
         j++;
 800105a:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800105e:	b2db      	uxtb	r3, r3
 8001060:	3301      	adds	r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
         k++;
 8001068:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     while (j<i)
 8001076:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800107a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800107e:	429a      	cmp	r2, r3
 8001080:	dbcc      	blt.n	800101c <itoa_koma+0xd8>
      }
     if (sign < 0) sKoma[k++] = '-';
 8001082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001084:	2b00      	cmp	r3, #0
 8001086:	da0c      	bge.n	80010a2 <itoa_koma+0x15e>
 8001088:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 800108c:	b2d3      	uxtb	r3, r2
 800108e:	3301      	adds	r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001096:	4613      	mov	r3, r2
 8001098:	3338      	adds	r3, #56	; 0x38
 800109a:	443b      	add	r3, r7
 800109c:	222d      	movs	r2, #45	; 0x2d
 800109e:	f803 2c30 	strb.w	r2, [r3, #-48]
     i=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 80010a8:	e018      	b.n	80010dc <itoa_koma+0x198>
     {
    	s1[i]=sKoma[k-1];
 80010aa:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010b4:	3238      	adds	r2, #56	; 0x38
 80010b6:	443a      	add	r2, r7
 80010b8:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 80010bc:	4a10      	ldr	r2, [pc, #64]	; (8001100 <itoa_koma+0x1bc>)
 80010be:	54d1      	strb	r1, [r2, r3]
    	k--;
 80010c0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    	i++;
 80010ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 80010dc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e2      	bne.n	80010aa <itoa_koma+0x166>
     }
     s1[i] = '\0';
 80010e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <itoa_koma+0x1bc>)
 80010ea:	2100      	movs	r1, #0
 80010ec:	54d1      	strb	r1, [r2, r3]
     return s1;
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <itoa_koma+0x1bc>)
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	373c      	adds	r7, #60	; 0x3c
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	66666667 	.word	0x66666667
 8001100:	200009d0 	.word	0x200009d0

08001104 <Module16>:
     }
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	if (value == 0) return 0;
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <Module16+0x16>
 8001116:	2300      	movs	r3, #0
 8001118:	e00f      	b.n	800113a <Module16+0x36>
	if (value > 0) return value;
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dd02      	ble.n	8001128 <Module16+0x24>
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	e008      	b.n	800113a <Module16+0x36>
	if (value < 0) return (-1)*value;
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da04      	bge.n	800113a <Module16+0x36>
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	425b      	negs	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	e7ff      	b.n	800113a <Module16+0x36>
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <Module32>:
	if (value == 0) return 0;
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}
int32_t Module32 (int32_t value)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if (value == 0) return 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <Module32+0x12>
 8001152:	2300      	movs	r3, #0
 8001154:	e00a      	b.n	800116c <Module32+0x28>
	if (value > 0) return value;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd01      	ble.n	8001160 <Module32+0x1c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	e005      	b.n	800116c <Module32+0x28>
	if (value < 0) return (-1)*value;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	da02      	bge.n	800116c <Module32+0x28>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	425b      	negs	r3, r3
 800116a:	e7ff      	b.n	800116c <Module32+0x28>
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <RunningAverageI1>:

   return middle;
}

int32_t RunningAverageI1(int32_t newValue)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <RunningAverageI1+0x4c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800119c:	fb03 f202 	mul.w	r2, r3, r2
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <RunningAverageI1+0x4c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <RunningAverageI1+0x4c>)
 80011a8:	6013      	str	r3, [r2, #0]
	return filteredlValueI1/10;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <RunningAverageI1+0x4c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <RunningAverageI1+0x50>)
 80011b0:	fb82 1203 	smull	r1, r2, r2, r3
 80011b4:	1092      	asrs	r2, r2, #2
 80011b6:	17db      	asrs	r3, r3, #31
 80011b8:	1ad3      	subs	r3, r2, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	200009e4 	.word	0x200009e4
 80011c8:	66666667 	.word	0x66666667

080011cc <RunningAverageI2>:

int32_t RunningAverageI2(int32_t newValue)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <RunningAverageI2+0x4c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80011f0:	fb03 f202 	mul.w	r2, r3, r2
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <RunningAverageI2+0x4c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <RunningAverageI2+0x4c>)
 80011fc:	6013      	str	r3, [r2, #0]
	return filteredlValueI2/10;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <RunningAverageI2+0x4c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <RunningAverageI2+0x50>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	1092      	asrs	r2, r2, #2
 800120a:	17db      	asrs	r3, r3, #31
 800120c:	1ad3      	subs	r3, r2, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	200009e8 	.word	0x200009e8
 800121c:	66666667 	.word	0x66666667

08001220 <RunningAverageU1>:

int32_t RunningAverageU1(int32_t newValue)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <RunningAverageU1+0x4c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <RunningAverageU1+0x4c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <RunningAverageU1+0x4c>)
 8001250:	6013      	str	r3, [r2, #0]
	return filteredlValueU1/10;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <RunningAverageU1+0x4c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <RunningAverageU1+0x50>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1092      	asrs	r2, r2, #2
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200009ec 	.word	0x200009ec
 8001270:	66666667 	.word	0x66666667

08001274 <RunningAverageU2>:

int32_t RunningAverageU2(int32_t newValue)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <RunningAverageU2+0x4c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001298:	fb03 f202 	mul.w	r2, r3, r2
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <RunningAverageU2+0x4c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <RunningAverageU2+0x4c>)
 80012a4:	6013      	str	r3, [r2, #0]
	return filteredlValueU2/10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <RunningAverageU2+0x4c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <RunningAverageU2+0x50>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	1092      	asrs	r2, r2, #2
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	200009f0 	.word	0x200009f0
 80012c4:	66666667 	.word	0x66666667

080012c8 <RunningAverageU3>:

int32_t RunningAverageU3(int32_t newValue)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU3 = 0;
	filteredlValueU3 += (newValue - filteredlValueU3) * k;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <RunningAverageU3+0x4c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80012ec:	fb03 f202 	mul.w	r2, r3, r2
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <RunningAverageU3+0x4c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <RunningAverageU3+0x4c>)
 80012f8:	6013      	str	r3, [r2, #0]
	return filteredlValueU3/10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <RunningAverageU3+0x4c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <RunningAverageU3+0x50>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	1092      	asrs	r2, r2, #2
 8001306:	17db      	asrs	r3, r3, #31
 8001308:	1ad3      	subs	r3, r2, r3
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	200009f4 	.word	0x200009f4
 8001318:	66666667 	.word	0x66666667

0800131c <RunningAverageU4>:

int32_t RunningAverageU4(int32_t newValue)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU4 = 0;
	filteredlValueU4 += (newValue - filteredlValueU4) * k;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <RunningAverageU4+0x4c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001340:	fb03 f202 	mul.w	r2, r3, r2
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <RunningAverageU4+0x4c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4413      	add	r3, r2
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <RunningAverageU4+0x4c>)
 800134c:	6013      	str	r3, [r2, #0]
	return filteredlValueU4/10;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <RunningAverageU4+0x4c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <RunningAverageU4+0x50>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1092      	asrs	r2, r2, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	200009f8 	.word	0x200009f8
 800136c:	66666667 	.word	0x66666667

08001370 <RunningAverageU5>:

int32_t RunningAverageU5(int32_t newValue)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU5 = 0;
	filteredlValueU5 += (newValue - filteredlValueU5) * k;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <RunningAverageU5+0x4c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001394:	fb03 f202 	mul.w	r2, r3, r2
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <RunningAverageU5+0x4c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4413      	add	r3, r2
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <RunningAverageU5+0x4c>)
 80013a0:	6013      	str	r3, [r2, #0]
	return filteredlValueU5/10;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <RunningAverageU5+0x4c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <RunningAverageU5+0x50>)
 80013a8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ac:	1092      	asrs	r2, r2, #2
 80013ae:	17db      	asrs	r3, r3, #31
 80013b0:	1ad3      	subs	r3, r2, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	200009fc 	.word	0x200009fc
 80013c0:	66666667 	.word	0x66666667

080013c4 <RunningAverageU6>:

int32_t RunningAverageU6(int32_t newValue)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU6 = 0;
	filteredlValueU6 += (newValue - filteredlValueU6) * k;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <RunningAverageU6+0x4c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80013e8:	fb03 f202 	mul.w	r2, r3, r2
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <RunningAverageU6+0x4c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a07      	ldr	r2, [pc, #28]	; (8001410 <RunningAverageU6+0x4c>)
 80013f4:	6013      	str	r3, [r2, #0]
	return filteredlValueU6/10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <RunningAverageU6+0x4c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <RunningAverageU6+0x50>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1092      	asrs	r2, r2, #2
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad3      	subs	r3, r2, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000a00 	.word	0x20000a00
 8001414:	66666667 	.word	0x66666667

08001418 <RunningAverageU7>:

int32_t RunningAverageU7(int32_t newValue)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU7 = 0;
	filteredlValueU7 += (newValue - filteredlValueU7) * k;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <RunningAverageU7+0x4c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800143c:	fb03 f202 	mul.w	r2, r3, r2
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <RunningAverageU7+0x4c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4413      	add	r3, r2
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <RunningAverageU7+0x4c>)
 8001448:	6013      	str	r3, [r2, #0]
	return filteredlValueU7/10;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <RunningAverageU7+0x4c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a06      	ldr	r2, [pc, #24]	; (8001468 <RunningAverageU7+0x50>)
 8001450:	fb82 1203 	smull	r1, r2, r2, r3
 8001454:	1092      	asrs	r2, r2, #2
 8001456:	17db      	asrs	r3, r3, #31
 8001458:	1ad3      	subs	r3, r2, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000a04 	.word	0x20000a04
 8001468:	66666667 	.word	0x66666667

0800146c <RunningAverageU8>:

int32_t RunningAverageU8(int32_t newValue)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU8 = 0;
	filteredlValueU8 += (newValue - filteredlValueU8) * k;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <RunningAverageU8+0x4c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001490:	fb03 f202 	mul.w	r2, r3, r2
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <RunningAverageU8+0x4c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4413      	add	r3, r2
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <RunningAverageU8+0x4c>)
 800149c:	6013      	str	r3, [r2, #0]
	return filteredlValueU8/10;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <RunningAverageU8+0x4c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a06      	ldr	r2, [pc, #24]	; (80014bc <RunningAverageU8+0x50>)
 80014a4:	fb82 1203 	smull	r1, r2, r2, r3
 80014a8:	1092      	asrs	r2, r2, #2
 80014aa:	17db      	asrs	r3, r3, #31
 80014ac:	1ad3      	subs	r3, r2, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000a08 	.word	0x20000a08
 80014bc:	66666667 	.word	0x66666667

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <__NVIC_EnableIRQ+0x34>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff90 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <LL_ADC_DMA_GetRegAddr>:
  
  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	334c      	adds	r3, #76	; 0x4c
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	332c      	adds	r3, #44	; 0x2c
 80016a4:	4619      	mov	r1, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016b0:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	fa92 f2a2 	rbit	r2, r2
 80016b8:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	211f      	movs	r1, #31
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f003 011f 	and.w	r1, r3, #31
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	431a      	orrs	r2, r3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016f4:	bf00      	nop
 80016f6:	3724      	adds	r7, #36	; 0x24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016fe:	b480      	push	{r7}
 8001700:	b08d      	sub	sp, #52	; 0x34
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	4619      	mov	r1, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	617a      	str	r2, [r7, #20]
  return result;
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	fab2 f282 	clz	r2, r2
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	40d3      	lsrs	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800173e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001742:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	6a39      	ldr	r1, [r7, #32]
 8001746:	fa91 f1a1 	rbit	r1, r1
 800174a:	61f9      	str	r1, [r7, #28]
  return result;
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	fab1 f181 	clz	r1, r1
 8001752:	b2c9      	uxtb	r1, r1
 8001754:	40cb      	lsrs	r3, r1
 8001756:	2107      	movs	r1, #7
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001766:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800176a:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176e:	fa91 f1a1 	rbit	r1, r1
 8001772:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001776:	fab1 f181 	clz	r1, r1
 800177a:	b2c9      	uxtb	r1, r1
 800177c:	40cb      	lsrs	r3, r1
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	431a      	orrs	r2, r3
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800178a:	bf00      	nop
 800178c:	3734      	adds	r7, #52	; 0x34
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f043 0204 	orr.w	r2, r3, #4
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <LL_DMA_EnableChannel+0x38>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	3a01      	subs	r2, #1
 8001832:	4906      	ldr	r1, [pc, #24]	; (800184c <LL_DMA_EnableChannel+0x38>)
 8001834:	5c8a      	ldrb	r2, [r1, r2]
 8001836:	4611      	mov	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	440a      	add	r2, r1
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	08005b30 	.word	0x08005b30

08001850 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3b01      	subs	r3, #1
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <LL_DMA_SetDataTransferDirection+0x44>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001870:	f023 0310 	bic.w	r3, r3, #16
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	3a01      	subs	r2, #1
 8001878:	4906      	ldr	r1, [pc, #24]	; (8001894 <LL_DMA_SetDataTransferDirection+0x44>)
 800187a:	5c8a      	ldrb	r2, [r1, r2]
 800187c:	4611      	mov	r1, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	440a      	add	r2, r1
 8001882:	4611      	mov	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	08005b30 	.word	0x08005b30

08001898 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LL_DMA_SetMode+0x40>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0220 	bic.w	r2, r3, #32
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <LL_DMA_SetMode+0x40>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	4619      	mov	r1, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	440b      	add	r3, r1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	08005b30 	.word	0x08005b30

080018dc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LL_DMA_SetPeriphIncMode+0x40>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3b01      	subs	r3, #1
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <LL_DMA_SetPeriphIncMode+0x40>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	4619      	mov	r1, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	440b      	add	r3, r1
 800190a:	4619      	mov	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	08005b30 	.word	0x08005b30

08001920 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	3b01      	subs	r3, #1
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LL_DMA_SetMemoryIncMode+0x40>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3b01      	subs	r3, #1
 8001944:	4906      	ldr	r1, [pc, #24]	; (8001960 <LL_DMA_SetMemoryIncMode+0x40>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	4619      	mov	r1, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	440b      	add	r3, r1
 800194e:	4619      	mov	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	08005b30 	.word	0x08005b30

08001964 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <LL_DMA_SetPeriphSize+0x40>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	461a      	mov	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3b01      	subs	r3, #1
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <LL_DMA_SetPeriphSize+0x40>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	4619      	mov	r1, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	440b      	add	r3, r1
 8001992:	4619      	mov	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	08005b30 	.word	0x08005b30

080019a8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LL_DMA_SetMemorySize+0x40>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4906      	ldr	r1, [pc, #24]	; (80019e8 <LL_DMA_SetMemorySize+0x40>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	4619      	mov	r1, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	440b      	add	r3, r1
 80019d6:	4619      	mov	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	08005b30 	.word	0x08005b30

080019ec <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LL_DMA_SetChannelPriorityLevel+0x40>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	440b      	add	r3, r1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	08005b30 	.word	0x08005b30

08001a30 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LL_DMA_SetDataLength+0x40>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	3a01      	subs	r2, #1
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <LL_DMA_SetDataLength+0x40>)
 8001a56:	5c8a      	ldrb	r2, [r1, r2]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	440a      	add	r2, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	08005b30 	.word	0x08005b30

08001a74 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d114      	bne.n	8001ab2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <LL_DMA_ConfigAddresses+0x70>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <LL_DMA_ConfigAddresses+0x70>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001ab0:	e013      	b.n	8001ada <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <LL_DMA_ConfigAddresses+0x70>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <LL_DMA_ConfigAddresses+0x70>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	60d3      	str	r3, [r2, #12]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	08005b30 	.word	0x08005b30

08001ae8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <LL_RCC_HSE_Enable+0x18>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <LL_RCC_HSE_Enable+0x18>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <LL_RCC_HSE_IsReady+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000

08001b28 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <LL_RCC_SetSysClkSource+0x24>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 0203 	bic.w	r2, r3, #3
 8001b38:	4904      	ldr	r1, [pc, #16]	; (8001b4c <LL_RCC_SetSysClkSource+0x24>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <LL_RCC_GetSysClkSource+0x14>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba0:	4904      	ldr	r1, [pc, #16]	; (8001bb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <LL_RCC_SetADCClockSource+0x24>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bf0:	4904      	ldr	r1, [pc, #16]	; (8001c04 <LL_RCC_SetADCClockSource+0x24>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <LL_RCC_PLL_Enable+0x18>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <LL_RCC_PLL_Enable+0x18>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000

08001c24 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <LL_RCC_PLL_IsReady+0x20>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000

08001c48 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	4908      	ldr	r1, [pc, #32]	; (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	605a      	str	r2, [r3, #4]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60da      	str	r2, [r3, #12]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	615a      	str	r2, [r3, #20]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60da      	str	r2, [r3, #12]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	4013      	ands	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	615a      	str	r2, [r3, #20]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
	...

08001e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e96:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	6053      	str	r3, [r2, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	40010000 	.word	0x40010000

08001eb0 <OFF_Itself>:
}Key_Pressed_t ;

Key_Pressed_t pressedKey = 0;

void OFF_Itself()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if (EEpromSaveStatus == 0)
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <OFF_Itself+0x48>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10a      	bne.n	8001ed2 <OFF_Itself+0x22>
	{
		if (BatteryCapacityDischargeCurrent/3600 > 200)
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <OFF_Itself+0x4c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <OFF_Itself+0x50>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d905      	bls.n	8001ed2 <OFF_Itself+0x22>
		{
			//SaveData.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
			//EEpromWrite();
			logInfo("Data saved ");
 8001ec6:	480f      	ldr	r0, [pc, #60]	; (8001f04 <OFF_Itself+0x54>)
 8001ec8:	f002 fa0e 	bl	80042e8 <printToBufferWithoutEndUART1>
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <OFF_Itself+0x58>)
 8001ece:	f002 f97f 	bl	80041d0 <printToBufferUART1>
		}
	}
	EEpromSaveStatus = 1;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <OFF_Itself+0x48>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	801a      	strh	r2, [r3, #0]
	logInfo("OFF All System");
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <OFF_Itself+0x54>)
 8001eda:	f002 fa05 	bl	80042e8 <printToBufferWithoutEndUART1>
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <OFF_Itself+0x5c>)
 8001ee0:	f002 f976 	bl	80041d0 <printToBufferUART1>
	delay_ms(100);
 8001ee4:	2064      	movs	r0, #100	; 0x64
 8001ee6:	f7fe ff45 	bl	8000d74 <delay_ms>
	GPIOA->BSRR =  GPIO_BSRR_BR11;//OFF CPU
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <OFF_Itself+0x60>)
 8001eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef0:	611a      	str	r2, [r3, #16]

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200009b4 	.word	0x200009b4
 8001efc:	20000a28 	.word	0x20000a28
 8001f00:	000b0a8f 	.word	0x000b0a8f
 8001f04:	08005978 	.word	0x08005978
 8001f08:	08005980 	.word	0x08005980
 8001f0c:	0800598c 	.word	0x0800598c
 8001f10:	40010800 	.word	0x40010800

08001f14 <AllBalansirON>:

void AllBalansirON()
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <AllBalansirON+0x48>)
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <AllBalansirON+0x48>)
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <AllBalansirON+0x4c>)
 8001f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f2a:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <AllBalansirON+0x4c>)
 8001f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f32:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <AllBalansirON+0x4c>)
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <AllBalansirON+0x4c>)
 8001f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f42:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <AllBalansirON+0x4c>)
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <AllBalansirON+0x4c>)
 8001f4e:	2220      	movs	r2, #32
 8001f50:	611a      	str	r2, [r3, #16]

}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40010c00 	.word	0x40010c00

08001f64 <Balansir_handler>:


#define DEBAUNCE 3  //3 - 30mV
#define DEBAUNCE_FAIL 2 //1 - 10mV
void Balansir_handler()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	if(CellsDatabase[0].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <Balansir_handler+0x1fc>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001f72:	d302      	bcc.n	8001f7a <Balansir_handler+0x16>
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <Balansir_handler+0x200>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[0].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR7;//Battery 1 Balansir OFF
 8001f7a:	4b79      	ldr	r3, [pc, #484]	; (8002160 <Balansir_handler+0x1fc>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001f82:	d803      	bhi.n	8001f8c <Balansir_handler+0x28>
 8001f84:	4b77      	ldr	r3, [pc, #476]	; (8002164 <Balansir_handler+0x200>)
 8001f86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f8a:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[1].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 8001f8c:	4b74      	ldr	r3, [pc, #464]	; (8002160 <Balansir_handler+0x1fc>)
 8001f8e:	8b9b      	ldrh	r3, [r3, #28]
 8001f90:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001f94:	d302      	bcc.n	8001f9c <Balansir_handler+0x38>
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <Balansir_handler+0x200>)
 8001f98:	2240      	movs	r2, #64	; 0x40
 8001f9a:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[1].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR6;//Battery 2 Balansir OFF
 8001f9c:	4b70      	ldr	r3, [pc, #448]	; (8002160 <Balansir_handler+0x1fc>)
 8001f9e:	8b9b      	ldrh	r3, [r3, #28]
 8001fa0:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001fa4:	d803      	bhi.n	8001fae <Balansir_handler+0x4a>
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <Balansir_handler+0x200>)
 8001fa8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fac:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[2].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 8001fae:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <Balansir_handler+0x1fc>)
 8001fb0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001fb2:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001fb6:	d303      	bcc.n	8001fc0 <Balansir_handler+0x5c>
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <Balansir_handler+0x204>)
 8001fba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fbe:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[2].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR15;//Battery 3 Balansir OFF
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <Balansir_handler+0x1fc>)
 8001fc2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001fc4:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001fc8:	d803      	bhi.n	8001fd2 <Balansir_handler+0x6e>
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <Balansir_handler+0x204>)
 8001fcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fd0:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[3].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <Balansir_handler+0x1fc>)
 8001fd4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fd8:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001fdc:	d303      	bcc.n	8001fe6 <Balansir_handler+0x82>
 8001fde:	4b62      	ldr	r3, [pc, #392]	; (8002168 <Balansir_handler+0x204>)
 8001fe0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe4:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[3].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR14;//Battery 4 Balansir OFF
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <Balansir_handler+0x1fc>)
 8001fe8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fec:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001ff0:	d803      	bhi.n	8001ffa <Balansir_handler+0x96>
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <Balansir_handler+0x204>)
 8001ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff8:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[4].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 8001ffa:	4b59      	ldr	r3, [pc, #356]	; (8002160 <Balansir_handler+0x1fc>)
 8001ffc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002000:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002004:	d303      	bcc.n	800200e <Balansir_handler+0xaa>
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <Balansir_handler+0x204>)
 8002008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200c:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[4].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR13;//Battery 5 Balansir OFF
 800200e:	4b54      	ldr	r3, [pc, #336]	; (8002160 <Balansir_handler+0x1fc>)
 8002010:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002014:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002018:	d803      	bhi.n	8002022 <Balansir_handler+0xbe>
 800201a:	4b53      	ldr	r3, [pc, #332]	; (8002168 <Balansir_handler+0x204>)
 800201c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002020:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[5].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 8002022:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <Balansir_handler+0x1fc>)
 8002024:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002028:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800202c:	d303      	bcc.n	8002036 <Balansir_handler+0xd2>
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <Balansir_handler+0x204>)
 8002030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002034:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[5].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR12;//Battery 6 Balansir OFF
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <Balansir_handler+0x1fc>)
 8002038:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800203c:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002040:	d803      	bhi.n	800204a <Balansir_handler+0xe6>
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <Balansir_handler+0x204>)
 8002044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002048:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[6].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 800204a:	4b45      	ldr	r3, [pc, #276]	; (8002160 <Balansir_handler+0x1fc>)
 800204c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002050:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002054:	d303      	bcc.n	800205e <Balansir_handler+0xfa>
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <Balansir_handler+0x204>)
 8002058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205c:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[6].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR8;//Battery 7 Balansir OFF
 800205e:	4b40      	ldr	r3, [pc, #256]	; (8002160 <Balansir_handler+0x1fc>)
 8002060:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002064:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002068:	d803      	bhi.n	8002072 <Balansir_handler+0x10e>
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <Balansir_handler+0x204>)
 800206c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002070:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[7].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <Balansir_handler+0x1fc>)
 8002074:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002078:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800207c:	d302      	bcc.n	8002084 <Balansir_handler+0x120>
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <Balansir_handler+0x204>)
 8002080:	2220      	movs	r2, #32
 8002082:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[7].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR5;//Battery 8 Balansir OFF
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <Balansir_handler+0x1fc>)
 8002086:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800208a:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 800208e:	d803      	bhi.n	8002098 <Balansir_handler+0x134>
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <Balansir_handler+0x204>)
 8002092:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002096:	611a      	str	r2, [r3, #16]





	volatile uint8_t i = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageBeforeUmax  = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	e033      	b.n	800210e <Balansir_handler+0x1aa>
	{
		if(CellsDatabase[i].Voltage>(MAX_VOLTAGE+DEBAUNCE+DEBAUNCE_FAIL))
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <Balansir_handler+0x1fc>)
 80020ae:	460b      	mov	r3, r1
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a5b      	subs	r3, r3, r1
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80020be:	d30f      	bcc.n	80020e0 <Balansir_handler+0x17c>
		{
			Output_OFF();
 80020c0:	f000 ff76 	bl	8002fb0 <Output_OFF>
			OverChargeStatus=1;
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <Balansir_handler+0x208>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
			logDebugD("OverCharge B",i+1,0);
 80020ca:	4829      	ldr	r0, [pc, #164]	; (8002170 <Balansir_handler+0x20c>)
 80020cc:	f002 f90c 	bl	80042e8 <printToBufferWithoutEndUART1>
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	4826      	ldr	r0, [pc, #152]	; (8002174 <Balansir_handler+0x210>)
 80020dc:	f002 f95c 	bl	8004398 <printToBufferUART1D>
		}
		if(CellsDatabase[i].Voltage <= (MAX_VOLTAGE))
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <Balansir_handler+0x1fc>)
 80020e8:	460b      	mov	r3, r1
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a5b      	subs	r3, r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80020f8:	d804      	bhi.n	8002104 <Balansir_handler+0x1a0>
		{
			RestoreVoltageBeforeUmax++;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b07      	cmp	r3, #7
 8002114:	d9c7      	bls.n	80020a6 <Balansir_handler+0x142>
		}

	}

	if((OverChargeStatus==1)&&(RestoreVoltageBeforeUmax == i)&&(OverDisChargeStatus==0)&&(CurrentShortStatus==0))
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <Balansir_handler+0x208>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d11a      	bne.n	8002156 <Balansir_handler+0x1f2>
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	429a      	cmp	r2, r3
 800212a:	d114      	bne.n	8002156 <Balansir_handler+0x1f2>
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <Balansir_handler+0x214>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <Balansir_handler+0x1f2>
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <Balansir_handler+0x218>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <Balansir_handler+0x1f2>
	{
		Output_ON();
 8002140:	f000 ff22 	bl	8002f88 <Output_ON>
		OverChargeStatus=0;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <Balansir_handler+0x208>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
		logDebug("No OverCharge - Output_ON");
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <Balansir_handler+0x20c>)
 800214c:	f002 f8cc 	bl	80042e8 <printToBufferWithoutEndUART1>
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <Balansir_handler+0x21c>)
 8002152:	f002 f83d 	bl	80041d0 <printToBufferUART1>
	}

}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000ae0 	.word	0x20000ae0
 8002164:	40011000 	.word	0x40011000
 8002168:	40010c00 	.word	0x40010c00
 800216c:	200009b0 	.word	0x200009b0
 8002170:	0800599c 	.word	0x0800599c
 8002174:	080059a4 	.word	0x080059a4
 8002178:	200009b1 	.word	0x200009b1
 800217c:	200009b2 	.word	0x200009b2
 8002180:	080059b4 	.word	0x080059b4

08002184 <MinVoltage_handler>:
void MinVoltage_handler()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	volatile uint8_t i = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageonCells = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002192:	2300      	movs	r3, #0
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	e087      	b.n	80022a8 <MinVoltage_handler+0x124>
	{
		//logDebugD("i ",i+1,0);
		//logDebugD("CellsDatabase[i].Voltage ",CellsDatabase[i].Voltage,2);
		//logDebugD("Res ",(RESISTANCE*Module32(Battery.Current))/1000,2);
		//logDebugD("xxx ",(MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000),2);
		if(CellsDatabase[i].Voltage < (MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000))
 8002198:	4b5c      	ldr	r3, [pc, #368]	; (800230c <MinVoltage_handler+0x188>)
 800219a:	885b      	ldrh	r3, [r3, #2]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe ffd0 	bl	8001144 <Module32>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <MinVoltage_handler+0x18c>)
 80021a8:	fb82 1203 	smull	r1, r2, r2, r3
 80021ac:	1152      	asrs	r2, r2, #5
 80021ae:	17db      	asrs	r3, r3, #31
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	f203 1217 	addw	r2, r3, #279	; 0x117
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	4955      	ldr	r1, [pc, #340]	; (8002314 <MinVoltage_handler+0x190>)
 80021be:	4603      	mov	r3, r0
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a1b      	subs	r3, r3, r0
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	db26      	blt.n	800221c <MinVoltage_handler+0x98>
		{
			if(CellsDatabase[i].BatVoltLowerMin_Status==0)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <MinVoltage_handler+0x190>)
 80021d6:	460b      	mov	r3, r1
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3318      	adds	r3, #24
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d12a      	bne.n	800223e <MinVoltage_handler+0xba>
			{
				CellsDatabase[i].TimeSec = time_sec;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <MinVoltage_handler+0x194>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4948      	ldr	r1, [pc, #288]	; (8002314 <MinVoltage_handler+0x190>)
 80021f4:	4603      	mov	r3, r0
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a1b      	subs	r3, r3, r0
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	330c      	adds	r3, #12
 8002200:	601a      	str	r2, [r3, #0]
				CellsDatabase[i].BatVoltLowerMin_Status=1;
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <MinVoltage_handler+0x190>)
 800220a:	460b      	mov	r3, r1
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a5b      	subs	r3, r3, r1
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3318      	adds	r3, #24
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e010      	b.n	800223e <MinVoltage_handler+0xba>
			}
		}
		else
		{
			CellsDatabase[i].BatVoltLowerMin_Status=0;
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	4a3c      	ldr	r2, [pc, #240]	; (8002314 <MinVoltage_handler+0x190>)
 8002224:	460b      	mov	r3, r1
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a5b      	subs	r3, r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	3318      	adds	r3, #24
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
			RestoreVoltageonCells++;
 8002234:	79bb      	ldrb	r3, [r7, #6]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	71bb      	strb	r3, [r7, #6]
		}

		if (CellsDatabase[i].BatVoltLowerMin_Status==1)
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <MinVoltage_handler+0x190>)
 8002246:	460b      	mov	r3, r1
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a5b      	subs	r3, r3, r1
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3318      	adds	r3, #24
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d122      	bne.n	800229e <MinVoltage_handler+0x11a>
			if((time_sec-CellsDatabase[i].TimeSec)>CELLS_MIN_VOLTAGE_TIMER_OFF_SEC)
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <MinVoltage_handler+0x194>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	492c      	ldr	r1, [pc, #176]	; (8002314 <MinVoltage_handler+0x190>)
 8002264:	4603      	mov	r3, r0
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	330c      	adds	r3, #12
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b05      	cmp	r3, #5
 8002276:	d912      	bls.n	800229e <MinVoltage_handler+0x11a>
			{
				OverDisChargeStatus = 1;
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <MinVoltage_handler+0x198>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
				Output_OFF();
 800227e:	f000 fe97 	bl	8002fb0 <Output_OFF>
				Battery.LowBattery = 0;
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <MinVoltage_handler+0x188>)
 8002284:	2200      	movs	r2, #0
 8002286:	721a      	strb	r2, [r3, #8]
				logDebugD("OFF. Min voltage ",i+1,0);
 8002288:	4825      	ldr	r0, [pc, #148]	; (8002320 <MinVoltage_handler+0x19c>)
 800228a:	f002 f82d 	bl	80042e8 <printToBufferWithoutEndUART1>
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3301      	adds	r3, #1
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4822      	ldr	r0, [pc, #136]	; (8002324 <MinVoltage_handler+0x1a0>)
 800229a:	f002 f87d 	bl	8004398 <printToBufferUART1D>
	for(i=0;i<ID_MAX_COUNT;i++)
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	f67f af73 	bls.w	8002198 <MinVoltage_handler+0x14>
			}
	}

	if((OverDisChargeStatus==1)&&(RestoreVoltageonCells==i)&&(OverChargeStatus==0)&&(CurrentShortStatus==0))
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MinVoltage_handler+0x198>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d122      	bne.n	8002302 <MinVoltage_handler+0x17e>
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d11c      	bne.n	8002302 <MinVoltage_handler+0x17e>
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <MinVoltage_handler+0x1a4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d117      	bne.n	8002302 <MinVoltage_handler+0x17e>
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <MinVoltage_handler+0x1a8>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d112      	bne.n	8002302 <MinVoltage_handler+0x17e>
	{
		Output_ON();
 80022dc:	f000 fe54 	bl	8002f88 <Output_ON>
		OverDisChargeStatus=0;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MinVoltage_handler+0x198>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
		Battery.LowBattery = 1;
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <MinVoltage_handler+0x188>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	721a      	strb	r2, [r3, #8]
		logDebugD("ON. B V > min V ",i+1,0);
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <MinVoltage_handler+0x19c>)
 80022ee:	f001 fffb 	bl	80042e8 <printToBufferWithoutEndUART1>
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MinVoltage_handler+0x1ac>)
 80022fe:	f002 f84b 	bl	8004398 <printToBufferUART1D>
	}
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000bc0 	.word	0x20000bc0
 8002310:	51eb851f 	.word	0x51eb851f
 8002314:	20000ae0 	.word	0x20000ae0
 8002318:	20000a0c 	.word	0x20000a0c
 800231c:	200009b1 	.word	0x200009b1
 8002320:	0800599c 	.word	0x0800599c
 8002324:	080059d0 	.word	0x080059d0
 8002328:	200009b0 	.word	0x200009b0
 800232c:	200009b2 	.word	0x200009b2
 8002330:	080059e4 	.word	0x080059e4

08002334 <OffByTimeOutIfNoAction_handler>:
void OffByTimeOutIfNoAction_handler()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	if(PowerOffTimesec>TIMEOUT_OFF)
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <OffByTimeOutIfNoAction_handler+0x18>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002340:	d901      	bls.n	8002346 <OffByTimeOutIfNoAction_handler+0x12>
	{
		OFF_Itself();
 8002342:	f7ff fdb5 	bl	8001eb0 <OFF_Itself>
	}
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000a24 	.word	0x20000a24

08002350 <VoltageLevelByLEDFlash>:

uint8_t flash = 1;
uint32_t FlashVoltage =0 ;
int32_t step;
void VoltageLevelByLEDFlash()
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

   if (Battery.Voltage <= ID_MAX_COUNT*MIN_VOLTAGE) GPIOB->BSRR =  GPIO_BSRR_BR3;//LED OFF always
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <VoltageLevelByLEDFlash+0xb4>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f5b3 6f0c 	cmp.w	r3, #2240	; 0x8c0
 800235e:	d804      	bhi.n	800236a <VoltageLevelByLEDFlash+0x1a>
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <VoltageLevelByLEDFlash+0xb8>)
 8002362:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002366:	611a      	str	r2, [r3, #16]
		}
		FlashVoltage = FlashVoltage+step;
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
   }

}
 8002368:	e047      	b.n	80023fa <VoltageLevelByLEDFlash+0xaa>
    	step =(10*ID_MAX_COUNT*(Voltage95Percent - Voltage10Percent))/100;//~30
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <VoltageLevelByLEDFlash+0xbc>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <VoltageLevelByLEDFlash+0xc0>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	1ad2      	subs	r2, r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <VoltageLevelByLEDFlash+0xc4>)
 8002384:	fb82 1203 	smull	r1, r2, r2, r3
 8002388:	1152      	asrs	r2, r2, #5
 800238a:	17db      	asrs	r3, r3, #31
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <VoltageLevelByLEDFlash+0xc8>)
 8002390:	6013      	str	r3, [r2, #0]
		if (Battery.Voltage*10>FlashVoltage)
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <VoltageLevelByLEDFlash+0xb4>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <VoltageLevelByLEDFlash+0xcc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d903      	bls.n	80023b4 <VoltageLevelByLEDFlash+0x64>
			GPIOB->BSRR =  GPIO_BSRR_BS3;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <VoltageLevelByLEDFlash+0xb8>)
 80023ae:	2208      	movs	r2, #8
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e003      	b.n	80023bc <VoltageLevelByLEDFlash+0x6c>
			GPIOB->BSRR =  GPIO_BSRR_BR3;
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <VoltageLevelByLEDFlash+0xb8>)
 80023b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023ba:	611a      	str	r2, [r3, #16]
		FlashVoltage = FlashVoltage+step;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <VoltageLevelByLEDFlash+0xcc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <VoltageLevelByLEDFlash+0xc8>)
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a15      	ldr	r2, [pc, #84]	; (800241c <VoltageLevelByLEDFlash+0xcc>)
 80023c8:	6013      	str	r3, [r2, #0]
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <VoltageLevelByLEDFlash+0xbc>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	461a      	mov	r2, r3
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <VoltageLevelByLEDFlash+0xcc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d20a      	bcs.n	80023fa <VoltageLevelByLEDFlash+0xaa>
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <VoltageLevelByLEDFlash+0xc0>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <VoltageLevelByLEDFlash+0xcc>)
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000bc0 	.word	0x20000bc0
 8002408:	40010c00 	.word	0x40010c00
 800240c:	20000e50 	.word	0x20000e50
 8002410:	20000dd8 	.word	0x20000dd8
 8002414:	51eb851f 	.word	0x51eb851f
 8002418:	20000e48 	.word	0x20000e48
 800241c:	20000a74 	.word	0x20000a74

08002420 <BUT_Debrief>:


int16_t comp = 0;
void BUT_Debrief(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_10))
 8002426:	491b      	ldr	r1, [pc, #108]	; (8002494 <BUT_Debrief+0x74>)
 8002428:	481b      	ldr	r0, [pc, #108]	; (8002498 <BUT_Debrief+0x78>)
 800242a:	f7ff fd07 	bl	8001e3c <LL_GPIO_IsInputPinSet>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <BUT_Debrief+0x1a>
		key = KEY_OK;
 8002434:	2303      	movs	r3, #3
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	e001      	b.n	800243e <BUT_Debrief+0x1e>
	//else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
	//	key = KEY_BACK;

	else
	{
		key = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	71fb      	strb	r3, [r7, #7]
	}

	if (key)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <BUT_Debrief+0x66>
	{
		if (comp > THRESHOLD2)
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <BUT_Debrief+0x7c>)
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800244e:	4293      	cmp	r3, r2
 8002450:	dd07      	ble.n	8002462 <BUT_Debrief+0x42>
		{
			comp = THRESHOLD2 - 40;
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <BUT_Debrief+0x7c>)
 8002454:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002458:	801a      	strh	r2, [r3, #0]
			pressedKey = key;
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <BUT_Debrief+0x80>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	7013      	strb	r3, [r2, #0]
			return;
 8002460:	e014      	b.n	800248c <BUT_Debrief+0x6c>
		}
		else comp++;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <BUT_Debrief+0x7c>)
 8002464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002468:	b29b      	uxth	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	b21a      	sxth	r2, r3
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <BUT_Debrief+0x7c>)
 8002472:	801a      	strh	r2, [r3, #0]

		if (comp == THRESHOLD)
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <BUT_Debrief+0x7c>)
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	2b14      	cmp	r3, #20
 800247c:	d106      	bne.n	800248c <BUT_Debrief+0x6c>
			{
			pressedKey = key;
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <BUT_Debrief+0x80>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	7013      	strb	r3, [r2, #0]
			return;
 8002484:	e002      	b.n	800248c <BUT_Debrief+0x6c>
		}
	}
	else comp=0;
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <BUT_Debrief+0x7c>)
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
}
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	04040004 	.word	0x04040004
 8002498:	40011000 	.word	0x40011000
 800249c:	20000a78 	.word	0x20000a78
 80024a0:	20000a73 	.word	0x20000a73

080024a4 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
	if (pressedKey) PowerOffTimesec=0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <BUT_GetKey+0x2c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <BUT_GetKey+0x14>
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <BUT_GetKey+0x30>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
	Key_Pressed_t key = pressedKey;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <BUT_GetKey+0x2c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	71fb      	strb	r3, [r7, #7]
	pressedKey = 0;
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <BUT_GetKey+0x2c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	return key;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000a73 	.word	0x20000a73
 80024d4:	20000a24 	.word	0x20000a24

080024d8 <SysTick_Callback>:
}



void SysTick_Callback()//1 mc
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	BUT_Debrief();
 80024dc:	f7ff ffa0 	bl	8002420 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <SysTick_Callback+0x1c8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <SysTick_Callback+0x1c8>)
 80024e8:	6013      	str	r3, [r2, #0]

	if (Count5mSecond >= 5)
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <SysTick_Callback+0x1cc>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d904      	bls.n	80024fe <SysTick_Callback+0x26>
	{
		Count5mSecond = 0;
 80024f4:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <SysTick_Callback+0x1cc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]

		adc_func();
 80024fa:	f000 f8fb 	bl	80026f4 <adc_func>

	}
	if (Count10mSecond >= 10)
 80024fe:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <SysTick_Callback+0x1d0>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b09      	cmp	r3, #9
 8002506:	d904      	bls.n	8002512 <SysTick_Callback+0x3a>
	{

		VoltageLevelByLEDFlash();
 8002508:	f7ff ff22 	bl	8002350 <VoltageLevelByLEDFlash>
		Count10mSecond = 0;
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <SysTick_Callback+0x1d0>)
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]
	}

	if (Count100mSecond >= 100)
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <SysTick_Callback+0x1d4>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b63      	cmp	r3, #99	; 0x63
 800251a:	d90e      	bls.n	800253a <SysTick_Callback+0x62>
	{
		if (Module16( Battery.Current) > 0 ) PowerOffTimesec = 0;
 800251c:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <SysTick_Callback+0x1d8>)
 800251e:	885b      	ldrh	r3, [r3, #2]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fdee 	bl	8001104 <Module16>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	dd02      	ble.n	8002534 <SysTick_Callback+0x5c>
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <SysTick_Callback+0x1dc>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
		Count100mSecond = 0;
 8002534:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <SysTick_Callback+0x1d4>)
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]



	}

	if (Count1000mSecond >= 1000)
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <SysTick_Callback+0x1e0>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002544:	f0c0 808e 	bcc.w	8002664 <SysTick_Callback+0x18c>
	{
		OffByTimeOutIfNoAction_handler();
 8002548:	f7ff fef4 	bl	8002334 <OffByTimeOutIfNoAction_handler>
		PowerOffTimesec++;
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <SysTick_Callback+0x1dc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <SysTick_Callback+0x1dc>)
 8002554:	6013      	str	r3, [r2, #0]


		if (time_sec < 4) AllBalansirON();
 8002556:	4b59      	ldr	r3, [pc, #356]	; (80026bc <SysTick_Callback+0x1e4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d802      	bhi.n	8002564 <SysTick_Callback+0x8c>
 800255e:	f7ff fcd9 	bl	8001f14 <AllBalansirON>
 8002562:	e001      	b.n	8002568 <SysTick_Callback+0x90>
		else 	Balansir_handler();
 8002564:	f7ff fcfe 	bl	8001f64 <Balansir_handler>


		MinVoltage_handler();
 8002568:	f7ff fe0c 	bl	8002184 <MinVoltage_handler>
		Count1000mSecond = 0;
 800256c:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <SysTick_Callback+0x1e0>)
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
		if (Current < 2)
 8002572:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <SysTick_Callback+0x1e8>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b21b      	sxth	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	dc0c      	bgt.n	8002596 <SysTick_Callback+0xbe>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <SysTick_Callback+0x1e8>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fdbe 	bl	8001104 <Module16>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <SysTick_Callback+0x1ec>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4413      	add	r3, r2
 8002592:	4a4c      	ldr	r2, [pc, #304]	; (80026c4 <SysTick_Callback+0x1ec>)
 8002594:	6013      	str	r3, [r2, #0]
		if (Current > 2)
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <SysTick_Callback+0x1e8>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b21b      	sxth	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	dd0c      	ble.n	80025ba <SysTick_Callback+0xe2>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 80025a0:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <SysTick_Callback+0x1e8>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fdac 	bl	8001104 <Module16>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <SysTick_Callback+0x1f0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <SysTick_Callback+0x1f0>)
 80025b8:	6013      	str	r3, [r2, #0]
		if (ChargeStatusForTimer == 1)
 80025ba:	4b44      	ldr	r3, [pc, #272]	; (80026cc <SysTick_Callback+0x1f4>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d104      	bne.n	80025ce <SysTick_Callback+0xf6>
			ChargeTimeSec++;
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <SysTick_Callback+0x1f8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a41      	ldr	r2, [pc, #260]	; (80026d0 <SysTick_Callback+0x1f8>)
 80025cc:	6013      	str	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <SysTick_Callback+0x1fc>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d104      	bne.n	80025e2 <SysTick_Callback+0x10a>
			DischargeTimeSec++;
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <SysTick_Callback+0x200>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	4a3e      	ldr	r2, [pc, #248]	; (80026d8 <SysTick_Callback+0x200>)
 80025e0:	6013      	str	r3, [r2, #0]
		//Global timer
		if (Status_Timer_Sec == 1)
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <SysTick_Callback+0x204>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d104      	bne.n	80025f6 <SysTick_Callback+0x11e>
			Timer_Sec++;
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <SysTick_Callback+0x208>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <SysTick_Callback+0x208>)
 80025f4:	6013      	str	r3, [r2, #0]
		time_sec++;
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <SysTick_Callback+0x1e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <SysTick_Callback+0x1e4>)
 80025fe:	6013      	str	r3, [r2, #0]


		//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS4;// Battery level
		//else GPIOB->BSRR =  GPIO_BSRR_BR4;

		if (Battery.LowBattery == 0)
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <SysTick_Callback+0x1d8>)
 8002602:	7a1b      	ldrb	r3, [r3, #8]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <SysTick_Callback+0x13a>
		{
			//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS6;//Fault
			//else GPIOB->BSRR =  GPIO_BSRR_BR6;

			GPIOD->BSRR =  GPIO_BSRR_BS2;//Fault
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <SysTick_Callback+0x20c>)
 800260c:	2204      	movs	r2, #4
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	e003      	b.n	800261a <SysTick_Callback+0x142>
		}
		else
		{
			GPIOD->BSRR =  GPIO_BSRR_BR2;
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <SysTick_Callback+0x20c>)
 8002614:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002618:	611a      	str	r2, [r3, #16]
		//else GPIOB->BSRR =  GPIO_BSRR_BR8;




		if (time_sec%10==0) Output_ON();
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <SysTick_Callback+0x1e4>)
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <SysTick_Callback+0x210>)
 8002620:	fba3 2301 	umull	r2, r3, r3, r1
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	1aca      	subs	r2, r1, r3
 8002630:	2a00      	cmp	r2, #0
 8002632:	d101      	bne.n	8002638 <SysTick_Callback+0x160>
 8002634:	f000 fca8 	bl	8002f88 <Output_ON>
		//if (time_sec%15==0) Output_OFF();

		if (Battery.Current>2)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <SysTick_Callback+0x1d8>)
 800263a:	885b      	ldrh	r3, [r3, #2]
 800263c:	b21b      	sxth	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	dd08      	ble.n	8002654 <SysTick_Callback+0x17c>
		{
			Voltage95Percent = VOLTAGE_CHARGE_100_PERCENT;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <SysTick_Callback+0x214>)
 8002644:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002648:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_CHARGE_10_PERCENT;
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <SysTick_Callback+0x218>)
 800264c:	f240 1245 	movw	r2, #325	; 0x145
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e007      	b.n	8002664 <SysTick_Callback+0x18c>
		}
		else
		{
			Voltage95Percent = VOLTAGE_95_PERCENT;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <SysTick_Callback+0x214>)
 8002656:	f240 124f 	movw	r2, #335	; 0x14f
 800265a:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_10_PERCENT;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <SysTick_Callback+0x218>)
 800265e:	f240 121d 	movw	r2, #285	; 0x11d
 8002662:	801a      	strh	r2, [r3, #0]
		}
	}
	Count5mSecond++;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <SysTick_Callback+0x1cc>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <SysTick_Callback+0x1cc>)
 8002670:	801a      	strh	r2, [r3, #0]
	Count10mSecond++;
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <SysTick_Callback+0x1d0>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <SysTick_Callback+0x1d0>)
 800267e:	801a      	strh	r2, [r3, #0]
	Count100mSecond++;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <SysTick_Callback+0x1d4>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <SysTick_Callback+0x1d4>)
 800268c:	801a      	strh	r2, [r3, #0]
	Count1000mSecond++;
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <SysTick_Callback+0x1e0>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <SysTick_Callback+0x1e0>)
 800269a:	801a      	strh	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000a14 	.word	0x20000a14
 80026a4:	200000f0 	.word	0x200000f0
 80026a8:	200000ee 	.word	0x200000ee
 80026ac:	200000ec 	.word	0x200000ec
 80026b0:	20000bc0 	.word	0x20000bc0
 80026b4:	20000a24 	.word	0x20000a24
 80026b8:	200000f2 	.word	0x200000f2
 80026bc:	20000a0c 	.word	0x20000a0c
 80026c0:	20000adc 	.word	0x20000adc
 80026c4:	20000a28 	.word	0x20000a28
 80026c8:	20000a30 	.word	0x20000a30
 80026cc:	20000a71 	.word	0x20000a71
 80026d0:	20000a1c 	.word	0x20000a1c
 80026d4:	20000a72 	.word	0x20000a72
 80026d8:	20000a20 	.word	0x20000a20
 80026dc:	20000a18 	.word	0x20000a18
 80026e0:	20000a10 	.word	0x20000a10
 80026e4:	40011400 	.word	0x40011400
 80026e8:	cccccccd 	.word	0xcccccccd
 80026ec:	20000e50 	.word	0x20000e50
 80026f0:	20000dd8 	.word	0x20000dd8

080026f4 <adc_func>:


void adc_func()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
	//6  [6] I
	//5  [5] I
//	Vref [15]


	volatile int32_t Ut = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
	volatile int32_t It = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
	volatile int32_t Ut_m = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
	volatile int32_t It_m = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[15];// Uref V/10;  1200 * 4096/ChVref
 800270a:	4b93      	ldr	r3, [pc, #588]	; (8002958 <adc_func+0x264>)
 800270c:	8bdb      	ldrh	r3, [r3, #30]
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 8002716:	fb93 f3f2 	sdiv	r3, r3, r2
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b8f      	ldr	r3, [pc, #572]	; (800295c <adc_func+0x268>)
 800271e:	801a      	strh	r2, [r3, #0]

	It = (RegularConvData[6] * CalibrationData.CalibrationValueForCurrent1) / RegularConvData[15] ;//  Current
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <adc_func+0x264>)
 8002722:	899b      	ldrh	r3, [r3, #12]
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	4b8d      	ldr	r3, [pc, #564]	; (8002960 <adc_func+0x26c>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	4a89      	ldr	r2, [pc, #548]	; (8002958 <adc_func+0x264>)
 8002732:	8bd2      	ldrh	r2, [r2, #30]
 8002734:	b292      	uxth	r2, r2
 8002736:	fbb3 f3f2 	udiv	r3, r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
	It_m = It;//middle_of_3Imax1(It);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	607b      	str	r3, [r7, #4]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd18 	bl	8001178 <RunningAverageI1>
 8002748:	4602      	mov	r2, r0
 800274a:	4b86      	ldr	r3, [pc, #536]	; (8002964 <adc_func+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a84      	ldr	r2, [pc, #528]	; (8002964 <adc_func+0x270>)
 8002752:	6013      	str	r3, [r2, #0]
	SumI1Counter ++;
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <adc_func+0x274>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b21b      	sxth	r3, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	b29b      	uxth	r3, r3
 8002760:	b21a      	sxth	r2, r3
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <adc_func+0x274>)
 8002764:	801a      	strh	r2, [r3, #0]
	if (SumI1Counter >= NUM_READ)
 8002766:	4b80      	ldr	r3, [pc, #512]	; (8002968 <adc_func+0x274>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b21b      	sxth	r3, r3
 800276c:	2b1f      	cmp	r3, #31
 800276e:	dd0e      	ble.n	800278e <adc_func+0x9a>
	{
		Battery.Current_Load = SumI1/NUM_READ;
 8002770:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <adc_func+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da00      	bge.n	800277a <adc_func+0x86>
 8002778:	331f      	adds	r3, #31
 800277a:	115b      	asrs	r3, r3, #5
 800277c:	b29a      	uxth	r2, r3
 800277e:	4b7b      	ldr	r3, [pc, #492]	; (800296c <adc_func+0x278>)
 8002780:	80da      	strh	r2, [r3, #6]
		SumI1Counter = 0;
 8002782:	4b79      	ldr	r3, [pc, #484]	; (8002968 <adc_func+0x274>)
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
		SumI1 = 0;
 8002788:	4b76      	ldr	r3, [pc, #472]	; (8002964 <adc_func+0x270>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
	}

	It= (RegularConvData[5] * CalibrationData.CalibrationValueForCurrent2) / RegularConvData[15] ;//  Current
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <adc_func+0x264>)
 8002790:	895b      	ldrh	r3, [r3, #10]
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4b72      	ldr	r3, [pc, #456]	; (8002960 <adc_func+0x26c>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <adc_func+0x264>)
 80027a0:	8bd2      	ldrh	r2, [r2, #30]
 80027a2:	b292      	uxth	r2, r2
 80027a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
	It_m =It;// middle_of_3Imax2(It);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	607b      	str	r3, [r7, #4]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fd0b 	bl	80011cc <RunningAverageI2>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <adc_func+0x27c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <adc_func+0x27c>)
 80027c0:	6013      	str	r3, [r2, #0]
	SumI2Counter ++;
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <adc_func+0x280>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <adc_func+0x280>)
 80027d2:	801a      	strh	r2, [r3, #0]
	if (SumI2Counter >= NUM_READ)
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <adc_func+0x280>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	2b1f      	cmp	r3, #31
 80027dc:	dd0e      	ble.n	80027fc <adc_func+0x108>
	{
		Battery.Current_Charge = SumI2/NUM_READ;
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <adc_func+0x27c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da00      	bge.n	80027e8 <adc_func+0xf4>
 80027e6:	331f      	adds	r3, #31
 80027e8:	115b      	asrs	r3, r3, #5
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b5f      	ldr	r3, [pc, #380]	; (800296c <adc_func+0x278>)
 80027ee:	809a      	strh	r2, [r3, #4]
		SumI2Counter = 0;
 80027f0:	4b60      	ldr	r3, [pc, #384]	; (8002974 <adc_func+0x280>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
		SumI2 = 0;
 80027f6:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <adc_func+0x27c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
	}

	Ut= (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[15];
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <adc_func+0x264>)
 80027fe:	891b      	ldrh	r3, [r3, #8]
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <adc_func+0x26c>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <adc_func+0x264>)
 800280e:	8bd2      	ldrh	r2, [r2, #30]
 8002810:	b292      	uxth	r2, r2
 8002812:	fbb3 f3f2 	udiv	r3, r3, r2
 8002816:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax1(Ut);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	60bb      	str	r3, [r7, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fcfe 	bl	8001220 <RunningAverageU1>
 8002824:	4602      	mov	r2, r0
 8002826:	4b54      	ldr	r3, [pc, #336]	; (8002978 <adc_func+0x284>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <adc_func+0x284>)
 800282e:	6013      	str	r3, [r2, #0]
	SumU1Counter ++;
 8002830:	4b52      	ldr	r3, [pc, #328]	; (800297c <adc_func+0x288>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b21b      	sxth	r3, r3
 8002836:	b29b      	uxth	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <adc_func+0x288>)
 8002840:	801a      	strh	r2, [r3, #0]
	if (SumU1Counter >= NUM_READ)
 8002842:	4b4e      	ldr	r3, [pc, #312]	; (800297c <adc_func+0x288>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b21b      	sxth	r3, r3
 8002848:	2b1f      	cmp	r3, #31
 800284a:	dd0e      	ble.n	800286a <adc_func+0x176>
	{
		CellsDatabase[0].Voltage = SumU1/NUM_READ;
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <adc_func+0x284>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da00      	bge.n	8002856 <adc_func+0x162>
 8002854:	331f      	adds	r3, #31
 8002856:	115b      	asrs	r3, r3, #5
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <adc_func+0x28c>)
 800285c:	801a      	strh	r2, [r3, #0]
		SumU1Counter = 0;
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <adc_func+0x288>)
 8002860:	2200      	movs	r2, #0
 8002862:	801a      	strh	r2, [r3, #0]
		SumU1 = 0;
 8002864:	4b44      	ldr	r3, [pc, #272]	; (8002978 <adc_func+0x284>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[15];
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <adc_func+0x264>)
 800286c:	88db      	ldrh	r3, [r3, #6]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <adc_func+0x26c>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a37      	ldr	r2, [pc, #220]	; (8002958 <adc_func+0x264>)
 800287c:	8bd2      	ldrh	r2, [r2, #30]
 800287e:	b292      	uxth	r2, r2
 8002880:	fbb3 f3f2 	udiv	r3, r3, r2
 8002884:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax2(Ut);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	60bb      	str	r3, [r7, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fcf1 	bl	8001274 <RunningAverageU2>
 8002892:	4602      	mov	r2, r0
 8002894:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <adc_func+0x290>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	4a3a      	ldr	r2, [pc, #232]	; (8002984 <adc_func+0x290>)
 800289c:	6013      	str	r3, [r2, #0]
	SumU2Counter ++;
 800289e:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <adc_func+0x294>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <adc_func+0x294>)
 80028ae:	801a      	strh	r2, [r3, #0]
	if (SumU2Counter >= NUM_READ)
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <adc_func+0x294>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	2b1f      	cmp	r3, #31
 80028b8:	dd0e      	ble.n	80028d8 <adc_func+0x1e4>
	{
		CellsDatabase[1].Voltage = SumU2/NUM_READ;
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <adc_func+0x290>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da00      	bge.n	80028c4 <adc_func+0x1d0>
 80028c2:	331f      	adds	r3, #31
 80028c4:	115b      	asrs	r3, r3, #5
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <adc_func+0x28c>)
 80028ca:	839a      	strh	r2, [r3, #28]
		SumU2Counter = 0;
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <adc_func+0x294>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]
		SumU2 = 0;
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <adc_func+0x290>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
	}


	Ut = (RegularConvData[1] * CalibrationData.CalibrationValueForVoltage3) / RegularConvData[15];//
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <adc_func+0x264>)
 80028da:	885b      	ldrh	r3, [r3, #2]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <adc_func+0x26c>)
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <adc_func+0x264>)
 80028ea:	8bd2      	ldrh	r2, [r2, #30]
 80028ec:	b292      	uxth	r2, r2
 80028ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax3(Ut);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	60bb      	str	r3, [r7, #8]
	SumU3 =SumU3 + RunningAverageU3(Ut_m);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fce4 	bl	80012c8 <RunningAverageU3>
 8002900:	4602      	mov	r2, r0
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <adc_func+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <adc_func+0x298>)
 800290a:	6013      	str	r3, [r2, #0]
	SumU3Counter ++;
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <adc_func+0x29c>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b21b      	sxth	r3, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	b21a      	sxth	r2, r3
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <adc_func+0x29c>)
 800291c:	801a      	strh	r2, [r3, #0]
	if (SumU3Counter >=NUM_READ)
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <adc_func+0x29c>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b21b      	sxth	r3, r3
 8002924:	2b1f      	cmp	r3, #31
 8002926:	dd0e      	ble.n	8002946 <adc_func+0x252>
	{
		CellsDatabase[2].Voltage = SumU3/NUM_READ;
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <adc_func+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da00      	bge.n	8002932 <adc_func+0x23e>
 8002930:	331f      	adds	r3, #31
 8002932:	115b      	asrs	r3, r3, #5
 8002934:	b29a      	uxth	r2, r3
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <adc_func+0x28c>)
 8002938:	871a      	strh	r2, [r3, #56]	; 0x38
		SumU3Counter = 0;
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <adc_func+0x29c>)
 800293c:	2200      	movs	r2, #0
 800293e:	801a      	strh	r2, [r3, #0]
		SumU3 = 0;
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <adc_func+0x298>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[0] * CalibrationData.CalibrationValueForVoltage4) / RegularConvData[15];
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <adc_func+0x264>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <adc_func+0x26c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	e01d      	b.n	8002994 <adc_func+0x2a0>
 8002958:	20000bcc 	.word	0x20000bcc
 800295c:	20000bec 	.word	0x20000bec
 8002960:	20000004 	.word	0x20000004
 8002964:	20000a34 	.word	0x20000a34
 8002968:	20000a5c 	.word	0x20000a5c
 800296c:	20000bc0 	.word	0x20000bc0
 8002970:	20000a38 	.word	0x20000a38
 8002974:	20000a5e 	.word	0x20000a5e
 8002978:	20000a3c 	.word	0x20000a3c
 800297c:	20000a60 	.word	0x20000a60
 8002980:	20000ae0 	.word	0x20000ae0
 8002984:	20000a40 	.word	0x20000a40
 8002988:	20000a62 	.word	0x20000a62
 800298c:	20000a44 	.word	0x20000a44
 8002990:	20000a64 	.word	0x20000a64
 8002994:	4a8b      	ldr	r2, [pc, #556]	; (8002bc4 <adc_func+0x4d0>)
 8002996:	8bd2      	ldrh	r2, [r2, #30]
 8002998:	b292      	uxth	r2, r2
 800299a:	fbb3 f3f2 	udiv	r3, r3, r2
 800299e:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	60bb      	str	r3, [r7, #8]
	SumU4 =SumU4 + RunningAverageU4(Ut_m);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fcb8 	bl	800131c <RunningAverageU4>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b86      	ldr	r3, [pc, #536]	; (8002bc8 <adc_func+0x4d4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a84      	ldr	r2, [pc, #528]	; (8002bc8 <adc_func+0x4d4>)
 80029b6:	6013      	str	r3, [r2, #0]
	SumU4Counter ++;
 80029b8:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <adc_func+0x4d8>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b21b      	sxth	r3, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <adc_func+0x4d8>)
 80029c8:	801a      	strh	r2, [r3, #0]
	if (SumU4Counter >=NUM_READ)
 80029ca:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <adc_func+0x4d8>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	2b1f      	cmp	r3, #31
 80029d2:	dd0f      	ble.n	80029f4 <adc_func+0x300>
	{
		CellsDatabase[3].Voltage = SumU4/NUM_READ;
 80029d4:	4b7c      	ldr	r3, [pc, #496]	; (8002bc8 <adc_func+0x4d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da00      	bge.n	80029de <adc_func+0x2ea>
 80029dc:	331f      	adds	r3, #31
 80029de:	115b      	asrs	r3, r3, #5
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <adc_func+0x4dc>)
 80029e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		SumU4Counter = 0;
 80029e8:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <adc_func+0x4d8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
		SumU4 = 0;
 80029ee:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <adc_func+0x4d4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[12] * CalibrationData.CalibrationValueForVoltage5) / RegularConvData[15];
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <adc_func+0x4d0>)
 80029f6:	8b1b      	ldrh	r3, [r3, #24]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <adc_func+0x4e0>)
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <adc_func+0x4d0>)
 8002a06:	8bd2      	ldrh	r2, [r2, #30]
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	60bb      	str	r3, [r7, #8]
	SumU5 =SumU5 + RunningAverageU5(Ut_m);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fcaa 	bl	8001370 <RunningAverageU5>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <adc_func+0x4e4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <adc_func+0x4e4>)
 8002a26:	6013      	str	r3, [r2, #0]
	SumU5Counter ++;
 8002a28:	4b6c      	ldr	r3, [pc, #432]	; (8002bdc <adc_func+0x4e8>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <adc_func+0x4e8>)
 8002a38:	801a      	strh	r2, [r3, #0]
	if (SumU5Counter >=NUM_READ)
 8002a3a:	4b68      	ldr	r3, [pc, #416]	; (8002bdc <adc_func+0x4e8>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	2b1f      	cmp	r3, #31
 8002a42:	dd0f      	ble.n	8002a64 <adc_func+0x370>
	{
		CellsDatabase[4].Voltage = SumU5/NUM_READ;
 8002a44:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <adc_func+0x4e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da00      	bge.n	8002a4e <adc_func+0x35a>
 8002a4c:	331f      	adds	r3, #31
 8002a4e:	115b      	asrs	r3, r3, #5
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <adc_func+0x4dc>)
 8002a54:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		SumU5Counter = 0;
 8002a58:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <adc_func+0x4e8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
		SumU5 = 0;
 8002a5e:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <adc_func+0x4e4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[11] * CalibrationData.CalibrationValueForVoltage6) / RegularConvData[15];//
 8002a64:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <adc_func+0x4d0>)
 8002a66:	8adb      	ldrh	r3, [r3, #22]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <adc_func+0x4e0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	4a53      	ldr	r2, [pc, #332]	; (8002bc4 <adc_func+0x4d0>)
 8002a76:	8bd2      	ldrh	r2, [r2, #30]
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60bb      	str	r3, [r7, #8]
	SumU6 =SumU6 + RunningAverageU6(Ut_m);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fc9c 	bl	80013c4 <RunningAverageU6>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <adc_func+0x4ec>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <adc_func+0x4ec>)
 8002a96:	6013      	str	r3, [r2, #0]
	SumU6Counter ++;
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <adc_func+0x4f0>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <adc_func+0x4f0>)
 8002aa8:	801a      	strh	r2, [r3, #0]
	if (SumU6Counter >=NUM_READ)
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <adc_func+0x4f0>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	2b1f      	cmp	r3, #31
 8002ab2:	dd0f      	ble.n	8002ad4 <adc_func+0x3e0>
	{
		CellsDatabase[5].Voltage = SumU6/NUM_READ;
 8002ab4:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <adc_func+0x4ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da00      	bge.n	8002abe <adc_func+0x3ca>
 8002abc:	331f      	adds	r3, #31
 8002abe:	115b      	asrs	r3, r3, #5
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <adc_func+0x4dc>)
 8002ac4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		SumU6Counter = 0;
 8002ac8:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <adc_func+0x4f0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
		SumU6 = 0;
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <adc_func+0x4ec>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[10] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <adc_func+0x4d0>)
 8002ad6:	8a9b      	ldrh	r3, [r3, #20]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <adc_func+0x4e0>)
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <adc_func+0x4d0>)
 8002ae6:	8bd2      	ldrh	r2, [r2, #30]
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	60bb      	str	r3, [r7, #8]
	SumU7 =SumU7 + RunningAverageU7(Ut_m);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fc8e 	bl	8001418 <RunningAverageU7>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <adc_func+0x4f4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <adc_func+0x4f4>)
 8002b06:	6013      	str	r3, [r2, #0]
	SumU7Counter ++;
 8002b08:	4b38      	ldr	r3, [pc, #224]	; (8002bec <adc_func+0x4f8>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	4b35      	ldr	r3, [pc, #212]	; (8002bec <adc_func+0x4f8>)
 8002b18:	801a      	strh	r2, [r3, #0]
	if (SumU7Counter >=NUM_READ)
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <adc_func+0x4f8>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	2b1f      	cmp	r3, #31
 8002b22:	dd0f      	ble.n	8002b44 <adc_func+0x450>
	{
		CellsDatabase[6].Voltage = SumU7/NUM_READ;
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <adc_func+0x4f4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da00      	bge.n	8002b2e <adc_func+0x43a>
 8002b2c:	331f      	adds	r3, #31
 8002b2e:	115b      	asrs	r3, r3, #5
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <adc_func+0x4dc>)
 8002b34:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		SumU7Counter = 0;
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <adc_func+0x4f8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	801a      	strh	r2, [r3, #0]
		SumU7 = 0;
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <adc_func+0x4f4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[9] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <adc_func+0x4d0>)
 8002b46:	8a5b      	ldrh	r3, [r3, #18]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <adc_func+0x4e0>)
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <adc_func+0x4d0>)
 8002b56:	8bd2      	ldrh	r2, [r2, #30]
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	60bb      	str	r3, [r7, #8]
	SumU8 =SumU8 + RunningAverageU8(Ut_m);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fc80 	bl	800146c <RunningAverageU8>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <adc_func+0x4fc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <adc_func+0x4fc>)
 8002b76:	6013      	str	r3, [r2, #0]
	SumU8Counter ++;
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <adc_func+0x500>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <adc_func+0x500>)
 8002b88:	801a      	strh	r2, [r3, #0]
	if (SumU8Counter >=NUM_READ)
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <adc_func+0x500>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	2b1f      	cmp	r3, #31
 8002b92:	dd0f      	ble.n	8002bb4 <adc_func+0x4c0>
	{
		CellsDatabase[7].Voltage = SumU8/NUM_READ;
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <adc_func+0x4fc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da00      	bge.n	8002b9e <adc_func+0x4aa>
 8002b9c:	331f      	adds	r3, #31
 8002b9e:	115b      	asrs	r3, r3, #5
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <adc_func+0x4dc>)
 8002ba4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		SumU8Counter = 0;
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <adc_func+0x500>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	801a      	strh	r2, [r3, #0]
		SumU8 = 0;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <adc_func+0x4fc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
	}



	uint8_t i = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	75fb      	strb	r3, [r7, #23]
	uint16_t Volt = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	75fb      	strb	r3, [r7, #23]
 8002bc0:	e028      	b.n	8002c14 <adc_func+0x520>
 8002bc2:	bf00      	nop
 8002bc4:	20000bcc 	.word	0x20000bcc
 8002bc8:	20000a48 	.word	0x20000a48
 8002bcc:	20000a66 	.word	0x20000a66
 8002bd0:	20000ae0 	.word	0x20000ae0
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	20000a4c 	.word	0x20000a4c
 8002bdc:	20000a68 	.word	0x20000a68
 8002be0:	20000a50 	.word	0x20000a50
 8002be4:	20000a6a 	.word	0x20000a6a
 8002be8:	20000a54 	.word	0x20000a54
 8002bec:	20000a6c 	.word	0x20000a6c
 8002bf0:	20000a58 	.word	0x20000a58
 8002bf4:	20000a6e 	.word	0x20000a6e
	{
		Volt = Volt + CellsDatabase[i].Voltage;
 8002bf8:	7dfa      	ldrb	r2, [r7, #23]
 8002bfa:	4919      	ldr	r1, [pc, #100]	; (8002c60 <adc_func+0x56c>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	8abb      	ldrh	r3, [r7, #20]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	3301      	adds	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d9ee      	bls.n	8002bf8 <adc_func+0x504>
	}
	Battery.Voltage = Volt;
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <adc_func+0x570>)
 8002c1c:	8abb      	ldrh	r3, [r7, #20]
 8002c1e:	8013      	strh	r3, [r2, #0]
	Battery.Current = 0;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <adc_func+0x570>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Charge > 2) Battery.Current = Battery.Current_Charge;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <adc_func+0x570>)
 8002c28:	889b      	ldrh	r3, [r3, #4]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d905      	bls.n	8002c3c <adc_func+0x548>
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <adc_func+0x570>)
 8002c32:	889b      	ldrh	r3, [r3, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <adc_func+0x570>)
 8002c3a:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Load > 2) Battery.Current = Battery.Current_Load * (-1);
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <adc_func+0x570>)
 8002c3e:	88db      	ldrh	r3, [r3, #6]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d907      	bls.n	8002c56 <adc_func+0x562>
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <adc_func+0x570>)
 8002c48:	88db      	ldrh	r3, [r3, #6]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	425b      	negs	r3, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <adc_func+0x570>)
 8002c54:	805a      	strh	r2, [r3, #2]
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000ae0 	.word	0x20000ae0
 8002c64:	20000bc0 	.word	0x20000bc0

08002c68 <MainScreenAnswer>:
};
struct RequestFromClientToSrv_struct RequestFromClientToSrv;
struct AnswerFromSrvToClient_struct  AnswerFromSrvToClient;

void MainScreenAnswer()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
	uint16_t var_16=0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	80fb      	strh	r3, [r7, #6]
	uint8_t *arrayPointer_16 = (uint8_t*) &var_16;
 8002c72:	1dbb      	adds	r3, r7, #6
 8002c74:	60fb      	str	r3, [r7, #12]

	uint16_t var_u16=0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	80bb      	strh	r3, [r7, #4]
	uint8_t *arrayPointer_u16 = (uint8_t*) &var_u16;
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	60bb      	str	r3, [r7, #8]
	arrayPointer_u16 = (uint8_t*) &Battery.Voltage;
 8002c7e:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <MainScreenAnswer+0x154>)
 8002c80:	60bb      	str	r3, [r7, #8]
	Master.Package[4]=arrayPointer_u16[0];
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002c88:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=arrayPointer_u16[1];
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785a      	ldrb	r2, [r3, #1]
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002c90:	715a      	strb	r2, [r3, #5]

	arrayPointer_16 = (uint8_t*) &Battery.Current;
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <MainScreenAnswer+0x15c>)
 8002c94:	60fb      	str	r3, [r7, #12]
	Master.Package[6]=arrayPointer_16[0];
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002c9c:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=arrayPointer_16[1];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	785a      	ldrb	r2, [r3, #1]
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002ca4:	71da      	strb	r2, [r3, #7]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[0].Voltage;
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <MainScreenAnswer+0x160>)
 8002ca8:	60bb      	str	r3, [r7, #8]
	Master.Package[8]=arrayPointer_u16[0];
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cb0:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=arrayPointer_u16[1];
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	785a      	ldrb	r2, [r3, #1]
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cb8:	725a      	strb	r2, [r3, #9]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[1].Voltage;
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <MainScreenAnswer+0x164>)
 8002cbc:	60bb      	str	r3, [r7, #8]
	Master.Package[10]=arrayPointer_u16[0];
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cc4:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=arrayPointer_u16[1];
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785a      	ldrb	r2, [r3, #1]
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002ccc:	72da      	strb	r2, [r3, #11]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[2].Voltage;
 8002cce:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <MainScreenAnswer+0x168>)
 8002cd0:	60bb      	str	r3, [r7, #8]
	Master.Package[12]=arrayPointer_u16[0];
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cd8:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=arrayPointer_u16[1];
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	785a      	ldrb	r2, [r3, #1]
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002ce0:	735a      	strb	r2, [r3, #13]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[3].Voltage;
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <MainScreenAnswer+0x16c>)
 8002ce4:	60bb      	str	r3, [r7, #8]
	Master.Package[14]=arrayPointer_u16[0];
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cec:	739a      	strb	r2, [r3, #14]
	Master.Package[15]=arrayPointer_u16[1];
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	785a      	ldrb	r2, [r3, #1]
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002cf4:	73da      	strb	r2, [r3, #15]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
	}

	if (NUMBER_OF_CELLS == 8)
	{
		arrayPointer_u16 = (uint8_t*) &CellsDatabase[4].Voltage;
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <MainScreenAnswer+0x170>)
 8002cf8:	60bb      	str	r3, [r7, #8]
		Master.Package[16]=arrayPointer_u16[0];
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d00:	741a      	strb	r2, [r3, #16]
		Master.Package[17]=arrayPointer_u16[1];
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785a      	ldrb	r2, [r3, #1]
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d08:	745a      	strb	r2, [r3, #17]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[5].Voltage;
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <MainScreenAnswer+0x174>)
 8002d0c:	60bb      	str	r3, [r7, #8]
		Master.Package[18]=arrayPointer_u16[0];
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d14:	749a      	strb	r2, [r3, #18]
		Master.Package[19]=arrayPointer_u16[1];
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	785a      	ldrb	r2, [r3, #1]
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d1c:	74da      	strb	r2, [r3, #19]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[6].Voltage;
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <MainScreenAnswer+0x178>)
 8002d20:	60bb      	str	r3, [r7, #8]
		Master.Package[20]=arrayPointer_u16[0];
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d28:	751a      	strb	r2, [r3, #20]
		Master.Package[21]=arrayPointer_u16[1];
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	785a      	ldrb	r2, [r3, #1]
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d30:	755a      	strb	r2, [r3, #21]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[7].Voltage;
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <MainScreenAnswer+0x17c>)
 8002d34:	60bb      	str	r3, [r7, #8]
		Master.Package[22]=arrayPointer_u16[0];
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d3c:	759a      	strb	r2, [r3, #22]
		Master.Package[23]=arrayPointer_u16[1];
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	785a      	ldrb	r2, [r3, #1]
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d44:	75da      	strb	r2, [r3, #23]

		Master.Package[24]=95;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d48:	225f      	movs	r2, #95	; 0x5f
 8002d4a:	761a      	strb	r2, [r3, #24]
		Master.Package[25]=On_off;
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <MainScreenAnswer+0x180>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d54:	765a      	strb	r2, [r3, #25]
		Master.Data_length = 27-1;
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d58:	221a      	movs	r2, #26
 8002d5a:	779a      	strb	r2, [r3, #30]

		Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d5e:	7f9b      	ldrb	r3, [r3, #30]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2200      	movs	r2, #0
 8002d64:	4619      	mov	r1, r3
 8002d66:	4816      	ldr	r0, [pc, #88]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d68:	f7fe f818 	bl	8000d9c <calcCRC>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d72:	77da      	strb	r2, [r3, #31]
		Master.Package[26] = Master.DataCRC;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d76:	7fdb      	ldrb	r3, [r3, #31]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d7c:	769a      	strb	r2, [r3, #26]
		Master.Package[27] = 0x0A;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d80:	220a      	movs	r2, #10
 8002d82:	76da      	strb	r2, [r3, #27]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d86:	7f9b      	ldrb	r3, [r3, #30]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d92:	f001 f99f 	bl	80040d4 <putDataInBufferUart2>

	}


	Master.Package[0] = PACKAGE_BEGIN;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d98:	22fe      	movs	r2, #254	; 0xfe
 8002d9a:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002d9e:	7f9b      	ldrb	r3, [r3, #30]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002da4:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002da8:	22fa      	movs	r2, #250	; 0xfa
 8002daa:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = MAIN_SCREEN;
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <MainScreenAnswer+0x158>)
 8002dae:	2214      	movs	r2, #20
 8002db0:	70da      	strb	r2, [r3, #3]

}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000bc0 	.word	0x20000bc0
 8002dc0:	20000db0 	.word	0x20000db0
 8002dc4:	20000bc2 	.word	0x20000bc2
 8002dc8:	20000ae0 	.word	0x20000ae0
 8002dcc:	20000afc 	.word	0x20000afc
 8002dd0:	20000b18 	.word	0x20000b18
 8002dd4:	20000b34 	.word	0x20000b34
 8002dd8:	20000b50 	.word	0x20000b50
 8002ddc:	20000b6c 	.word	0x20000b6c
 8002de0:	20000b88 	.word	0x20000b88
 8002de4:	20000ba4 	.word	0x20000ba4
 8002de8:	20000a70 	.word	0x20000a70

08002dec <SystemInfoAnswer>:

void SystemInfoAnswer()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	Master.Package[4]=1;//version before point
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=0;//version after point
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	715a      	strb	r2, [r3, #5]
	Master.Package[6]=1;// 1- LIFEPO4, 2 - LIon
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=NUMBER_OF_CELLS;//Number of cells
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e04:	2208      	movs	r2, #8
 8002e06:	71da      	strb	r2, [r3, #7]
	Master.Package[8]=0;
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=0;
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	725a      	strb	r2, [r3, #9]
	Master.Package[10]=0;
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=0;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	72da      	strb	r2, [r3, #11]
	Master.Package[12]=0;
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=0;
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	735a      	strb	r2, [r3, #13]

	Master.Data_length = 15-1;
 8002e2c:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e2e:	220e      	movs	r2, #14
 8002e30:	779a      	strb	r2, [r3, #30]

	Master.Package[0] = PACKAGE_BEGIN;
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e34:	22fe      	movs	r2, #254	; 0xfe
 8002e36:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e3a:	7f9b      	ldrb	r3, [r3, #30]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e40:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e44:	22fa      	movs	r2, #250	; 0xfa
 8002e46:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = SYSTEM_INFO;
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	70da      	strb	r2, [r3, #3]
	Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e50:	7f9b      	ldrb	r3, [r3, #30]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	4619      	mov	r1, r3
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e5a:	f7fd ff9f 	bl	8000d9c <calcCRC>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e64:	77da      	strb	r2, [r3, #31]
	Master.Package[14] = Master.DataCRC;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e68:	7fdb      	ldrb	r3, [r3, #31]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e6e:	739a      	strb	r2, [r3, #14]
	Master.Package[15] = 0x0A;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e72:	220a      	movs	r2, #10
 8002e74:	73da      	strb	r2, [r3, #15]
	putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e78:	7f9b      	ldrb	r3, [r3, #30]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <SystemInfoAnswer+0xa0>)
 8002e84:	f001 f926 	bl	80040d4 <putDataInBufferUart2>
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000db0 	.word	0x20000db0

08002e90 <TIM7_Callback>:

void TIM7_Callback()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

	//logDebugD("l=",bufferUart1.rx_counter,0);
	//logDebugD("Le=",ParsingData.IsPassedPackageLengthFlag,0);
	//logDebugD("PB=",ParsingData.IsPassedPackageBeginFlag,0);
	//logDebugD("RE=",ParsingData.IsDataReadyReadFromBuffer,0)
	if (ParsingData.IsDataReadyReadFromBuffer == 1)
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <TIM7_Callback+0xe8>)
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d166      	bne.n	8002f6e <TIM7_Callback+0xde>
	{
		if ( (getCharFromBufferUART2() == PACKAGE_BEGIN) )
 8002ea0:	f001 f952 	bl	8004148 <getCharFromBufferUART2>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ea8:	d161      	bne.n	8002f6e <TIM7_Callback+0xde>
		{
			ParsingData.IsDataReadyReadFromBuffer = 0;
 8002eaa:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <TIM7_Callback+0xe8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	709a      	strb	r2, [r3, #2]
			//logDebug("PACKAGE_BEGIN");
			//logDebugD("l=",bufferUart1.rx_counter,0);

			Slave.Data_length = getCharFromBufferUART2();
 8002eb0:	f001 f94a 	bl	8004148 <getCharFromBufferUART2>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <TIM7_Callback+0xec>)
 8002eba:	779a      	strb	r2, [r3, #30]
			Slave.Package[0] = PACKAGE_BEGIN;
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <TIM7_Callback+0xec>)
 8002ebe:	22fe      	movs	r2, #254	; 0xfe
 8002ec0:	701a      	strb	r2, [r3, #0]
			Slave.Package[1] = Slave.Data_length;
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <TIM7_Callback+0xec>)
 8002ec4:	7f9b      	ldrb	r3, [r3, #30]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <TIM7_Callback+0xec>)
 8002eca:	705a      	strb	r2, [r3, #1]
			//logDebugD("Slave.Data_length  ",Slave.Data_length,0);
			if (Slave.Data_length <= DATALENGTH_MAX)
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <TIM7_Callback+0xec>)
 8002ece:	7f9b      	ldrb	r3, [r3, #30]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b1e      	cmp	r3, #30
 8002ed4:	d84b      	bhi.n	8002f6e <TIM7_Callback+0xde>
			{
				uint8_t i=0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8002eda:	2302      	movs	r3, #2
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	e009      	b.n	8002ef4 <TIM7_Callback+0x64>
				{
					Slave.Package[i] = getCharFromBufferUART2();
 8002ee0:	f001 f932 	bl	8004148 <getCharFromBufferUART2>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	b2d1      	uxtb	r1, r2
 8002eea:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <TIM7_Callback+0xec>)
 8002eec:	54d1      	strb	r1, [r2, r3]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	71fb      	strb	r3, [r7, #7]
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <TIM7_Callback+0xec>)
 8002ef8:	7f9b      	ldrb	r3, [r3, #30]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	429a      	cmp	r2, r3
 8002f00:	ddee      	ble.n	8002ee0 <TIM7_Callback+0x50>
					//logDebugD("pack ",Slave.Package[i],0)
				}
				Slave.DataCRC = Slave.Package[i-2];
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	3b02      	subs	r3, #2
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <TIM7_Callback+0xec>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <TIM7_Callback+0xec>)
 8002f0e:	77da      	strb	r2, [r3, #31]
				//logDebugD("CRC1",Slave.Package[i-2],0);
				//logDebugD("CRC2",Slave.Package[i-1],0);
				Slave.DataCRC_Calc = calcCRC(Slave.Package, Slave.Data_length, 0);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <TIM7_Callback+0xec>)
 8002f12:	7f9b      	ldrb	r3, [r3, #30]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4818      	ldr	r0, [pc, #96]	; (8002f7c <TIM7_Callback+0xec>)
 8002f1c:	f7fd ff3e 	bl	8000d9c <calcCRC>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <TIM7_Callback+0xec>)
 8002f26:	f883 2020 	strb.w	r2, [r3, #32]
				if (Slave.DataCRC_Calc == Slave.DataCRC)
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <TIM7_Callback+0xec>)
 8002f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <TIM7_Callback+0xec>)
 8002f34:	7fdb      	ldrb	r3, [r3, #31]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d118      	bne.n	8002f6e <TIM7_Callback+0xde>
				{
					//logDebug("CRC OK");
					if (Slave.Package[2] == READ_DATA)
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <TIM7_Callback+0xec>)
 8002f3e:	789b      	ldrb	r3, [r3, #2]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2bfa      	cmp	r3, #250	; 0xfa
 8002f44:	d113      	bne.n	8002f6e <TIM7_Callback+0xde>
					{
						//logDebug("READ Command");
						if(Slave.Package[3] == MAIN_SCREEN)
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <TIM7_Callback+0xec>)
 8002f48:	78db      	ldrb	r3, [r3, #3]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b14      	cmp	r3, #20
 8002f4e:	d101      	bne.n	8002f54 <TIM7_Callback+0xc4>
						{
							//logDebug("MAIN_SCREEN");
							MainScreenAnswer();
 8002f50:	f7ff fe8a 	bl	8002c68 <MainScreenAnswer>
						}
						if(Slave.Package[3] == SYSTEM_INFO)
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <TIM7_Callback+0xec>)
 8002f56:	78db      	ldrb	r3, [r3, #3]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d107      	bne.n	8002f6e <TIM7_Callback+0xde>
						{
							logDebug("SYSTEM_INFO");
 8002f5e:	4808      	ldr	r0, [pc, #32]	; (8002f80 <TIM7_Callback+0xf0>)
 8002f60:	f001 f9c2 	bl	80042e8 <printToBufferWithoutEndUART1>
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <TIM7_Callback+0xf4>)
 8002f66:	f001 f933 	bl	80041d0 <printToBufferUART1>
							SystemInfoAnswer();
 8002f6a:	f7ff ff3f 	bl	8002dec <SystemInfoAnswer>
					}
				}//CRC
			}//DATALENGTH_MAX
		}//PACKAGE_BEGIN
	}//ParsingData.IsDataReadyReadFromBuffer
}//f
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200009b8 	.word	0x200009b8
 8002f7c:	20000ddc 	.word	0x20000ddc
 8002f80:	0800599c 	.word	0x0800599c
 8002f84:	080059f8 	.word	0x080059f8

08002f88 <Output_ON>:

void Output_ON()
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BS8;//ON OUT
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <Output_ON+0x1c>)
 8002f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f92:	611a      	str	r2, [r3, #16]
    logDebug("out on");
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <Output_ON+0x20>)
 8002f96:	f001 f9a7 	bl	80042e8 <printToBufferWithoutEndUART1>
 8002f9a:	4804      	ldr	r0, [pc, #16]	; (8002fac <Output_ON+0x24>)
 8002f9c:	f001 f918 	bl	80041d0 <printToBufferUART1>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	0800599c 	.word	0x0800599c
 8002fac:	08005a04 	.word	0x08005a04

08002fb0 <Output_OFF>:
void Output_OFF()
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BR8;//ON OUT
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <Output_OFF+0x1c>)
 8002fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fba:	611a      	str	r2, [r3, #16]
    logDebug("out off");
 8002fbc:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <Output_OFF+0x20>)
 8002fbe:	f001 f993 	bl	80042e8 <printToBufferWithoutEndUART1>
 8002fc2:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <Output_OFF+0x24>)
 8002fc4:	f001 f904 	bl	80041d0 <printToBufferUART1>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	0800599c 	.word	0x0800599c
 8002fd4:	08005a0c 	.word	0x08005a0c

08002fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fe84 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002fe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002fe8:	f7fe fe68 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f7fe fa67 	bl	80014c0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002ff2:	f7fe fa89 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fad7 	bl	80015b0 <NVIC_EncodePriority>
 8003002:	4603      	mov	r3, r0
 8003004:	4619      	mov	r1, r3
 8003006:	f04f 30ff 	mov.w	r0, #4294967295
 800300a:	f7fe faa7 	bl	800155c <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800300e:	f7fe ff3b 	bl	8001e88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003012:	f000 fa15 	bl	8003440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003016:	f000 fd0b 	bl	8003a30 <MX_GPIO_Init>
  MX_DMA_Init();
 800301a:	f000 fcf1 	bl	8003a00 <MX_DMA_Init>
  MX_ADC1_Init();
 800301e:	f000 fa47 	bl	80034b0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003022:	f000 fc13 	bl	800384c <MX_USART1_UART_Init>

  MX_USART3_UART_Init();
 8003026:	f000 fc7d 	bl	8003924 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800302a:	f000 fbcf 	bl	80037cc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  SystemCoreClockUpdate();
 800302e:	f000 ff5b 	bl	8003ee8 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8003032:	4bb3      	ldr	r3, [pc, #716]	; (8003300 <main+0x328>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4ab3      	ldr	r2, [pc, #716]	; (8003304 <main+0x32c>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fae8 	bl	8001614 <SysTick_Config>

	LoggingData.RecordsQuantity= 0;
 8003044:	4bb0      	ldr	r3, [pc, #704]	; (8003308 <main+0x330>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
	uint8_t EEpromReadStatus;

	delay_ms(100);
 800304a:	2064      	movs	r0, #100	; 0x64
 800304c:	f7fd fe92 	bl	8000d74 <delay_ms>
   GPIOA->BSRR =  GPIO_BSRR_BS11;//ON CPU
 8003050:	4bae      	ldr	r3, [pc, #696]	; (800330c <main+0x334>)
 8003052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003056:	611a      	str	r2, [r3, #16]
   GPIOA->BSRR =  GPIO_BSRR_BS12;//12 V for
 8003058:	4bac      	ldr	r3, [pc, #688]	; (800330c <main+0x334>)
 800305a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800305e:	611a      	str	r2, [r3, #16]
   GPIOB->BSRR =  GPIO_BSRR_BS4;//12 V for
 8003060:	4bab      	ldr	r3, [pc, #684]	; (8003310 <main+0x338>)
 8003062:	2210      	movs	r2, #16
 8003064:	611a      	str	r2, [r3, #16]
   logDebug("System ON");
 8003066:	48ab      	ldr	r0, [pc, #684]	; (8003314 <main+0x33c>)
 8003068:	f001 f93e 	bl	80042e8 <printToBufferWithoutEndUART1>
 800306c:	48aa      	ldr	r0, [pc, #680]	; (8003318 <main+0x340>)
 800306e:	f001 f8af 	bl	80041d0 <printToBufferUART1>
	FlashVoltage = Voltage10Percent*ID_MAX_COUNT*10;
 8003072:	4baa      	ldr	r3, [pc, #680]	; (800331c <main+0x344>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	461a      	mov	r2, r3
 8003084:	4ba6      	ldr	r3, [pc, #664]	; (8003320 <main+0x348>)
 8003086:	601a      	str	r2, [r3, #0]

  //FactoryWriteToFlash_CRC();
	delay_ms(1000);
 8003088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800308c:	f7fd fe72 	bl	8000d74 <delay_ms>

	flash_read_block();
 8003090:	f7fd f9bc 	bl	800040c <flash_read_block>



	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8003094:	4b9c      	ldr	r3, [pc, #624]	; (8003308 <main+0x330>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b17      	cmp	r3, #23
 800309a:	d902      	bls.n	80030a2 <main+0xca>
 800309c:	4b9a      	ldr	r3, [pc, #616]	; (8003308 <main+0x330>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
	EEpromReadStatus = ReadFromFlash();
 80030a2:	f7fd fb4b 	bl	800073c <ReadFromFlash>
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
	if (EEpromReadStatus==0)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <main+0xf4>
	{
		delay_ms(1000);
 80030b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b4:	f7fd fe5e 	bl	8000d74 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 80030b8:	f7fd fb40 	bl	800073c <ReadFromFlash>
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
		logInfo("Read from EEprom - FAIL");
 80030c0:	4898      	ldr	r0, [pc, #608]	; (8003324 <main+0x34c>)
 80030c2:	f001 f911 	bl	80042e8 <printToBufferWithoutEndUART1>
 80030c6:	4898      	ldr	r0, [pc, #608]	; (8003328 <main+0x350>)
 80030c8:	f001 f882 	bl	80041d0 <printToBufferUART1>
	}
	if (EEpromReadStatus == 0)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <main+0x114>
	{

		delay_ms(4000);
 80030d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80030d6:	f7fd fe4d 	bl	8000d74 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 80030da:	4894      	ldr	r0, [pc, #592]	; (800332c <main+0x354>)
 80030dc:	f7fd fb7a 	bl	80007d4 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 80030e0:	4890      	ldr	r0, [pc, #576]	; (8003324 <main+0x34c>)
 80030e2:	f001 f901 	bl	80042e8 <printToBufferWithoutEndUART1>
 80030e6:	4890      	ldr	r0, [pc, #576]	; (8003328 <main+0x350>)
 80030e8:	f001 f872 	bl	80041d0 <printToBufferUART1>
	}
	if (EEpromReadStatus == 1)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <main+0x126>
		logInfo("Read from EEprom - SUCCESS");
 80030f2:	488c      	ldr	r0, [pc, #560]	; (8003324 <main+0x34c>)
 80030f4:	f001 f8f8 	bl	80042e8 <printToBufferWithoutEndUART1>
 80030f8:	488d      	ldr	r0, [pc, #564]	; (8003330 <main+0x358>)
 80030fa:	f001 f869 	bl	80041d0 <printToBufferUART1>



  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 80030fe:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <main+0x35c>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4a8d      	ldr	r2, [pc, #564]	; (8003338 <main+0x360>)
 8003104:	6013      	str	r3, [r2, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8003106:	4b8d      	ldr	r3, [pc, #564]	; (800333c <main+0x364>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	4a8b      	ldr	r2, [pc, #556]	; (8003340 <main+0x368>)
 8003114:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <main+0x364>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4a8a      	ldr	r2, [pc, #552]	; (8003344 <main+0x36c>)
 800311c:	6013      	str	r3, [r2, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 800311e:	4b87      	ldr	r3, [pc, #540]	; (800333c <main+0x364>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a89      	ldr	r2, [pc, #548]	; (8003348 <main+0x370>)
 8003124:	6013      	str	r3, [r2, #0]
 // Generation_Coefficients_R_A_B();
  InfoToUARTBeforeStart();
 8003126:	f7fd fca3 	bl	8000a70 <InfoToUARTBeforeStart>
  logInfo(Version);
 800312a:	487e      	ldr	r0, [pc, #504]	; (8003324 <main+0x34c>)
 800312c:	f001 f8dc 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003130:	4886      	ldr	r0, [pc, #536]	; (800334c <main+0x374>)
 8003132:	f001 f84d 	bl	80041d0 <printToBufferUART1>
  delay_ms(1000);
 8003136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800313a:	f7fd fe1b 	bl	8000d74 <delay_ms>

  //Output_ON();
  logDebug("OUTPUT ON");
 800313e:	4875      	ldr	r0, [pc, #468]	; (8003314 <main+0x33c>)
 8003140:	f001 f8d2 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003144:	4882      	ldr	r0, [pc, #520]	; (8003350 <main+0x378>)
 8003146:	f001 f843 	bl	80041d0 <printToBufferUART1>
  //printToBufferUART1("Hello");

//	  GPIOC->BSRR =  GPIO_BSRR_BS15;
  Battery.LowBattery = 1;
 800314a:	4b82      	ldr	r3, [pc, #520]	; (8003354 <main+0x37c>)
 800314c:	2201      	movs	r2, #1
 800314e:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BUT_GetKey();
 8003150:	f7ff f9a8 	bl	80024a4 <BUT_GetKey>
		//11 [10] B7
		//10 [9] B8
		//6  [6] I
		//5  [5] I
	//	Vref [15]
	  logDebugD("sec ",time_sec,0);
 8003154:	486f      	ldr	r0, [pc, #444]	; (8003314 <main+0x33c>)
 8003156:	f001 f8c7 	bl	80042e8 <printToBufferWithoutEndUART1>
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <main+0x380>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	4619      	mov	r1, r3
 8003162:	487e      	ldr	r0, [pc, #504]	; (800335c <main+0x384>)
 8003164:	f001 f918 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[6] ", RegularConvData[6],0);
 8003168:	486a      	ldr	r0, [pc, #424]	; (8003314 <main+0x33c>)
 800316a:	f001 f8bd 	bl	80042e8 <printToBufferWithoutEndUART1>
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <main+0x388>)
 8003170:	899b      	ldrh	r3, [r3, #12]
 8003172:	b29b      	uxth	r3, r3
 8003174:	2200      	movs	r2, #0
 8003176:	4619      	mov	r1, r3
 8003178:	487a      	ldr	r0, [pc, #488]	; (8003364 <main+0x38c>)
 800317a:	f001 f90d 	bl	8004398 <printToBufferUART1D>
	  logDebugD("I charge ", Battery.Current_Load,2);
 800317e:	4865      	ldr	r0, [pc, #404]	; (8003314 <main+0x33c>)
 8003180:	f001 f8b2 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003184:	4b73      	ldr	r3, [pc, #460]	; (8003354 <main+0x37c>)
 8003186:	88db      	ldrh	r3, [r3, #6]
 8003188:	b29b      	uxth	r3, r3
 800318a:	2202      	movs	r2, #2
 800318c:	4619      	mov	r1, r3
 800318e:	4876      	ldr	r0, [pc, #472]	; (8003368 <main+0x390>)
 8003190:	f001 f902 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[5] ", RegularConvData[5],0);
 8003194:	485f      	ldr	r0, [pc, #380]	; (8003314 <main+0x33c>)
 8003196:	f001 f8a7 	bl	80042e8 <printToBufferWithoutEndUART1>
 800319a:	4b71      	ldr	r3, [pc, #452]	; (8003360 <main+0x388>)
 800319c:	895b      	ldrh	r3, [r3, #10]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4871      	ldr	r0, [pc, #452]	; (800336c <main+0x394>)
 80031a6:	f001 f8f7 	bl	8004398 <printToBufferUART1D>
	  logDebugD("I Discharge ", Battery.Current_Charge,2);
 80031aa:	485a      	ldr	r0, [pc, #360]	; (8003314 <main+0x33c>)
 80031ac:	f001 f89c 	bl	80042e8 <printToBufferWithoutEndUART1>
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <main+0x37c>)
 80031b2:	889b      	ldrh	r3, [r3, #4]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2202      	movs	r2, #2
 80031b8:	4619      	mov	r1, r3
 80031ba:	486d      	ldr	r0, [pc, #436]	; (8003370 <main+0x398>)
 80031bc:	f001 f8ec 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[4] ", RegularConvData[4],0);
 80031c0:	4854      	ldr	r0, [pc, #336]	; (8003314 <main+0x33c>)
 80031c2:	f001 f891 	bl	80042e8 <printToBufferWithoutEndUART1>
 80031c6:	4b66      	ldr	r3, [pc, #408]	; (8003360 <main+0x388>)
 80031c8:	891b      	ldrh	r3, [r3, #8]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	4868      	ldr	r0, [pc, #416]	; (8003374 <main+0x39c>)
 80031d2:	f001 f8e1 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B1 ", CellsDatabase[0].Voltage,2);
 80031d6:	484f      	ldr	r0, [pc, #316]	; (8003314 <main+0x33c>)
 80031d8:	f001 f886 	bl	80042e8 <printToBufferWithoutEndUART1>
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <main+0x3a0>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2202      	movs	r2, #2
 80031e2:	4619      	mov	r1, r3
 80031e4:	4865      	ldr	r0, [pc, #404]	; (800337c <main+0x3a4>)
 80031e6:	f001 f8d7 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[3] ", RegularConvData[3],0);
 80031ea:	484a      	ldr	r0, [pc, #296]	; (8003314 <main+0x33c>)
 80031ec:	f001 f87c 	bl	80042e8 <printToBufferWithoutEndUART1>
 80031f0:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <main+0x388>)
 80031f2:	88db      	ldrh	r3, [r3, #6]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2200      	movs	r2, #0
 80031f8:	4619      	mov	r1, r3
 80031fa:	4861      	ldr	r0, [pc, #388]	; (8003380 <main+0x3a8>)
 80031fc:	f001 f8cc 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B2 ", CellsDatabase[1].Voltage,2);
 8003200:	4844      	ldr	r0, [pc, #272]	; (8003314 <main+0x33c>)
 8003202:	f001 f871 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003206:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <main+0x3a0>)
 8003208:	8b9b      	ldrh	r3, [r3, #28]
 800320a:	2202      	movs	r2, #2
 800320c:	4619      	mov	r1, r3
 800320e:	485d      	ldr	r0, [pc, #372]	; (8003384 <main+0x3ac>)
 8003210:	f001 f8c2 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[1] ", RegularConvData[1],0);
 8003214:	483f      	ldr	r0, [pc, #252]	; (8003314 <main+0x33c>)
 8003216:	f001 f867 	bl	80042e8 <printToBufferWithoutEndUART1>
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <main+0x388>)
 800321c:	885b      	ldrh	r3, [r3, #2]
 800321e:	b29b      	uxth	r3, r3
 8003220:	2200      	movs	r2, #0
 8003222:	4619      	mov	r1, r3
 8003224:	4858      	ldr	r0, [pc, #352]	; (8003388 <main+0x3b0>)
 8003226:	f001 f8b7 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B3 ", CellsDatabase[2].Voltage,2);
 800322a:	483a      	ldr	r0, [pc, #232]	; (8003314 <main+0x33c>)
 800322c:	f001 f85c 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003230:	4b51      	ldr	r3, [pc, #324]	; (8003378 <main+0x3a0>)
 8003232:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003234:	2202      	movs	r2, #2
 8003236:	4619      	mov	r1, r3
 8003238:	4854      	ldr	r0, [pc, #336]	; (800338c <main+0x3b4>)
 800323a:	f001 f8ad 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[0] ", RegularConvData[0],0);
 800323e:	4835      	ldr	r0, [pc, #212]	; (8003314 <main+0x33c>)
 8003240:	f001 f852 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <main+0x388>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	2200      	movs	r2, #0
 800324c:	4619      	mov	r1, r3
 800324e:	4850      	ldr	r0, [pc, #320]	; (8003390 <main+0x3b8>)
 8003250:	f001 f8a2 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B4 ", CellsDatabase[3].Voltage,2);
 8003254:	482f      	ldr	r0, [pc, #188]	; (8003314 <main+0x33c>)
 8003256:	f001 f847 	bl	80042e8 <printToBufferWithoutEndUART1>
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <main+0x3a0>)
 800325c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003260:	2202      	movs	r2, #2
 8003262:	4619      	mov	r1, r3
 8003264:	484b      	ldr	r0, [pc, #300]	; (8003394 <main+0x3bc>)
 8003266:	f001 f897 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[12] ", RegularConvData[12],0);
 800326a:	482a      	ldr	r0, [pc, #168]	; (8003314 <main+0x33c>)
 800326c:	f001 f83c 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <main+0x388>)
 8003272:	8b1b      	ldrh	r3, [r3, #24]
 8003274:	b29b      	uxth	r3, r3
 8003276:	2200      	movs	r2, #0
 8003278:	4619      	mov	r1, r3
 800327a:	4847      	ldr	r0, [pc, #284]	; (8003398 <main+0x3c0>)
 800327c:	f001 f88c 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B5 ", CellsDatabase[4].Voltage,2);
 8003280:	4824      	ldr	r0, [pc, #144]	; (8003314 <main+0x33c>)
 8003282:	f001 f831 	bl	80042e8 <printToBufferWithoutEndUART1>
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <main+0x3a0>)
 8003288:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800328c:	2202      	movs	r2, #2
 800328e:	4619      	mov	r1, r3
 8003290:	4842      	ldr	r0, [pc, #264]	; (800339c <main+0x3c4>)
 8003292:	f001 f881 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[11] ", RegularConvData[11],0);
 8003296:	481f      	ldr	r0, [pc, #124]	; (8003314 <main+0x33c>)
 8003298:	f001 f826 	bl	80042e8 <printToBufferWithoutEndUART1>
 800329c:	4b30      	ldr	r3, [pc, #192]	; (8003360 <main+0x388>)
 800329e:	8adb      	ldrh	r3, [r3, #22]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	4619      	mov	r1, r3
 80032a6:	483e      	ldr	r0, [pc, #248]	; (80033a0 <main+0x3c8>)
 80032a8:	f001 f876 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B6 ", CellsDatabase[5].Voltage,2);
 80032ac:	4819      	ldr	r0, [pc, #100]	; (8003314 <main+0x33c>)
 80032ae:	f001 f81b 	bl	80042e8 <printToBufferWithoutEndUART1>
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <main+0x3a0>)
 80032b4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80032b8:	2202      	movs	r2, #2
 80032ba:	4619      	mov	r1, r3
 80032bc:	4839      	ldr	r0, [pc, #228]	; (80033a4 <main+0x3cc>)
 80032be:	f001 f86b 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[10] ", RegularConvData[10],0);
 80032c2:	4814      	ldr	r0, [pc, #80]	; (8003314 <main+0x33c>)
 80032c4:	f001 f810 	bl	80042e8 <printToBufferWithoutEndUART1>
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <main+0x388>)
 80032ca:	8a9b      	ldrh	r3, [r3, #20]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	4619      	mov	r1, r3
 80032d2:	4835      	ldr	r0, [pc, #212]	; (80033a8 <main+0x3d0>)
 80032d4:	f001 f860 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B7 ", CellsDatabase[6].Voltage,2);
 80032d8:	480e      	ldr	r0, [pc, #56]	; (8003314 <main+0x33c>)
 80032da:	f001 f805 	bl	80042e8 <printToBufferWithoutEndUART1>
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <main+0x3a0>)
 80032e0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80032e4:	2202      	movs	r2, #2
 80032e6:	4619      	mov	r1, r3
 80032e8:	4830      	ldr	r0, [pc, #192]	; (80033ac <main+0x3d4>)
 80032ea:	f001 f855 	bl	8004398 <printToBufferUART1D>
	  logDebugD("[9] ", RegularConvData[9],0);
 80032ee:	4809      	ldr	r0, [pc, #36]	; (8003314 <main+0x33c>)
 80032f0:	f000 fffa 	bl	80042e8 <printToBufferWithoutEndUART1>
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <main+0x388>)
 80032f6:	8a5b      	ldrh	r3, [r3, #18]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	4619      	mov	r1, r3
 80032fe:	e057      	b.n	80033b0 <main+0x3d8>
 8003300:	200000cc 	.word	0x200000cc
 8003304:	10624dd3 	.word	0x10624dd3
 8003308:	20000bf0 	.word	0x20000bf0
 800330c:	40010800 	.word	0x40010800
 8003310:	40010c00 	.word	0x40010c00
 8003314:	0800599c 	.word	0x0800599c
 8003318:	08005a14 	.word	0x08005a14
 800331c:	20000dd8 	.word	0x20000dd8
 8003320:	20000a74 	.word	0x20000a74
 8003324:	08005978 	.word	0x08005978
 8003328:	08005a20 	.word	0x08005a20
 800332c:	08005a38 	.word	0x08005a38
 8003330:	08005a48 	.word	0x08005a48
 8003334:	2000009c 	.word	0x2000009c
 8003338:	20000a2c 	.word	0x20000a2c
 800333c:	20000054 	.word	0x20000054
 8003340:	20000e44 	.word	0x20000e44
 8003344:	20000e4c 	.word	0x20000e4c
 8003348:	20000dd4 	.word	0x20000dd4
 800334c:	200000bc 	.word	0x200000bc
 8003350:	08005a64 	.word	0x08005a64
 8003354:	20000bc0 	.word	0x20000bc0
 8003358:	20000a0c 	.word	0x20000a0c
 800335c:	08005a70 	.word	0x08005a70
 8003360:	20000bcc 	.word	0x20000bcc
 8003364:	08005a78 	.word	0x08005a78
 8003368:	08005a80 	.word	0x08005a80
 800336c:	08005a8c 	.word	0x08005a8c
 8003370:	08005a94 	.word	0x08005a94
 8003374:	08005aa4 	.word	0x08005aa4
 8003378:	20000ae0 	.word	0x20000ae0
 800337c:	08005aac 	.word	0x08005aac
 8003380:	08005ab0 	.word	0x08005ab0
 8003384:	08005ab8 	.word	0x08005ab8
 8003388:	08005abc 	.word	0x08005abc
 800338c:	08005ac4 	.word	0x08005ac4
 8003390:	08005ac8 	.word	0x08005ac8
 8003394:	08005ad0 	.word	0x08005ad0
 8003398:	08005ad4 	.word	0x08005ad4
 800339c:	08005adc 	.word	0x08005adc
 80033a0:	08005ae0 	.word	0x08005ae0
 80033a4:	08005ae8 	.word	0x08005ae8
 80033a8:	08005aec 	.word	0x08005aec
 80033ac:	08005af4 	.word	0x08005af4
 80033b0:	4819      	ldr	r0, [pc, #100]	; (8003418 <main+0x440>)
 80033b2:	f000 fff1 	bl	8004398 <printToBufferUART1D>
	  logDebugD("B8 ", CellsDatabase[7].Voltage,2);
 80033b6:	4819      	ldr	r0, [pc, #100]	; (800341c <main+0x444>)
 80033b8:	f000 ff96 	bl	80042e8 <printToBufferWithoutEndUART1>
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <main+0x448>)
 80033be:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80033c2:	2202      	movs	r2, #2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4817      	ldr	r0, [pc, #92]	; (8003424 <main+0x44c>)
 80033c8:	f000 ffe6 	bl	8004398 <printToBufferUART1D>

	  logDebugD("Ref ", RegularConvData[15],0);
 80033cc:	4813      	ldr	r0, [pc, #76]	; (800341c <main+0x444>)
 80033ce:	f000 ff8b 	bl	80042e8 <printToBufferWithoutEndUART1>
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <main+0x450>)
 80033d4:	8bdb      	ldrh	r3, [r3, #30]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	4619      	mov	r1, r3
 80033dc:	4813      	ldr	r0, [pc, #76]	; (800342c <main+0x454>)
 80033de:	f000 ffdb 	bl	8004398 <printToBufferUART1D>
	  logDebugD("Ucontroller:", U_Controller,2);
 80033e2:	480e      	ldr	r0, [pc, #56]	; (800341c <main+0x444>)
 80033e4:	f000 ff80 	bl	80042e8 <printToBufferWithoutEndUART1>
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <main+0x458>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2202      	movs	r2, #2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4810      	ldr	r0, [pc, #64]	; (8003434 <main+0x45c>)
 80033f4:	f000 ffd0 	bl	8004398 <printToBufferUART1D>
	  logDebugD("Battery.Voltage:", Battery.Voltage,2);
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <main+0x444>)
 80033fa:	f000 ff75 	bl	80042e8 <printToBufferWithoutEndUART1>
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <main+0x460>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	2202      	movs	r2, #2
 8003406:	4619      	mov	r1, r3
 8003408:	480c      	ldr	r0, [pc, #48]	; (800343c <main+0x464>)
 800340a:	f000 ffc5 	bl	8004398 <printToBufferUART1D>
	 // logDebugD("PowerOffTimesec = ",PowerOffTimesec, 0);




	  delay_ms(1000);
 800340e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003412:	f7fd fcaf 	bl	8000d74 <delay_ms>
	  BUT_GetKey();
 8003416:	e69b      	b.n	8003150 <main+0x178>
 8003418:	08005af8 	.word	0x08005af8
 800341c:	0800599c 	.word	0x0800599c
 8003420:	20000ae0 	.word	0x20000ae0
 8003424:	08005b00 	.word	0x08005b00
 8003428:	20000bcc 	.word	0x20000bcc
 800342c:	08005b04 	.word	0x08005b04
 8003430:	20000bec 	.word	0x20000bec
 8003434:	08005b0c 	.word	0x08005b0c
 8003438:	20000bc0 	.word	0x20000bc0
 800343c:	08005b1c 	.word	0x08005b1c

08003440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 8003444:	f7fe fb50 	bl	8001ae8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003448:	bf00      	nop
 800344a:	f7fe fb5b 	bl	8001b04 <LL_RCC_HSE_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d1fa      	bne.n	800344a <SystemClock_Config+0xa>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 8003454:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003458:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800345c:	f7fe fbf4 	bl	8001c48 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003460:	f7fe fbd2 	bl	8001c08 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003464:	bf00      	nop
 8003466:	f7fe fbdd 	bl	8001c24 <LL_RCC_PLL_IsReady>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d1fa      	bne.n	8003466 <SystemClock_Config+0x26>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003470:	2000      	movs	r0, #0
 8003472:	f7fe fb79 	bl	8001b68 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003476:	2000      	movs	r0, #0
 8003478:	f7fe fb8a 	bl	8001b90 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fe fb9b 	bl	8001bb8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003482:	2002      	movs	r0, #2
 8003484:	f7fe fb50 	bl	8001b28 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003488:	bf00      	nop
 800348a:	f7fe fb61 	bl	8001b50 <LL_RCC_GetSysClkSource>
 800348e:	4603      	mov	r3, r0
 8003490:	2b08      	cmp	r3, #8
 8003492:	d1fa      	bne.n	800348a <SystemClock_Config+0x4a>
  {

  }
  LL_Init1msTick(24000000);
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <SystemClock_Config+0x6c>)
 8003496:	f001 fd8b 	bl	8004fb0 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 800349a:	4804      	ldr	r0, [pc, #16]	; (80034ac <SystemClock_Config+0x6c>)
 800349c:	f001 fd96 	bl	8004fcc <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fe fb9d 	bl	8001be0 <LL_RCC_SetADCClockSource>
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	016e3600 	.word	0x016e3600

080034b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80034b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	463b      	mov	r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80034de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034e2:	f7fe fc03 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80034e6:	2010      	movs	r0, #16
 80034e8:	f7fe fc00 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80034ec:	2004      	movs	r0, #4
 80034ee:	f7fe fbfd 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80034f2:	2008      	movs	r0, #8
 80034f4:	f7fe fbfa 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  PA7   ------> ADC1_IN7
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80034f8:	f643 733f 	movw	r3, #16191	; 0x3f3f
 80034fc:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003502:	463b      	mov	r3, r7
 8003504:	4619      	mov	r1, r3
 8003506:	489d      	ldr	r0, [pc, #628]	; (800377c <MX_ADC1_Init+0x2cc>)
 8003508:	f001 f990 	bl	800482c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800350c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003510:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003516:	463b      	mov	r3, r7
 8003518:	4619      	mov	r1, r3
 800351a:	4899      	ldr	r0, [pc, #612]	; (8003780 <MX_ADC1_Init+0x2d0>)
 800351c:	f001 f986 	bl	800482c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003520:	f240 2302 	movw	r3, #514	; 0x202
 8003524:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	463b      	mov	r3, r7
 800352c:	4619      	mov	r1, r3
 800352e:	4895      	ldr	r0, [pc, #596]	; (8003784 <MX_ADC1_Init+0x2d4>)
 8003530:	f001 f97c 	bl	800482c <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003534:	2200      	movs	r2, #0
 8003536:	2101      	movs	r1, #1
 8003538:	4893      	ldr	r0, [pc, #588]	; (8003788 <MX_ADC1_Init+0x2d8>)
 800353a:	f7fe f989 	bl	8001850 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800353e:	2200      	movs	r2, #0
 8003540:	2101      	movs	r1, #1
 8003542:	4891      	ldr	r0, [pc, #580]	; (8003788 <MX_ADC1_Init+0x2d8>)
 8003544:	f7fe fa52 	bl	80019ec <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003548:	2220      	movs	r2, #32
 800354a:	2101      	movs	r1, #1
 800354c:	488e      	ldr	r0, [pc, #568]	; (8003788 <MX_ADC1_Init+0x2d8>)
 800354e:	f7fe f9a3 	bl	8001898 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003552:	2200      	movs	r2, #0
 8003554:	2101      	movs	r1, #1
 8003556:	488c      	ldr	r0, [pc, #560]	; (8003788 <MX_ADC1_Init+0x2d8>)
 8003558:	f7fe f9c0 	bl	80018dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	2101      	movs	r1, #1
 8003560:	4889      	ldr	r0, [pc, #548]	; (8003788 <MX_ADC1_Init+0x2d8>)
 8003562:	f7fe f9dd 	bl	8001920 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8003566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356a:	2101      	movs	r1, #1
 800356c:	4886      	ldr	r0, [pc, #536]	; (8003788 <MX_ADC1_Init+0x2d8>)
 800356e:	f7fe f9f9 	bl	8001964 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8003572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003576:	2101      	movs	r1, #1
 8003578:	4883      	ldr	r0, [pc, #524]	; (8003788 <MX_ADC1_Init+0x2d8>)
 800357a:	f7fe fa15 	bl	80019a8 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_ConfigAddresses(DMA1,
 800357e:	2100      	movs	r1, #0
 8003580:	4882      	ldr	r0, [pc, #520]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003582:	f7fe f869 	bl	8001658 <LL_ADC_DMA_GetRegAddr>
 8003586:	4602      	mov	r2, r0
 8003588:	4981      	ldr	r1, [pc, #516]	; (8003790 <MX_ADC1_Init+0x2e0>)
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	460b      	mov	r3, r1
 8003590:	2101      	movs	r1, #1
 8003592:	487d      	ldr	r0, [pc, #500]	; (8003788 <MX_ADC1_Init+0x2d8>)
 8003594:	f7fe fa6e 	bl	8001a74 <LL_DMA_ConfigAddresses>
                           (uint32_t)RegularConvData,
                           LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

   //LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,LL_ADC_DMA_GetRegAddr(ADC1,LL_ADC_DMA_REG_REGULAR_DATA));
   //LL_DMA_SetMemoryAddress(DMA1,LL_DMA_CHANNEL_1,RegularConvData);
   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, NUMBER_OF_CHANNELS);
 8003598:	2210      	movs	r2, #16
 800359a:	2101      	movs	r1, #1
 800359c:	487a      	ldr	r0, [pc, #488]	; (8003788 <MX_ADC1_Init+0x2d8>)
 800359e:	f7fe fa47 	bl	8001a30 <LL_DMA_SetDataLength>
   //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
   //LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80035a2:	2101      	movs	r1, #1
 80035a4:	4878      	ldr	r0, [pc, #480]	; (8003788 <MX_ADC1_Init+0x2d8>)
 80035a6:	f7fe f935 	bl	8001814 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80035ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80035b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b8:	4619      	mov	r1, r3
 80035ba:	4874      	ldr	r0, [pc, #464]	; (800378c <MX_ADC1_Init+0x2dc>)
 80035bc:	f001 f811 	bl	80045e2 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80035c0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80035c4:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS;
 80035c6:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 80035ca:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80035d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	486a      	ldr	r0, [pc, #424]	; (800378c <MX_ADC1_Init+0x2dc>)
 80035e2:	f001 f825 	bl	8004630 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80035e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ee:	4867      	ldr	r0, [pc, #412]	; (800378c <MX_ADC1_Init+0x2dc>)
 80035f0:	f7fe f850 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80035f4:	2207      	movs	r2, #7
 80035f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035fa:	4864      	ldr	r0, [pc, #400]	; (800378c <MX_ADC1_Init+0x2dc>)
 80035fc:	f7fe f87f 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8003600:	4a64      	ldr	r2, [pc, #400]	; (8003794 <MX_ADC1_Init+0x2e4>)
 8003602:	f240 2105 	movw	r1, #517	; 0x205
 8003606:	4861      	ldr	r0, [pc, #388]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003608:	f7fe f844 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800360c:	2207      	movs	r2, #7
 800360e:	4961      	ldr	r1, [pc, #388]	; (8003794 <MX_ADC1_Init+0x2e4>)
 8003610:	485e      	ldr	r0, [pc, #376]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003612:	f7fe f874 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8003616:	4a60      	ldr	r2, [pc, #384]	; (8003798 <MX_ADC1_Init+0x2e8>)
 8003618:	f240 210a 	movw	r1, #522	; 0x20a
 800361c:	485b      	ldr	r0, [pc, #364]	; (800378c <MX_ADC1_Init+0x2dc>)
 800361e:	f7fe f839 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003622:	2207      	movs	r2, #7
 8003624:	495c      	ldr	r1, [pc, #368]	; (8003798 <MX_ADC1_Init+0x2e8>)
 8003626:	4859      	ldr	r0, [pc, #356]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003628:	f7fe f869 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 800362c:	4a5b      	ldr	r2, [pc, #364]	; (800379c <MX_ADC1_Init+0x2ec>)
 800362e:	f240 210f 	movw	r1, #527	; 0x20f
 8003632:	4856      	ldr	r0, [pc, #344]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003634:	f7fe f82e 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003638:	2207      	movs	r2, #7
 800363a:	4958      	ldr	r1, [pc, #352]	; (800379c <MX_ADC1_Init+0x2ec>)
 800363c:	4853      	ldr	r0, [pc, #332]	; (800378c <MX_ADC1_Init+0x2dc>)
 800363e:	f7fe f85e 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8003642:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <MX_ADC1_Init+0x2f0>)
 8003644:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003648:	4850      	ldr	r0, [pc, #320]	; (800378c <MX_ADC1_Init+0x2dc>)
 800364a:	f7fe f823 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800364e:	2207      	movs	r2, #7
 8003650:	4953      	ldr	r1, [pc, #332]	; (80037a0 <MX_ADC1_Init+0x2f0>)
 8003652:	484e      	ldr	r0, [pc, #312]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003654:	f7fe f853 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <MX_ADC1_Init+0x2f4>)
 800365a:	f240 2119 	movw	r1, #537	; 0x219
 800365e:	484b      	ldr	r0, [pc, #300]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003660:	f7fe f818 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003664:	2207      	movs	r2, #7
 8003666:	494f      	ldr	r1, [pc, #316]	; (80037a4 <MX_ADC1_Init+0x2f4>)
 8003668:	4848      	ldr	r0, [pc, #288]	; (800378c <MX_ADC1_Init+0x2dc>)
 800366a:	f7fe f848 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 800366e:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <MX_ADC1_Init+0x2f8>)
 8003670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003674:	4845      	ldr	r0, [pc, #276]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003676:	f7fe f80d 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800367a:	2207      	movs	r2, #7
 800367c:	494a      	ldr	r1, [pc, #296]	; (80037a8 <MX_ADC1_Init+0x2f8>)
 800367e:	4843      	ldr	r0, [pc, #268]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003680:	f7fe f83d 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8003684:	4a49      	ldr	r2, [pc, #292]	; (80037ac <MX_ADC1_Init+0x2fc>)
 8003686:	f240 1105 	movw	r1, #261	; 0x105
 800368a:	4840      	ldr	r0, [pc, #256]	; (800378c <MX_ADC1_Init+0x2dc>)
 800368c:	f7fe f802 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003690:	2207      	movs	r2, #7
 8003692:	4946      	ldr	r1, [pc, #280]	; (80037ac <MX_ADC1_Init+0x2fc>)
 8003694:	483d      	ldr	r0, [pc, #244]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003696:	f7fe f832 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_9);
 800369a:	4a45      	ldr	r2, [pc, #276]	; (80037b0 <MX_ADC1_Init+0x300>)
 800369c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80036a0:	483a      	ldr	r0, [pc, #232]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036a2:	f7fd fff7 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036a6:	2207      	movs	r2, #7
 80036a8:	4941      	ldr	r1, [pc, #260]	; (80037b0 <MX_ADC1_Init+0x300>)
 80036aa:	4838      	ldr	r0, [pc, #224]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036ac:	f7fe f827 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_10);
 80036b0:	220a      	movs	r2, #10
 80036b2:	f240 110f 	movw	r1, #271	; 0x10f
 80036b6:	4835      	ldr	r0, [pc, #212]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036b8:	f7fd ffec 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036bc:	2207      	movs	r2, #7
 80036be:	210a      	movs	r1, #10
 80036c0:	4832      	ldr	r0, [pc, #200]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036c2:	f7fe f81c 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_11);
 80036c6:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <MX_ADC1_Init+0x304>)
 80036c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80036cc:	482f      	ldr	r0, [pc, #188]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036ce:	f7fd ffe1 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036d2:	2207      	movs	r2, #7
 80036d4:	4937      	ldr	r1, [pc, #220]	; (80037b4 <MX_ADC1_Init+0x304>)
 80036d6:	482d      	ldr	r0, [pc, #180]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036d8:	f7fe f811 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_12);
 80036dc:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <MX_ADC1_Init+0x308>)
 80036de:	f240 1119 	movw	r1, #281	; 0x119
 80036e2:	482a      	ldr	r0, [pc, #168]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036e4:	f7fd ffd6 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036e8:	2207      	movs	r2, #7
 80036ea:	4933      	ldr	r1, [pc, #204]	; (80037b8 <MX_ADC1_Init+0x308>)
 80036ec:	4827      	ldr	r0, [pc, #156]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036ee:	f7fe f806 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_13);
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <MX_ADC1_Init+0x30c>)
 80036f4:	2100      	movs	r1, #0
 80036f6:	4825      	ldr	r0, [pc, #148]	; (800378c <MX_ADC1_Init+0x2dc>)
 80036f8:	f7fd ffcc 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036fc:	2207      	movs	r2, #7
 80036fe:	492f      	ldr	r1, [pc, #188]	; (80037bc <MX_ADC1_Init+0x30c>)
 8003700:	4822      	ldr	r0, [pc, #136]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003702:	f7fd fffc 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_14);
 8003706:	4a2e      	ldr	r2, [pc, #184]	; (80037c0 <MX_ADC1_Init+0x310>)
 8003708:	2105      	movs	r1, #5
 800370a:	4820      	ldr	r0, [pc, #128]	; (800378c <MX_ADC1_Init+0x2dc>)
 800370c:	f7fd ffc2 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003710:	2207      	movs	r2, #7
 8003712:	492b      	ldr	r1, [pc, #172]	; (80037c0 <MX_ADC1_Init+0x310>)
 8003714:	481d      	ldr	r0, [pc, #116]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003716:	f7fd fff2 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_15);
 800371a:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <MX_ADC1_Init+0x314>)
 800371c:	210a      	movs	r1, #10
 800371e:	481b      	ldr	r0, [pc, #108]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003720:	f7fd ffb8 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003724:	2207      	movs	r2, #7
 8003726:	4927      	ldr	r1, [pc, #156]	; (80037c4 <MX_ADC1_Init+0x314>)
 8003728:	4818      	ldr	r0, [pc, #96]	; (800378c <MX_ADC1_Init+0x2dc>)
 800372a:	f7fd ffe8 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_16, LL_ADC_CHANNEL_VREFINT);
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <MX_ADC1_Init+0x318>)
 8003730:	210f      	movs	r1, #15
 8003732:	4816      	ldr	r0, [pc, #88]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003734:	f7fd ffae 	bl	8001694 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003738:	2207      	movs	r2, #7
 800373a:	4923      	ldr	r1, [pc, #140]	; (80037c8 <MX_ADC1_Init+0x318>)
 800373c:	4813      	ldr	r0, [pc, #76]	; (800378c <MX_ADC1_Init+0x2dc>)
 800373e:	f7fd ffde 	bl	80016fe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8003742:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003746:	4811      	ldr	r0, [pc, #68]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003748:	f7fd ff92 	bl	8001670 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */
	 LL_ADC_Enable(ADC1);
 800374c:	480f      	ldr	r0, [pc, #60]	; (800378c <MX_ADC1_Init+0x2dc>)
 800374e:	f7fe f821 	bl	8001794 <LL_ADC_Enable>
	  delay_ms(100);
 8003752:	2064      	movs	r0, #100	; 0x64
 8003754:	f7fd fb0e 	bl	8000d74 <delay_ms>
	  LL_ADC_StartCalibration(ADC1);
 8003758:	480c      	ldr	r0, [pc, #48]	; (800378c <MX_ADC1_Init+0x2dc>)
 800375a:	f7fe f82a 	bl	80017b2 <LL_ADC_StartCalibration>
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 800375e:	bf00      	nop
 8003760:	480a      	ldr	r0, [pc, #40]	; (800378c <MX_ADC1_Init+0x2dc>)
 8003762:	f7fe f835 	bl	80017d0 <LL_ADC_IsCalibrationOnGoing>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f9      	bne.n	8003760 <MX_ADC1_Init+0x2b0>
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 800376c:	4807      	ldr	r0, [pc, #28]	; (800378c <MX_ADC1_Init+0x2dc>)
 800376e:	f7fe f841 	bl	80017f4 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8003772:	bf00      	nop
 8003774:	3730      	adds	r7, #48	; 0x30
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40011000 	.word	0x40011000
 8003780:	40010800 	.word	0x40010800
 8003784:	40010c00 	.word	0x40010c00
 8003788:	40020000 	.word	0x40020000
 800378c:	40012400 	.word	0x40012400
 8003790:	20000bcc 	.word	0x20000bcc
 8003794:	02300001 	.word	0x02300001
 8003798:	02600002 	.word	0x02600002
 800379c:	02900003 	.word	0x02900003
 80037a0:	02c00004 	.word	0x02c00004
 80037a4:	02f00005 	.word	0x02f00005
 80037a8:	03200006 	.word	0x03200006
 80037ac:	03500007 	.word	0x03500007
 80037b0:	03b00009 	.word	0x03b00009
 80037b4:	0030000b 	.word	0x0030000b
 80037b8:	0060000c 	.word	0x0060000c
 80037bc:	0090000d 	.word	0x0090000d
 80037c0:	00c0000e 	.word	0x00c0000e
 80037c4:	00f0000f 	.word	0x00f0000f
 80037c8:	81500011 	.word	0x81500011

080037cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80037e0:	2020      	movs	r0, #32
 80037e2:	f7fe fa6b 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80037e6:	f7fd fe8f 	bl	8001508 <__NVIC_GetPriorityGrouping>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2200      	movs	r2, #0
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd fedd 	bl	80015b0 <NVIC_EncodePriority>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4619      	mov	r1, r3
 80037fa:	2037      	movs	r0, #55	; 0x37
 80037fc:	f7fd feae 	bl	800155c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8003800:	2037      	movs	r0, #55	; 0x37
 8003802:	f7fd fe8f 	bl	8001524 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 24000;
 8003806:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800380a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 8003810:	230a      	movs	r3, #10
 8003812:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	4619      	mov	r1, r3
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <MX_TIM7_Init+0x7c>)
 800381a:	f001 f9b3 	bl	8004b84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 800381e:	480a      	ldr	r0, [pc, #40]	; (8003848 <MX_TIM7_Init+0x7c>)
 8003820:	f7fe fa8b 	bl	8001d3a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
 8003824:	2120      	movs	r1, #32
 8003826:	4808      	ldr	r0, [pc, #32]	; (8003848 <MX_TIM7_Init+0x7c>)
 8003828:	f7fe fa96 	bl	8001d58 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <MX_TIM7_Init+0x7c>)
 800382e:	f7fe faa5 	bl	8001d7c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
  LL_TIM_EnableCounter(TIM7);
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <MX_TIM7_Init+0x7c>)
 8003834:	f7fe fa72 	bl	8001d1c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8003838:	4803      	ldr	r0, [pc, #12]	; (8003848 <MX_TIM7_Init+0x7c>)
 800383a:	f7fe faae 	bl	8001d9a <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM7_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40001400 	.word	0x40001400

0800384c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	615a      	str	r2, [r3, #20]
 8003864:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	463b      	mov	r3, r7
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003874:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003878:	f7fe fa38 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800387c:	2004      	movs	r0, #4
 800387e:	f7fe fa35 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <MX_USART1_UART_Init+0xc8>)
 8003884:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003886:	2309      	movs	r3, #9
 8003888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800388a:	2303      	movs	r3, #3
 800388c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	4820      	ldr	r0, [pc, #128]	; (8003918 <MX_USART1_UART_Init+0xcc>)
 8003898:	f000 ffc8 	bl	800482c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <MX_USART1_UART_Init+0xd0>)
 800389e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80038a0:	2304      	movs	r3, #4
 80038a2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	463b      	mov	r3, r7
 80038a6:	4619      	mov	r1, r3
 80038a8:	481b      	ldr	r0, [pc, #108]	; (8003918 <MX_USART1_UART_Init+0xcc>)
 80038aa:	f000 ffbf 	bl	800482c <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80038ae:	f7fd fe2b 	bl	8001508 <__NVIC_GetPriorityGrouping>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fe79 	bl	80015b0 <NVIC_EncodePriority>
 80038be:	4603      	mov	r3, r0
 80038c0:	4619      	mov	r1, r3
 80038c2:	2025      	movs	r0, #37	; 0x25
 80038c4:	f7fd fe4a 	bl	800155c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80038c8:	2025      	movs	r0, #37	; 0x25
 80038ca:	f7fd fe2b 	bl	8001524 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80038ce:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80038d2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80038e0:	230c      	movs	r3, #12
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4619      	mov	r1, r3
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <MX_USART1_UART_Init+0xd4>)
 80038f4:	f001 facc 	bl	8004e90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <MX_USART1_UART_Init+0xd4>)
 80038fa:	f7fe fa6c 	bl	8001dd6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80038fe:	4808      	ldr	r0, [pc, #32]	; (8003920 <MX_USART1_UART_Init+0xd4>)
 8003900:	f7fe fa5a 	bl	8001db8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableIT_TXE(USART1);
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_USART1_UART_Init+0xd4>)
 8003906:	f7fe fa8a 	bl	8001e1e <LL_USART_EnableIT_TXE>
  // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END USART1_Init 2 */

}
 800390a:	bf00      	nop
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	04020002 	.word	0x04020002
 8003918:	40010800 	.word	0x40010800
 800391c:	04040004 	.word	0x04040004
 8003920:	40013800 	.word	0x40013800

08003924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393e:	463b      	mov	r3, r7
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800394c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003950:	f7fe f9b4 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003954:	2008      	movs	r0, #8
 8003956:	f7fe f9c9 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <MX_USART3_UART_Init+0xcc>)
 800395c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800395e:	2309      	movs	r3, #9
 8003960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	463b      	mov	r3, r7
 800396c:	4619      	mov	r1, r3
 800396e:	4821      	ldr	r0, [pc, #132]	; (80039f4 <MX_USART3_UART_Init+0xd0>)
 8003970:	f000 ff5c 	bl	800482c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <MX_USART3_UART_Init+0xd4>)
 8003976:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003978:	2304      	movs	r3, #4
 800397a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	463b      	mov	r3, r7
 800397e:	4619      	mov	r1, r3
 8003980:	481c      	ldr	r0, [pc, #112]	; (80039f4 <MX_USART3_UART_Init+0xd0>)
 8003982:	f000 ff53 	bl	800482c <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003986:	f7fd fdbf 	bl	8001508 <__NVIC_GetPriorityGrouping>
 800398a:	4603      	mov	r3, r0
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fe0d 	bl	80015b0 <NVIC_EncodePriority>
 8003996:	4603      	mov	r3, r0
 8003998:	4619      	mov	r1, r3
 800399a:	2027      	movs	r0, #39	; 0x27
 800399c:	f7fd fdde 	bl	800155c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80039a0:	2027      	movs	r0, #39	; 0x27
 80039a2:	f7fd fdbf 	bl	8001524 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80039a6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80039aa:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80039b8:	230c      	movs	r3, #12
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_USART3_UART_Init+0xd8>)
 80039cc:	f001 fa60 	bl	8004e90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80039d0:	480a      	ldr	r0, [pc, #40]	; (80039fc <MX_USART3_UART_Init+0xd8>)
 80039d2:	f7fe fa00 	bl	8001dd6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80039d6:	4809      	ldr	r0, [pc, #36]	; (80039fc <MX_USART3_UART_Init+0xd8>)
 80039d8:	f7fe f9ee 	bl	8001db8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  //LL_USART_EnableIT_TXE(USART3);


  LL_USART_EnableIT_TXE(USART3);
 80039dc:	4807      	ldr	r0, [pc, #28]	; (80039fc <MX_USART3_UART_Init+0xd8>)
 80039de:	f7fe fa1e 	bl	8001e1e <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(USART3);
 80039e2:	4806      	ldr	r0, [pc, #24]	; (80039fc <MX_USART3_UART_Init+0xd8>)
 80039e4:	f7fe fa0c 	bl	8001e00 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART3_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	3730      	adds	r7, #48	; 0x30
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	04040004 	.word	0x04040004
 80039f4:	40010c00 	.word	0x40010c00
 80039f8:	04080008 	.word	0x04080008
 80039fc:	40004800 	.word	0x40004800

08003a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7fe f941 	bl	8001c8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a0a:	f7fd fd7d 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd fdcb 	bl	80015b0 <NVIC_EncodePriority>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	200b      	movs	r0, #11
 8003a20:	f7fd fd9c 	bl	800155c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a24:	200b      	movs	r0, #11
 8003a26:	f7fd fd7d 	bl	8001524 <__NVIC_EnableIRQ>

}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003a44:	2020      	movs	r0, #32
 8003a46:	f7fe f951 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003a4a:	2010      	movs	r0, #16
 8003a4c:	f7fe f94e 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003a50:	2004      	movs	r0, #4
 8003a52:	f7fe f94b 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003a56:	2008      	movs	r0, #8
 8003a58:	f7fe f948 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8003a5c:	492e      	ldr	r1, [pc, #184]	; (8003b18 <MX_GPIO_Init+0xe8>)
 8003a5e:	482f      	ldr	r0, [pc, #188]	; (8003b1c <MX_GPIO_Init+0xec>)
 8003a60:	f7fe fa02 	bl	8001e68 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8003a64:	492e      	ldr	r1, [pc, #184]	; (8003b20 <MX_GPIO_Init+0xf0>)
 8003a66:	482f      	ldr	r0, [pc, #188]	; (8003b24 <MX_GPIO_Init+0xf4>)
 8003a68:	f7fe f9fe 	bl	8001e68 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8003a6c:	492e      	ldr	r1, [pc, #184]	; (8003b28 <MX_GPIO_Init+0xf8>)
 8003a6e:	482f      	ldr	r0, [pc, #188]	; (8003b2c <MX_GPIO_Init+0xfc>)
 8003a70:	f7fe f9fa 	bl	8001e68 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8003a74:	f240 4104 	movw	r1, #1028	; 0x404
 8003a78:	482d      	ldr	r0, [pc, #180]	; (8003b30 <MX_GPIO_Init+0x100>)
 8003a7a:	f7fe f9f5 	bl	8001e68 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <MX_GPIO_Init+0xe8>)
 8003a80:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a82:	2301      	movs	r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a86:	2302      	movs	r3, #2
 8003a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4822      	ldr	r0, [pc, #136]	; (8003b1c <MX_GPIO_Init+0xec>)
 8003a94:	f000 feca 	bl	800482c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <MX_GPIO_Init+0xf0>)
 8003a9a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	481d      	ldr	r0, [pc, #116]	; (8003b24 <MX_GPIO_Init+0xf4>)
 8003aae:	f000 febd 	bl	800482c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <MX_GPIO_Init+0x104>)
 8003ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4819      	ldr	r0, [pc, #100]	; (8003b24 <MX_GPIO_Init+0xf4>)
 8003ac0:	f000 feb4 	bl	800482c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <MX_GPIO_Init+0xf8>)
 8003ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003acc:	2302      	movs	r3, #2
 8003ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4814      	ldr	r0, [pc, #80]	; (8003b2c <MX_GPIO_Init+0xfc>)
 8003ada:	f000 fea7 	bl	800482c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <MX_GPIO_Init+0x108>)
 8003ae0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <MX_GPIO_Init+0xf4>)
 8003af0:	f000 fe9c 	bl	800482c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003af4:	f240 4304 	movw	r3, #1028	; 0x404
 8003af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003afa:	2301      	movs	r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003afe:	2302      	movs	r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4809      	ldr	r0, [pc, #36]	; (8003b30 <MX_GPIO_Init+0x100>)
 8003b0c:	f000 fe8e 	bl	800482c <LL_GPIO_Init>

}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	04f138f9 	.word	0x04f138f9
 8003b1c:	40010c00 	.word	0x40010c00
 8003b20:	041ac0da 	.word	0x041ac0da
 8003b24:	40011000 	.word	0x40011000
 8003b28:	04190019 	.word	0x04190019
 8003b2c:	40010800 	.word	0x40010800
 8003b30:	40011400 	.word	0x40011400
 8003b34:	04010001 	.word	0x04010001
 8003b38:	04040004 	.word	0x04040004

08003b3c <LL_TIM_ClearFlag_UPDATE>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f06f 0201 	mvn.w	r2, #1
 8003b4a:	611a      	str	r2, [r3, #16]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <LL_USART_IsActiveFlag_RXNE>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ba2:	e7fe      	b.n	8003ba2 <NMI_Handler+0x4>

08003ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba8:	e7fe      	b.n	8003ba8 <HardFault_Handler+0x4>

08003baa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bae:	e7fe      	b.n	8003bae <MemManage_Handler+0x4>

08003bb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb4:	e7fe      	b.n	8003bb4 <BusFault_Handler+0x4>

08003bb6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bba:	e7fe      	b.n	8003bba <UsageFault_Handler+0x4>

08003bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_Callback();
 8003be4:	f7fe fc78 	bl	80024d8 <SysTick_Callback>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART2)) //прерывание по передачи
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <USART1_IRQHandler+0x7c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <USART1_IRQHandler+0x74>
	{
		if (bufferUart1.tx_counter > 0) //е�?ли е�?ть что передать
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c0a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d025      	beq.n	8003c60 <USART1_IRQHandler+0x68>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количе�?тво не переданных данных
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c16:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c22:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART3,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c28:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	b291      	uxth	r1, r2
 8003c32:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c34:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <USART1_IRQHandler+0x7c>)
 8003c46:	605a      	str	r2, [r3, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c4a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c54:	d10a      	bne.n	8003c6c <USART1_IRQHandler+0x74>
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <USART1_IRQHandler+0x80>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
	    	//LL_USART_DisableIT_TXE(USART2);
	    }
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8003c5e:	e005      	b.n	8003c6c <USART1_IRQHandler+0x74>
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <USART1_IRQHandler+0x7c>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <USART1_IRQHandler+0x7c>)
 8003c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40013800 	.word	0x40013800
 8003c78:	200000f8 	.word	0x200000f8

08003c7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//if ( (USART1->SR & USART_SR_RXNE) !=0 ) //Ждем по�?туплени�? данных от компьютера
	volatile uint8_t data;
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8003c82:	4889      	ldr	r0, [pc, #548]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003c84:	f7ff ff79 	bl	8003b7a <LL_USART_IsActiveFlag_RXNE>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80cb 	beq.w	8003e26 <USART3_IRQHandler+0x1aa>
	{
	  data = (uint8_t) (USART3->DR & 0xFF);
 8003c90:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	71fb      	strb	r3, [r7, #7]

	  if ( (ParsingData.IsPassedPackageLengthFlag == 1)  )
 8003c98:	4b84      	ldr	r3, [pc, #528]	; (8003eac <USART3_IRQHandler+0x230>)
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d149      	bne.n	8003d36 <USART3_IRQHandler+0xba>
	  {
		  //logDebug("PD");
		  //logDebugD("i=",ParsingData.i,0);
		  //logDebugD("Le=",ParsingData.Length,0)
		  //logDebugD("Data=",data,0);
		  if (ParsingData.i < ParsingData.Length-2)
 8003ca2:	4b82      	ldr	r3, [pc, #520]	; (8003eac <USART3_IRQHandler+0x230>)
 8003ca4:	88db      	ldrh	r3, [r3, #6]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b80      	ldr	r3, [pc, #512]	; (8003eac <USART3_IRQHandler+0x230>)
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b02      	subs	r3, #2
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	da33      	bge.n	8003d1e <USART3_IRQHandler+0xa2>
		  {
			  ParsingData.i++;
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <USART3_IRQHandler+0x230>)
 8003cb8:	88db      	ldrh	r3, [r3, #6]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	4b7a      	ldr	r3, [pc, #488]	; (8003eac <USART3_IRQHandler+0x230>)
 8003cc2:	80da      	strh	r2, [r3, #6]
			  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003cc4:	4b7a      	ldr	r3, [pc, #488]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003cc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	b291      	uxth	r1, r2
 8003cd0:	4a77      	ldr	r2, [pc, #476]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003cd2:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	b2d9      	uxtb	r1, r3
 8003cdc:	4b74      	ldr	r3, [pc, #464]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003cde:	5499      	strb	r1, [r3, r2]

			  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003ce0:	4b73      	ldr	r3, [pc, #460]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003ce2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d103      	bne.n	8003cf4 <USART3_IRQHandler+0x78>
 8003cec:	4b70      	ldr	r3, [pc, #448]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003cf4:	4b6e      	ldr	r3, [pc, #440]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4a6b      	ldr	r2, [pc, #428]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d02:	4619      	mov	r1, r3
 8003d04:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d114      	bne.n	8003d36 <USART3_IRQHandler+0xba>
			  {
				  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003d0c:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003d14:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003d1c:	e00b      	b.n	8003d36 <USART3_IRQHandler+0xba>
			  }
		  }
		  else
		  {
			  //logDebug("else");
			  ParsingData.i = 0;
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	80da      	strh	r2, [r3, #6]
			  ParsingData.IsPassedPackageLengthFlag = 0;
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	705a      	strb	r2, [r3, #1]
			  ParsingData.IsPassedPackageBeginFlag = 0;
 8003d2a:	4b60      	ldr	r3, [pc, #384]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
			  ParsingData.IsDataReadyReadFromBuffer = 1;
 8003d30:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	709a      	strb	r2, [r3, #2]
		  }
	  }
	  //
	  if ( (ParsingData.IsPassedPackageBeginFlag == 1) && (ParsingData.IsPassedPackageLengthFlag == 0) )
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d13a      	bne.n	8003db6 <USART3_IRQHandler+0x13a>
 8003d40:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d135      	bne.n	8003db6 <USART3_IRQHandler+0x13a>
	  {
		  //logDebug("Length");
		  ParsingData.IsPassedPackageLengthFlag = 1;
 8003d4a:	4b58      	ldr	r3, [pc, #352]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	705a      	strb	r2, [r3, #1]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003d50:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	b291      	uxth	r1, r2
 8003d5c:	4a54      	ldr	r2, [pc, #336]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d5e:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	b2d9      	uxtb	r1, r3
 8003d68:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d6a:	5499      	strb	r1, [r3, r2]
		  ParsingData.Length = data+1+1;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3302      	adds	r3, #2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <USART3_IRQHandler+0x230>)
 8003d78:	809a      	strh	r2, [r3, #4]

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d103      	bne.n	8003d8e <USART3_IRQHandler+0x112>
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003d8e:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4a45      	ldr	r2, [pc, #276]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d107      	bne.n	8003db6 <USART3_IRQHandler+0x13a>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }
	  //
	  if ( (data == PACKAGE_BEGIN) && (ParsingData.IsPassedPackageBeginFlag == 0) )
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2bfe      	cmp	r3, #254	; 0xfe
 8003dbc:	d133      	bne.n	8003e26 <USART3_IRQHandler+0x1aa>
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <USART3_IRQHandler+0x230>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12e      	bne.n	8003e26 <USART3_IRQHandler+0x1aa>
	  {
		  //logDebug("PB");
		  ParsingData.IsPassedPackageBeginFlag = 1;
 8003dc8:	4b38      	ldr	r3, [pc, #224]	; (8003eac <USART3_IRQHandler+0x230>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003dce:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003dd0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	b291      	uxth	r1, r2
 8003dda:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003ddc:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003de8:	5499      	strb	r1, [r3, r2]
		  //bufferUart2.rx_buffer[bufferUart1.rx_wr_index++] = data; //BUG STUCK

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003dea:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003dec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d103      	bne.n	8003dfe <USART3_IRQHandler+0x182>
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d107      	bne.n	8003e26 <USART3_IRQHandler+0x1aa>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }

	}

	if ( (USART3->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <USART3_IRQHandler+0x224>
	{
		vard2++;
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <USART3_IRQHandler+0x238>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <USART3_IRQHandler+0x238>)
 8003e3a:	6013      	str	r3, [r2, #0]
		if (bufferUart2.tx_counter > 0) //е�?ли е�?ть что передать
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e3e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d025      	beq.n	8003e94 <USART3_IRQHandler+0x218>
	    {
	      --bufferUart2.tx_counter; // уменьшаем количе�?тво не переданных данных
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e4a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e56:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART3->DR = bufferUart2.tx_buffer[bufferUart2.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e5c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	b291      	uxth	r1, r2
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e68:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e70:	4413      	add	r3, r2
 8003e72:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003e7a:	605a      	str	r2, [r3, #4]
	      if (bufferUart2.tx_rd_index == TX_BUFFER_SIZE) bufferUart2.tx_rd_index=0; //идем по кругу
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e7e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e88:	d10a      	bne.n	8003ea0 <USART3_IRQHandler+0x224>
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <USART3_IRQHandler+0x234>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e92:	e005      	b.n	8003ea0 <USART3_IRQHandler+0x224>
	    	USART3->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <USART3_IRQHandler+0x22c>)
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9e:	60d3      	str	r3, [r2, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	200009b8 	.word	0x200009b8
 8003eb0:	20000554 	.word	0x20000554
 8003eb4:	200000f4 	.word	0x200000f4

08003eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8003ebc:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <TIM7_IRQHandler+0x20>)
 8003ebe:	f7ff fe4a 	bl	8003b56 <LL_TIM_IsActiveFlag_UPDATE>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <TIM7_IRQHandler+0x1a>
	  {
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8003ec8:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <TIM7_IRQHandler+0x20>)
 8003eca:	f7ff fe37 	bl	8003b3c <LL_TIM_ClearFlag_UPDATE>
		TIM7_Callback();
 8003ece:	f7fe ffdf 	bl	8002e90 <TIM7_Callback>
	  }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40001400 	.word	0x40001400

08003edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
#endif /* STM32F105xC */

#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	603b      	str	r3, [r7, #0]
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003efe:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <SystemCoreClockUpdate+0xcc>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d011      	beq.n	8003f32 <SystemCoreClockUpdate+0x4a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d836      	bhi.n	8003f82 <SystemCoreClockUpdate+0x9a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <SystemCoreClockUpdate+0x3a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d004      	beq.n	8003f2a <SystemCoreClockUpdate+0x42>
 8003f20:	e02f      	b.n	8003f82 <SystemCoreClockUpdate+0x9a>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <SystemCoreClockUpdate+0xd4>)
 8003f26:	601a      	str	r2, [r3, #0]
      break;
 8003f28:	e02f      	b.n	8003f8a <SystemCoreClockUpdate+0xa2>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8003f2a:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <SystemCoreClockUpdate+0xd4>)
 8003f2e:	601a      	str	r2, [r3, #0]
      break;
 8003f30:	e02b      	b.n	8003f8a <SystemCoreClockUpdate+0xa2>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <SystemCoreClockUpdate+0xcc>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f3a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <SystemCoreClockUpdate+0xcc>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0c9b      	lsrs	r3, r3, #18
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <SystemCoreClockUpdate+0xd8>)
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f5e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8003f60:	e013      	b.n	8003f8a <SystemCoreClockUpdate+0xa2>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <SystemCoreClockUpdate+0xcc>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	603b      	str	r3, [r7, #0]
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <SystemCoreClockUpdate+0xd4>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f7e:	6013      	str	r3, [r2, #0]
      break;
 8003f80:	e003      	b.n	8003f8a <SystemCoreClockUpdate+0xa2>

    default:
      SystemCoreClock = HSI_VALUE;
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <SystemCoreClockUpdate+0xd4>)
 8003f86:	601a      	str	r2, [r3, #0]
      break;
 8003f88:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <SystemCoreClockUpdate+0xcc>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <SystemCoreClockUpdate+0xdc>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <SystemCoreClockUpdate+0xd0>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	200000cc 	.word	0x200000cc
 8003fbc:	007a1200 	.word	0x007a1200
 8003fc0:	003d0900 	.word	0x003d0900
 8003fc4:	08005b38 	.word	0x08005b38

08003fc8 <LL_USART_IsActiveFlag_TXE>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <LL_USART_EnableIT_TXE>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <putCharInBufferUart2>:
#endif
}


void putCharInBufferUart2(uint8_t c) //вывод данных
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
	//while (bufferUart2.tx_counter >= TX_BUFFER_SIZE); //если буфер переполнен, ждем
	LL_USART_DisableIT_TXE(USART3); //запрещаем прерывание, чтобы оно не мешало менять переменную
 800404e:	481f      	ldr	r0, [pc, #124]	; (80040cc <putCharInBufferUart2+0x88>)
 8004050:	f7ff ffdb 	bl	800400a <LL_USART_DisableIT_TXE>
	bufferUart2.tx_buffer[bufferUart2.tx_wr_index++]=c; //то кладем данные в буфер
 8004054:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <putCharInBufferUart2+0x8c>)
 8004056:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800405a:	b29b      	uxth	r3, r3
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	b291      	uxth	r1, r2
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <putCharInBufferUart2+0x8c>)
 8004062:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8004066:	461a      	mov	r2, r3
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <putCharInBufferUart2+0x8c>)
 800406a:	4413      	add	r3, r2
 800406c:	79fa      	ldrb	r2, [r7, #7]
 800406e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart2.tx_wr_index == TX_BUFFER_SIZE)
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <putCharInBufferUart2+0x8c>)
 8004074:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004078:	b29b      	uxth	r3, r3
 800407a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407e:	d103      	bne.n	8004088 <putCharInBufferUart2+0x44>
		bufferUart2.tx_wr_index=0; //идем по кругу
 8004080:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <putCharInBufferUart2+0x8c>)
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart2.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <putCharInBufferUart2+0x8c>)
 800408a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800408e:	b29b      	uxth	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <putCharInBufferUart2+0x8c>)
 8004096:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart2.tx_buffer_overflow < bufferUart2.tx_counter)
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <putCharInBufferUart2+0x8c>)
 800409c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <putCharInBufferUart2+0x8c>)
 80040a4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d206      	bcs.n	80040bc <putCharInBufferUart2+0x78>
			bufferUart2.tx_buffer_overflow = bufferUart2.tx_counter;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <putCharInBufferUart2+0x8c>)
 80040b0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <putCharInBufferUart2+0x8c>)
 80040b8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	LL_USART_EnableIT_TXE(USART3); //разрешаем прерывание
 80040bc:	4803      	ldr	r0, [pc, #12]	; (80040cc <putCharInBufferUart2+0x88>)
 80040be:	f7ff ff95 	bl	8003fec <LL_USART_EnableIT_TXE>

}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40004800 	.word	0x40004800
 80040d0:	20000554 	.word	0x20000554

080040d4 <putDataInBufferUart2>:
  while (*s != 0)
	  putCharInBufferUart2(*s++);
}

void putDataInBufferUart2(volatile char *s, uint8_t lenght)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
    for (i = 0; i < lenght; i++ )
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e00a      	b.n	80040fc <putDataInBufferUart2+0x28>
    {
	   putCharInBufferUart2(s[i]);
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ffa7 	bl	8004044 <putCharInBufferUart2>
    for (i = 0; i < lenght; i++ )
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3f0      	bcc.n	80040e6 <putDataInBufferUart2+0x12>
    }
    putCharInBufferUart2('\n');
 8004104:	200a      	movs	r0, #10
 8004106:	f7ff ff9d 	bl	8004044 <putCharInBufferUart2>
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <putCharDirectToUart2>:



void putCharDirectToUart2(uint8_t c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3));
 800411e:	bf00      	nop
 8004120:	4808      	ldr	r0, [pc, #32]	; (8004144 <putCharDirectToUart2+0x30>)
 8004122:	f7ff ff51 	bl	8003fc8 <LL_USART_IsActiveFlag_TXE>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f9      	beq.n	8004120 <putCharDirectToUart2+0xc>
	LL_USART_TransmitData8(USART3, c);
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	4619      	mov	r1, r3
 8004130:	4804      	ldr	r0, [pc, #16]	; (8004144 <putCharDirectToUart2+0x30>)
 8004132:	f7ff ff79 	bl	8004028 <LL_USART_TransmitData8>
	c++;
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	3301      	adds	r3, #1
 800413a:	71fb      	strb	r3, [r7, #7]
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40004800 	.word	0x40004800

08004148 <getCharFromBufferUART2>:
  while (*s != 0)
	  putCharDirectToUart2(*s++);
}

uint8_t getCharFromBufferUART2(void) //прием данных
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
	uint8_t data; //переменная для данных
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 800414e:	bf00      	nop
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <getCharFromBufferUART2+0x80>)
 8004152:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02d      	beq.n	80041b8 <getCharFromBufferUART2+0x70>
	data=bufferUart2.rx_buffer[bufferUart2.rx_rd_index++]; //берем данные из буфера
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <getCharFromBufferUART2+0x80>)
 800415e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004162:	b29b      	uxth	r3, r3
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	b291      	uxth	r1, r2
 8004168:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <getCharFromBufferUART2+0x80>)
 800416a:	f8a2 1066 	strh.w	r1, [r2, #102]	; 0x66
 800416e:	461a      	mov	r2, r3
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <getCharFromBufferUART2+0x80>)
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	71fb      	strb	r3, [r7, #7]
	if (bufferUart2.rx_rd_index == RX_BUFFER_SIZE) bufferUart2.rx_rd_index=0; //идем по кругу
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <getCharFromBufferUART2+0x80>)
 8004178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d103      	bne.n	800418a <getCharFromBufferUART2+0x42>
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <getCharFromBufferUART2+0x80>)
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	USART3->CR1 &= ~USART_CR1_RXNEIE;  // Interrupt Disable
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <getCharFromBufferUART2+0x84>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <getCharFromBufferUART2+0x84>)
 8004190:	f023 0320 	bic.w	r3, r3, #32
 8004194:	60d3      	str	r3, [r2, #12]
	--bufferUart2.rx_counter; //чтобы оно не помешало изменить переменную
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <getCharFromBufferUART2+0x80>)
 8004198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <getCharFromBufferUART2+0x80>)
 80041a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	USART3->CR1 |= USART_CR1_RXNEIE;// Interrupt enable
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <getCharFromBufferUART2+0x84>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <getCharFromBufferUART2+0x84>)
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	60d3      	str	r3, [r2, #12]
	return data;
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	e001      	b.n	80041bc <getCharFromBufferUART2+0x74>
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop

}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000554 	.word	0x20000554
 80041cc:	40004800 	.word	0x40004800

080041d0 <printToBufferUART1>:

//UART3===========================================================


void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80041d8:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <printToBufferUART1+0x110>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a40      	ldr	r2, [pc, #256]	; (80042e0 <printToBufferUART1+0x110>)
 80041de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e2:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80041e4:	e037      	b.n	8004256 <printToBufferUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <printToBufferUART1+0x114>)
 80041ee:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80041f2:	b292      	uxth	r2, r2
 80041f4:	1c51      	adds	r1, r2, #1
 80041f6:	b288      	uxth	r0, r1
 80041f8:	493a      	ldr	r1, [pc, #232]	; (80042e4 <printToBufferUART1+0x114>)
 80041fa:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80041fe:	4611      	mov	r1, r2
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <printToBufferUART1+0x114>)
 8004206:	440b      	add	r3, r1
 8004208:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800420c:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <printToBufferUART1+0x114>)
 800420e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004212:	b29b      	uxth	r3, r3
 8004214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004218:	d103      	bne.n	8004222 <printToBufferUART1+0x52>
 800421a:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <printToBufferUART1+0x114>)
 800421c:	2200      	movs	r2, #0
 800421e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <printToBufferUART1+0x114>)
 8004224:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004228:	b29b      	uxth	r3, r3
 800422a:	3301      	adds	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <printToBufferUART1+0x114>)
 8004230:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <printToBufferUART1+0x114>)
 8004236:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800423a:	b29a      	uxth	r2, r3
 800423c:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <printToBufferUART1+0x114>)
 800423e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004242:	b29b      	uxth	r3, r3
 8004244:	429a      	cmp	r2, r3
 8004246:	d206      	bcs.n	8004256 <printToBufferUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <printToBufferUART1+0x114>)
 800424a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800424e:	b29a      	uxth	r2, r3
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <printToBufferUART1+0x114>)
 8004252:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1c2      	bne.n	80041e6 <printToBufferUART1+0x16>
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <printToBufferUART1+0x114>)
 8004262:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004266:	b29b      	uxth	r3, r3
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	b291      	uxth	r1, r2
 800426c:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <printToBufferUART1+0x114>)
 800426e:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8004272:	461a      	mov	r2, r3
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <printToBufferUART1+0x114>)
 8004276:	4413      	add	r3, r2
 8004278:	220a      	movs	r2, #10
 800427a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <printToBufferUART1+0x114>)
 8004280:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004284:	b29b      	uxth	r3, r3
 8004286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800428a:	d103      	bne.n	8004294 <printToBufferUART1+0xc4>
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <printToBufferUART1+0x114>)
 800428e:	2200      	movs	r2, #0
 8004290:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <printToBufferUART1+0x114>)
 8004296:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800429a:	b29b      	uxth	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <printToBufferUART1+0x114>)
 80042a2:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <printToBufferUART1+0x114>)
 80042a8:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <printToBufferUART1+0x114>)
 80042b0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d206      	bcs.n	80042c8 <printToBufferUART1+0xf8>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <printToBufferUART1+0x114>)
 80042bc:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <printToBufferUART1+0x114>)
 80042c4:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <printToBufferUART1+0x110>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <printToBufferUART1+0x110>)
 80042ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40013800 	.word	0x40013800
 80042e4:	200000f8 	.word	0x200000f8

080042e8 <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <printToBufferWithoutEndUART1+0xa8>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <printToBufferWithoutEndUART1+0xa8>)
 80042f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fa:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80042fc:	e037      	b.n	800436e <printToBufferWithoutEndUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	4a23      	ldr	r2, [pc, #140]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004306:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 800430a:	b292      	uxth	r2, r2
 800430c:	1c51      	adds	r1, r2, #1
 800430e:	b288      	uxth	r0, r1
 8004310:	4920      	ldr	r1, [pc, #128]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004312:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8004316:	4611      	mov	r1, r2
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 800431e:	440b      	add	r3, r1
 8004320:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004326:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800432a:	b29b      	uxth	r3, r3
 800432c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004330:	d103      	bne.n	800433a <printToBufferWithoutEndUART1+0x52>
 8004332:	4b18      	ldr	r3, [pc, #96]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004334:	2200      	movs	r2, #0
 8004336:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 800433c:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004340:	b29b      	uxth	r3, r3
 8004342:	3301      	adds	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004348:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 800434e:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004352:	b29a      	uxth	r2, r3
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004356:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800435a:	b29b      	uxth	r3, r3
 800435c:	429a      	cmp	r2, r3
 800435e:	d206      	bcs.n	800436e <printToBufferWithoutEndUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 8004362:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004366:	b29a      	uxth	r2, r3
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <printToBufferWithoutEndUART1+0xac>)
 800436a:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1c2      	bne.n	80042fe <printToBufferWithoutEndUART1+0x16>
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <printToBufferWithoutEndUART1+0xa8>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <printToBufferWithoutEndUART1+0xa8>)
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40013800 	.word	0x40013800
 8004394:	200000f8 	.word	0x200000f8

08004398 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
	char *str1;
	if (koma == 0)
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <printToBufferUART1D+0x22>
		str1 = itoa(value);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc fd51 	bl	8000e58 <itoa>
 80043b6:	6178      	str	r0, [r7, #20]
 80043b8:	e007      	b.n	80043ca <printToBufferUART1D+0x32>
	else
		str1 = itoa_koma(value,koma);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	79fa      	ldrb	r2, [r7, #7]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc fdbe 	bl	8000f44 <itoa_koma>
 80043c8:	6178      	str	r0, [r7, #20]

	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80043ca:	4b5f      	ldr	r3, [pc, #380]	; (8004548 <printToBufferUART1D+0x1b0>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <printToBufferUART1D+0x1b0>)
 80043d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d4:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80043d6:	e037      	b.n	8004448 <printToBufferUART1D+0xb0>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	4a5b      	ldr	r2, [pc, #364]	; (800454c <printToBufferUART1D+0x1b4>)
 80043e0:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80043e4:	b292      	uxth	r2, r2
 80043e6:	1c51      	adds	r1, r2, #1
 80043e8:	b288      	uxth	r0, r1
 80043ea:	4958      	ldr	r1, [pc, #352]	; (800454c <printToBufferUART1D+0x1b4>)
 80043ec:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80043f0:	4611      	mov	r1, r2
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b55      	ldr	r3, [pc, #340]	; (800454c <printToBufferUART1D+0x1b4>)
 80043f8:	440b      	add	r3, r1
 80043fa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80043fe:	4b53      	ldr	r3, [pc, #332]	; (800454c <printToBufferUART1D+0x1b4>)
 8004400:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004404:	b29b      	uxth	r3, r3
 8004406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800440a:	d103      	bne.n	8004414 <printToBufferUART1D+0x7c>
 800440c:	4b4f      	ldr	r3, [pc, #316]	; (800454c <printToBufferUART1D+0x1b4>)
 800440e:	2200      	movs	r2, #0
 8004410:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004414:	4b4d      	ldr	r3, [pc, #308]	; (800454c <printToBufferUART1D+0x1b4>)
 8004416:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800441a:	b29b      	uxth	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	4b4a      	ldr	r3, [pc, #296]	; (800454c <printToBufferUART1D+0x1b4>)
 8004422:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004426:	4b49      	ldr	r3, [pc, #292]	; (800454c <printToBufferUART1D+0x1b4>)
 8004428:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800442c:	b29a      	uxth	r2, r3
 800442e:	4b47      	ldr	r3, [pc, #284]	; (800454c <printToBufferUART1D+0x1b4>)
 8004430:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004434:	b29b      	uxth	r3, r3
 8004436:	429a      	cmp	r2, r3
 8004438:	d206      	bcs.n	8004448 <printToBufferUART1D+0xb0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800443a:	4b44      	ldr	r3, [pc, #272]	; (800454c <printToBufferUART1D+0x1b4>)
 800443c:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004440:	b29a      	uxth	r2, r3
 8004442:	4b42      	ldr	r3, [pc, #264]	; (800454c <printToBufferUART1D+0x1b4>)
 8004444:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1c2      	bne.n	80043d8 <printToBufferUART1D+0x40>
		#endif

	}

	while (*str1 != 0)
 8004452:	e036      	b.n	80044c2 <printToBufferUART1D+0x12a>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	617a      	str	r2, [r7, #20]
 800445a:	4a3c      	ldr	r2, [pc, #240]	; (800454c <printToBufferUART1D+0x1b4>)
 800445c:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8004460:	b292      	uxth	r2, r2
 8004462:	1c51      	adds	r1, r2, #1
 8004464:	b288      	uxth	r0, r1
 8004466:	4939      	ldr	r1, [pc, #228]	; (800454c <printToBufferUART1D+0x1b4>)
 8004468:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 800446c:	4611      	mov	r1, r2
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <printToBufferUART1D+0x1b4>)
 8004472:	440b      	add	r3, r1
 8004474:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004478:	4b34      	ldr	r3, [pc, #208]	; (800454c <printToBufferUART1D+0x1b4>)
 800447a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800447e:	b29b      	uxth	r3, r3
 8004480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004484:	d103      	bne.n	800448e <printToBufferUART1D+0xf6>
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <printToBufferUART1D+0x1b4>)
 8004488:	2200      	movs	r2, #0
 800448a:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <printToBufferUART1D+0x1b4>)
 8004490:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004494:	b29b      	uxth	r3, r3
 8004496:	3301      	adds	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b2c      	ldr	r3, [pc, #176]	; (800454c <printToBufferUART1D+0x1b4>)
 800449c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <printToBufferUART1D+0x1b4>)
 80044a2:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	4b28      	ldr	r3, [pc, #160]	; (800454c <printToBufferUART1D+0x1b4>)
 80044aa:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d206      	bcs.n	80044c2 <printToBufferUART1D+0x12a>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <printToBufferUART1D+0x1b4>)
 80044b6:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	4b23      	ldr	r3, [pc, #140]	; (800454c <printToBufferUART1D+0x1b4>)
 80044be:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str1 != 0)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1c4      	bne.n	8004454 <printToBufferUART1D+0xbc>
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <printToBufferUART1D+0x1b4>)
 80044cc:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	b291      	uxth	r1, r2
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <printToBufferUART1D+0x1b4>)
 80044d8:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 80044dc:	461a      	mov	r2, r3
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <printToBufferUART1D+0x1b4>)
 80044e0:	4413      	add	r3, r2
 80044e2:	220a      	movs	r2, #10
 80044e4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <printToBufferUART1D+0x1b4>)
 80044ea:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f4:	d103      	bne.n	80044fe <printToBufferUART1D+0x166>
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <printToBufferUART1D+0x1b4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <printToBufferUART1D+0x1b4>)
 8004500:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004504:	b29b      	uxth	r3, r3
 8004506:	3301      	adds	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <printToBufferUART1D+0x1b4>)
 800450c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <printToBufferUART1D+0x1b4>)
 8004512:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004516:	b29a      	uxth	r2, r3
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <printToBufferUART1D+0x1b4>)
 800451a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800451e:	b29b      	uxth	r3, r3
 8004520:	429a      	cmp	r2, r3
 8004522:	d206      	bcs.n	8004532 <printToBufferUART1D+0x19a>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <printToBufferUART1D+0x1b4>)
 8004526:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800452a:	b29a      	uxth	r2, r3
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <printToBufferUART1D+0x1b4>)
 800452e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <printToBufferUART1D+0x1b0>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a04      	ldr	r2, [pc, #16]	; (8004548 <printToBufferUART1D+0x1b0>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	60d3      	str	r3, [r2, #12]
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40013800 	.word	0x40013800
 800454c:	200000f8 	.word	0x200000f8

08004550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004550:	480c      	ldr	r0, [pc, #48]	; (8004584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004552:	490d      	ldr	r1, [pc, #52]	; (8004588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004558:	e002      	b.n	8004560 <LoopCopyDataInit>

0800455a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800455c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800455e:	3304      	adds	r3, #4

08004560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004564:	d3f9      	bcc.n	800455a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004568:	4c0a      	ldr	r4, [pc, #40]	; (8004594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800456c:	e001      	b.n	8004572 <LoopFillZerobss>

0800456e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800456e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004570:	3204      	adds	r2, #4

08004572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004574:	d3fb      	bcc.n	800456e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004576:	f7ff fcb1 	bl	8003edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800457a:	f000 fd35 	bl	8004fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800457e:	f7fe fd2b 	bl	8002fd8 <main>
  bx lr
 8004582:	4770      	bx	lr
  ldr r0, =_sdata
 8004584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004588:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800458c:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8004590:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004594:	20000e54 	.word	0x20000e54

08004598 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004598:	e7fe      	b.n	8004598 <ADC1_IRQHandler>

0800459a <LL_ADC_REG_SetSequencerLength>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <LL_ADC_IsEnabled>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ffe4 	bl	80045be <LL_ADC_IsEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d112      	bne.n	8004622 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e001      	b.n	8004626 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ffbd 	bl	80045be <LL_ADC_IsEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d131      	bne.n	80046ae <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	430b      	orrs	r3, r1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e008      	b.n	800467e <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	4311      	orrs	r1, r2
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	6912      	ldr	r2, [r2, #16]
 8004698:	430a      	orrs	r2, r1
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff77 	bl	800459a <LL_ADC_REG_SetSequencerLength>
 80046ac:	e001      	b.n	80046b2 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <LL_GPIO_SetPinMode>:
{
 80046bc:	b490      	push	{r4, r7}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	4413      	add	r3, r2
 80046d2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	613b      	str	r3, [r7, #16]
  return result;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	210f      	movs	r1, #15
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	401a      	ands	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	61bb      	str	r3, [r7, #24]
  return result;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	6023      	str	r3, [r4, #0]
}
 8004716:	bf00      	nop
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bc90      	pop	{r4, r7}
 800471e:	4770      	bx	lr

08004720 <LL_GPIO_SetPinSpeed>:
{
 8004720:	b490      	push	{r4, r7}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	461a      	mov	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	0e1b      	lsrs	r3, r3, #24
 8004734:	4413      	add	r3, r2
 8004736:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	613b      	str	r3, [r7, #16]
  return result;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	2103      	movs	r1, #3
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	401a      	ands	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	61bb      	str	r3, [r7, #24]
  return result;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	4313      	orrs	r3, r2
 8004778:	6023      	str	r3, [r4, #0]
}
 800477a:	bf00      	nop
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bc90      	pop	{r4, r7}
 8004782:	4770      	bx	lr

08004784 <LL_GPIO_SetPinOutputType>:
{
 8004784:	b490      	push	{r4, r7}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0e1b      	lsrs	r3, r3, #24
 8004798:	4413      	add	r3, r2
 800479a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	613b      	str	r3, [r7, #16]
  return result;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	2104      	movs	r1, #4
 80047b6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	401a      	ands	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	61bb      	str	r3, [r7, #24]
  return result;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	6023      	str	r3, [r4, #0]
}
 80047de:	bf00      	nop
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc90      	pop	{r4, r7}
 80047e6:	4770      	bx	lr

080047e8 <LL_GPIO_SetPinPull>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	613b      	str	r3, [r7, #16]
  return result;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	408b      	lsls	r3, r1
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	60da      	str	r2, [r3, #12]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	60fb      	str	r3, [r7, #12]
  return result;
 800484c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800484e:	fab3 f383 	clz	r3, r3
 8004852:	b2db      	uxtb	r3, r3
 8004854:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004856:	e044      	b.n	80048e2 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	409a      	lsls	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d03a      	beq.n	80048dc <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b07      	cmp	r3, #7
 800486a:	d806      	bhi.n	800487a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800486c:	f240 1201 	movw	r2, #257	; 0x101
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e008      	b.n	800488c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3b08      	subs	r3, #8
 800487e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800488a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d106      	bne.n	80048a2 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	461a      	mov	r2, r3
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ffa3 	bl	80047e8 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ff06 	bl	80046bc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d003      	beq.n	80048c0 <LL_GPIO_Init+0x94>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d10d      	bne.n	80048dc <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	461a      	mov	r2, r3
 80048c6:	69b9      	ldr	r1, [r7, #24]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff29 	bl	8004720 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff54 	bl	8004784 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1b4      	bne.n	8004858 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <LL_RCC_GetSysClkSource>:
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <LL_RCC_GetSysClkSource+0x14>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 030c 	and.w	r3, r3, #12
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	40021000 	.word	0x40021000

08004910 <LL_RCC_GetAHBPrescaler>:
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <LL_RCC_GetAHBPrescaler+0x14>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40021000 	.word	0x40021000

08004928 <LL_RCC_GetAPB1Prescaler>:
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <LL_RCC_GetAPB1Prescaler+0x14>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	40021000 	.word	0x40021000

08004940 <LL_RCC_GetAPB2Prescaler>:
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <LL_RCC_GetAPB2Prescaler+0x14>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	40021000 	.word	0x40021000

08004958 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <LL_RCC_PLL_GetMainSource+0x14>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40021000 	.word	0x40021000

08004970 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40021000 	.word	0x40021000

08004988 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <LL_RCC_PLL_GetPrediv+0x14>)
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40021000 	.word	0x40021000

080049a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80049a8:	f000 f820 	bl	80049ec <RCC_GetSystemClockFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f83e 	bl	8004a38 <RCC_GetHCLKClockFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f84c 	bl	8004a64 <RCC_GetPCLK1ClockFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f858 	bl	8004a8c <RCC_GetPCLK2ClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80049f6:	f7ff ff7f 	bl	80048f8 <LL_RCC_GetSysClkSource>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d00c      	beq.n	8004a1a <RCC_GetSystemClockFreq+0x2e>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d80e      	bhi.n	8004a22 <RCC_GetSystemClockFreq+0x36>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <RCC_GetSystemClockFreq+0x22>
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d003      	beq.n	8004a14 <RCC_GetSystemClockFreq+0x28>
 8004a0c:	e009      	b.n	8004a22 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <RCC_GetSystemClockFreq+0x48>)
 8004a10:	607b      	str	r3, [r7, #4]
      break;
 8004a12:	e009      	b.n	8004a28 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004a14:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <RCC_GetSystemClockFreq+0x48>)
 8004a16:	607b      	str	r3, [r7, #4]
      break;
 8004a18:	e006      	b.n	8004a28 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004a1a:	f000 f84b 	bl	8004ab4 <RCC_PLL_GetFreqDomain_SYS>
 8004a1e:	6078      	str	r0, [r7, #4]
      break;
 8004a20:	e002      	b.n	8004a28 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <RCC_GetSystemClockFreq+0x48>)
 8004a24:	607b      	str	r3, [r7, #4]
      break;
 8004a26:	bf00      	nop
  }

  return frequency;
 8004a28:	687b      	ldr	r3, [r7, #4]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	007a1200 	.word	0x007a1200

08004a38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004a40:	f7ff ff66 	bl	8004910 <LL_RCC_GetAHBPrescaler>
 8004a44:	4603      	mov	r3, r0
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <RCC_GetHCLKClockFreq+0x28>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	40d3      	lsrs	r3, r2
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08005b38 	.word	0x08005b38

08004a64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004a6c:	f7ff ff5c 	bl	8004928 <LL_RCC_GetAPB1Prescaler>
 8004a70:	4603      	mov	r3, r0
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <RCC_GetPCLK1ClockFreq+0x24>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	40d3      	lsrs	r3, r2
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08005b48 	.word	0x08005b48

08004a8c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004a94:	f7ff ff54 	bl	8004940 <LL_RCC_GetAPB2Prescaler>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	0adb      	lsrs	r3, r3, #11
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a9e:	5cd3      	ldrb	r3, [r2, r3]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	40d3      	lsrs	r3, r2
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	08005b48 	.word	0x08005b48

08004ab4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ac2:	f7ff ff49 	bl	8004958 <LL_RCC_PLL_GetMainSource>
 8004ac6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d003      	beq.n	8004ade <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004ad6:	e00b      	b.n	8004af0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004ada:	607b      	str	r3, [r7, #4]
      break;
 8004adc:	e00b      	b.n	8004af6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004ade:	f7ff ff53 	bl	8004988 <LL_RCC_PLL_GetPrediv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	607b      	str	r3, [r7, #4]
      break;
 8004aee:	e002      	b.n	8004af6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004af2:	607b      	str	r3, [r7, #4]
      break;
 8004af4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004af6:	f7ff ff3b 	bl	8004970 <LL_RCC_PLL_GetMultiplicator>
 8004afa:	4603      	mov	r3, r0
 8004afc:	0c9b      	lsrs	r3, r3, #18
 8004afe:	3302      	adds	r3, #2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	003d0900 	.word	0x003d0900
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <LL_TIM_SetPrescaler>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <LL_TIM_SetAutoReload>:
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <LL_TIM_SetRepetitionCounter>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <LL_TIM_Init+0x108>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00f      	beq.n	8004bbc <LL_TIM_Init+0x38>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba2:	d00b      	beq.n	8004bbc <LL_TIM_Init+0x38>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3a      	ldr	r2, [pc, #232]	; (8004c90 <LL_TIM_Init+0x10c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <LL_TIM_Init+0x38>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a39      	ldr	r2, [pc, #228]	; (8004c94 <LL_TIM_Init+0x110>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <LL_TIM_Init+0x38>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <LL_TIM_Init+0x114>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d106      	bne.n	8004bca <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2f      	ldr	r2, [pc, #188]	; (8004c8c <LL_TIM_Init+0x108>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d027      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd8:	d023      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <LL_TIM_Init+0x10c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2b      	ldr	r2, [pc, #172]	; (8004c94 <LL_TIM_Init+0x110>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <LL_TIM_Init+0x114>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d017      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <LL_TIM_Init+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <LL_TIM_Init+0x11c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <LL_TIM_Init+0x120>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <LL_TIM_Init+0x124>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a25      	ldr	r2, [pc, #148]	; (8004cac <LL_TIM_Init+0x128>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <LL_TIM_Init+0x9e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <LL_TIM_Init+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d106      	bne.n	8004c30 <LL_TIM_Init+0xac>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff78 	bl	8004b32 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff65 	bl	8004b18 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <LL_TIM_Init+0x108>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <LL_TIM_Init+0xea>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <LL_TIM_Init+0x124>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <LL_TIM_Init+0xea>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a12      	ldr	r2, [pc, #72]	; (8004cac <LL_TIM_Init+0x128>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <LL_TIM_Init+0xea>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <LL_TIM_Init+0x12c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d105      	bne.n	8004c7a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff69 	bl	8004b4c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff73 	bl	8004b66 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40001800 	.word	0x40001800
 8004ca0:	40001c00 	.word	0x40001c00
 8004ca4:	40002000 	.word	0x40002000
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <LL_USART_IsEnabled>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <LL_USART_SetStopBitsLength>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	611a      	str	r2, [r3, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <LL_USART_SetHWFlowCtrl>:
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	615a      	str	r2, [r3, #20]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
	...

08004d24 <LL_USART_SetBaudRate>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d38:	d152      	bne.n	8004de0 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009a      	lsls	r2, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	4a4f      	ldr	r2, [pc, #316]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009a      	lsls	r2, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d70:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004d72:	fba3 0302 	umull	r0, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2064      	movs	r0, #100	; 0x64
 8004d7a:	fb00 f303 	mul.w	r3, r0, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	3332      	adds	r3, #50	; 0x32
 8004d84:	4a41      	ldr	r2, [pc, #260]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	440b      	add	r3, r1
 8004d9a:	b299      	uxth	r1, r3
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009a      	lsls	r2, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004db2:	fba3 0302 	umull	r0, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2064      	movs	r0, #100	; 0x64
 8004dba:	fb00 f303 	mul.w	r3, r0, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	3332      	adds	r3, #50	; 0x32
 8004dc4:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	609a      	str	r2, [r3, #8]
}
 8004dde:	e04f      	b.n	8004e80 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009a      	lsls	r2, r3, #2
 8004dea:	441a      	add	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	b299      	uxth	r1, r3
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004e18:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2064      	movs	r0, #100	; 0x64
 8004e20:	fb00 f303 	mul.w	r3, r0, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	3332      	adds	r3, #50	; 0x32
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	b299      	uxth	r1, r3
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009a      	lsls	r2, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004e54:	fba3 0302 	umull	r0, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2064      	movs	r0, #100	; 0x64
 8004e5c:	fb00 f303 	mul.w	r3, r0, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	3332      	adds	r3, #50	; 0x32
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <LL_USART_SetBaudRate+0x168>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	440b      	add	r3, r1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	51eb851f 	.word	0x51eb851f

08004e90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff06 	bl	8004cb4 <LL_USART_IsEnabled>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d157      	bne.n	8004f5e <LL_USART_Init+0xce>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004eb6:	f023 030c 	bic.w	r3, r3, #12
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	6851      	ldr	r1, [r2, #4]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68d2      	ldr	r2, [r2, #12]
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	6912      	ldr	r2, [r2, #16]
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	6992      	ldr	r2, [r2, #24]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fefc 	bl	8004cda <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff08 	bl	8004cfe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd54 	bl	80049a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <LL_USART_Init+0xd8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d102      	bne.n	8004f06 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e01a      	b.n	8004f3c <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <LL_USART_Init+0xdc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d102      	bne.n	8004f14 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e013      	b.n	8004f3c <LL_USART_Init+0xac>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <LL_USART_Init+0xe0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d102      	bne.n	8004f22 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00c      	b.n	8004f3c <LL_USART_Init+0xac>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <LL_USART_Init+0xe4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d102      	bne.n	8004f30 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e005      	b.n	8004f3c <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <LL_USART_Init+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fee3 	bl	8004d24 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000

08004f7c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	4a07      	ldr	r2, [pc, #28]	; (8004fac <LL_InitTick+0x30>)
 8004f90:	3b01      	subs	r3, #1
 8004f92:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <LL_InitTick+0x30>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <LL_InitTick+0x30>)
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000e010 	.word	0xe000e010

08004fb0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004fb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffdd 	bl	8004f7c <LL_InitTick>
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004fd4:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <LL_SetSystemCoreClock+0x18>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	200000cc 	.word	0x200000cc

08004fe8 <__libc_init_array>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	2600      	movs	r6, #0
 8004fec:	4d0c      	ldr	r5, [pc, #48]	; (8005020 <__libc_init_array+0x38>)
 8004fee:	4c0d      	ldr	r4, [pc, #52]	; (8005024 <__libc_init_array+0x3c>)
 8004ff0:	1b64      	subs	r4, r4, r5
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	42a6      	cmp	r6, r4
 8004ff6:	d109      	bne.n	800500c <__libc_init_array+0x24>
 8004ff8:	f000 f828 	bl	800504c <_init>
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	4d0a      	ldr	r5, [pc, #40]	; (8005028 <__libc_init_array+0x40>)
 8005000:	4c0a      	ldr	r4, [pc, #40]	; (800502c <__libc_init_array+0x44>)
 8005002:	1b64      	subs	r4, r4, r5
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	42a6      	cmp	r6, r4
 8005008:	d105      	bne.n	8005016 <__libc_init_array+0x2e>
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005010:	4798      	blx	r3
 8005012:	3601      	adds	r6, #1
 8005014:	e7ee      	b.n	8004ff4 <__libc_init_array+0xc>
 8005016:	f855 3b04 	ldr.w	r3, [r5], #4
 800501a:	4798      	blx	r3
 800501c:	3601      	adds	r6, #1
 800501e:	e7f2      	b.n	8005006 <__libc_init_array+0x1e>
 8005020:	08005b50 	.word	0x08005b50
 8005024:	08005b50 	.word	0x08005b50
 8005028:	08005b50 	.word	0x08005b50
 800502c:	08005b54 	.word	0x08005b54

08005030 <memcpy>:
 8005030:	440a      	add	r2, r1
 8005032:	4291      	cmp	r1, r2
 8005034:	f100 33ff 	add.w	r3, r0, #4294967295
 8005038:	d100      	bne.n	800503c <memcpy+0xc>
 800503a:	4770      	bx	lr
 800503c:	b510      	push	{r4, lr}
 800503e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005042:	4291      	cmp	r1, r2
 8005044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005048:	d1f9      	bne.n	800503e <memcpy+0xe>
 800504a:	bd10      	pop	{r4, pc}

0800504c <_init>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr

08005058 <_fini>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr
