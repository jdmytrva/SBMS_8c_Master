
SBMS_8c_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c74  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800493c  0800493c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800493c  0800493c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08004944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  200000d0  08004a14  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  08004a14  00020dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a21b  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4b  00000000  00000000  0002a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d680  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ab9  00000000  00000000  0003ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c422  00000000  00000000  000437a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008fbc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  0008fc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000d0 	.word	0x200000d0
 8000200:	00000000 	.word	0x00000000
 8000204:	08003e40 	.word	0x08003e40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000d4 	.word	0x200000d4
 8000220:	08003e40 	.word	0x08003e40

08000224 <flash_erase_page>:
{
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	while (FLASH->SR & FLASH_SR_BSY);
 800022c:	bf00      	nop
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <flash_erase_page+0x70>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <flash_erase_page+0xa>

		if (FLASH->SR & FLASH_SR_EOP) {
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <flash_erase_page+0x70>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <flash_erase_page+0x28>
			FLASH->SR = FLASH_SR_EOP;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <flash_erase_page+0x70>)
 8000248:	2220      	movs	r2, #32
 800024a:	60da      	str	r2, [r3, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <flash_erase_page+0x70>)
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <flash_erase_page+0x70>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6113      	str	r3, [r2, #16]
		FLASH->AR = address;
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <flash_erase_page+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <flash_erase_page+0x70>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <flash_erase_page+0x70>)
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6113      	str	r3, [r2, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 800026a:	bf00      	nop
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <flash_erase_page+0x70>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <flash_erase_page+0x48>
		FLASH->SR = FLASH_SR_EOP;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <flash_erase_page+0x70>)
 800027a:	2220      	movs	r2, #32
 800027c:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <flash_erase_page+0x70>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4a04      	ldr	r2, [pc, #16]	; (8000294 <flash_erase_page+0x70>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6113      	str	r3, [r2, #16]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40022000 	.word	0x40022000

08000298 <flash_unlock>:


void flash_unlock(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY_1;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <flash_unlock+0x18>)
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <flash_unlock+0x1c>)
 80002a0:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY_2;
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <flash_unlock+0x18>)
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <flash_unlock+0x20>)
 80002a6:	605a      	str	r2, [r3, #4]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40022000 	.word	0x40022000
 80002b4:	45670123 	.word	0x45670123
 80002b8:	cdef89ab 	.word	0xcdef89ab

080002bc <flash_lock>:

void flash_lock()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <flash_lock+0x18>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <flash_lock+0x18>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6113      	str	r3, [r2, #16]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40022000 	.word	0x40022000

080002d8 <flash_write>:



void flash_write(uint32_t address,uint32_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]


	while (FLASH->SR & FLASH_SR_BSY);
 80002e2:	bf00      	nop
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <flash_write+0x90>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <flash_write+0xc>
	if (FLASH->SR & FLASH_SR_EOP) {
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <flash_write+0x90>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <flash_write+0x2a>
		FLASH->SR = FLASH_SR_EOP;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <flash_write+0x90>)
 80002fe:	2220      	movs	r2, #32
 8000300:	60da      	str	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <flash_write+0x90>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <flash_write+0x90>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	b292      	uxth	r2, r2
 8000314:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000316:	bf00      	nop
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <flash_write+0x90>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <flash_write+0x40>
    		FLASH->SR = FLASH_SR_EOP;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <flash_write+0x90>)
 8000326:	2220      	movs	r2, #32
 8000328:	60da      	str	r2, [r3, #12]


	address+=2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3302      	adds	r3, #2
 800032e:	607b      	str	r3, [r7, #4]
	data>>=16;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	603b      	str	r3, [r7, #0]
    *(__IO uint16_t*)address = (uint16_t)data;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	b292      	uxth	r2, r2
 800033c:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800033e:	bf00      	nop
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <flash_write+0x90>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <flash_write+0x68>
    		FLASH->SR = FLASH_SR_EOP;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <flash_write+0x90>)
 800034e:	2220      	movs	r2, #32
 8000350:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <flash_write+0x90>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <flash_write+0x90>)
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	6113      	str	r3, [r2, #16]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000

0800036c <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
uint8_t flash_write_block()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
	__disable_irq();
	flash_unlock();
 8000376:	f7ff ff8f 	bl	8000298 <flash_unlock>
	uint32_t i=0;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <flash_write_block+0x8c>)
 8000380:	60bb      	str	r3, [r7, #8]
	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000382:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8000386:	607b      	str	r3, [r7, #4]
	uint32_t *source_adr = (void *)&LoggingData;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <flash_write_block+0x90>)
 800038a:	603b      	str	r3, [r7, #0]

	logDebugD("size: ",size,0);
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <flash_write_block+0x94>)
 800038e:	f002 fea5 	bl	80030dc <printToBufferWithoutEndUART1>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <flash_write_block+0x98>)
 800039a:	f002 fef7 	bl	800318c <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <flash_write_block+0x94>)
 80003a0:	f002 fe9c 	bl	80030dc <printToBufferWithoutEndUART1>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <flash_write_block+0x9c>)
 80003ae:	f002 feed 	bl	800318c <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80003b2:	68b8      	ldr	r0, [r7, #8]
 80003b4:	f7ff ff36 	bl	8000224 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e00e      	b.n	80003dc <flash_write_block+0x70>
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	009a      	lsls	r2, r3, #2
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	18d0      	adds	r0, r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f7ff ff81 	bl	80002d8 <flash_write>
	for (i = 0; i < size/4; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d3eb      	bcc.n	80003be <flash_write_block+0x52>
    }

	flash_lock();
 80003e6:	f7ff ff69 	bl	80002bc <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ea:	b662      	cpsie	i
}
 80003ec:	bf00      	nop
	__enable_irq();
	return 1;
 80003ee:	2301      	movs	r3, #1
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	0801e400 	.word	0x0801e400
 80003fc:	20000b58 	.word	0x20000b58
 8000400:	08003e58 	.word	0x08003e58
 8000404:	08003e60 	.word	0x08003e60
 8000408:	08003e68 	.word	0x08003e68

0800040c <flash_read_block>:
uint8_t flash_read_block()
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]


	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000416:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800041a:	60bb      	str	r3, [r7, #8]
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <flash_read_block+0x50>)
 800041e:	607b      	str	r3, [r7, #4]
	uint32_t *dest_adr = (void *)&LoggingData;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <flash_read_block+0x54>)
 8000422:	603b      	str	r3, [r7, #0]

	for (i=0; i < size/4; ++i)
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	e00c      	b.n	8000444 <flash_read_block+0x38>
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	6839      	ldr	r1, [r7, #0]
 8000438:	440b      	add	r3, r1
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	601a      	str	r2, [r3, #0]
	for (i=0; i < size/4; ++i)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ed      	bcc.n	800042a <flash_read_block+0x1e>
	}

	return 1;
 800044e:	2301      	movs	r3, #1

}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	0801e400 	.word	0x0801e400
 8000460:	20000b58 	.word	0x20000b58

08000464 <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	617b      	str	r3, [r7, #20]
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d305      	bcc.n	800048a <flash_read+0x26>
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d801      	bhi.n	800048a <flash_read+0x26>
	{
		return EEpromValue;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	e01d      	b.n	80004c6 <flash_read+0x62>
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <flash_read+0x6c>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <flash_read+0x70>)
 8000492:	f002 fe23 	bl	80030dc <printToBufferWithoutEndUART1>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <flash_read+0x74>)
 800049e:	f002 fe75 	bl	800318c <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <flash_read+0x70>)
 80004a4:	f002 fe1a 	bl	80030dc <printToBufferWithoutEndUART1>
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <flash_read+0x78>)
 80004b0:	f002 fe6c 	bl	800318c <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <flash_read+0x70>)
 80004b6:	f002 fe11 	bl	80030dc <printToBufferWithoutEndUART1>
 80004ba:	2200      	movs	r2, #0
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <flash_read+0x7c>)
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <flash_read+0x80>)
 80004c0:	f002 fe64 	bl	800318c <printToBufferUART1D>
		return MinValue;
 80004c4:	68bb      	ldr	r3, [r7, #8]
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	08003e58 	.word	0x08003e58
 80004d8:	08003e70 	.word	0x08003e70
 80004dc:	08003e88 	.word	0x08003e88
 80004e0:	0801ec00 	.word	0x0801ec00
 80004e4:	08003e9c 	.word	0x08003e9c

080004e8 <CalibrationReadFromFlash>:
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage6_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage6);
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage7_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage7);
	logDebug("CalibrationFactoryWriteToFlash ");
}
void CalibrationReadFromFlash(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ec:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffb4 	bl	8000464 <flash_read>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a36      	ldr	r2, [pc, #216]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000500:	6013      	str	r3, [r2, #0]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,1,1000);
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffa9 	bl	8000464 <flash_read>
 8000512:	4603      	mov	r3, r0
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000516:	6093      	str	r3, [r2, #8]
	CalibrationData.CalibrationValueForCurrent2 = flash_read(CalibrationData.CalibrationValueForCurrent2_AddresInEEprom,1,1000);
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff9e 	bl	8000464 <flash_read>
 8000528:	4603      	mov	r3, r0
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800052c:	6113      	str	r3, [r2, #16]
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,1,1000);
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff93 	bl	8000464 <flash_read>
 800053e:	4603      	mov	r3, r0
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000542:	6193      	str	r3, [r2, #24]
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,1,1000);
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff88 	bl	8000464 <flash_read>
 8000554:	4603      	mov	r3, r0
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000558:	6213      	str	r3, [r2, #32]
	CalibrationData.CalibrationValueForVoltage3 = flash_read(CalibrationData.CalibrationValueForVoltage3_AddresInEEprom,1,1000);
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff7d 	bl	8000464 <flash_read>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800056e:	6293      	str	r3, [r2, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage4 = flash_read(CalibrationData.CalibrationValueForVoltage4_AddresInEEprom,1,1000);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff72 	bl	8000464 <flash_read>
 8000580:	4603      	mov	r3, r0
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage5 = flash_read(CalibrationData.CalibrationValueForVoltage5_AddresInEEprom,1,1000);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff67 	bl	8000464 <flash_read>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059a:	6393      	str	r3, [r2, #56]	; 0x38
	CalibrationData.CalibrationValueForVoltage6 = flash_read(CalibrationData.CalibrationValueForVoltage6_AddresInEEprom,1,1000);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff5c 	bl	8000464 <flash_read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
	CalibrationData.CalibrationValueForVoltage7 = flash_read(CalibrationData.CalibrationValueForVoltage7_AddresInEEprom,1,1000);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff51 	bl	8000464 <flash_read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005c6:	6493      	str	r3, [r2, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <CalibrationReadFromFlash+0xf4>)
 80005ca:	f002 fd87 	bl	80030dc <printToBufferWithoutEndUART1>
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <CalibrationReadFromFlash+0xf8>)
 80005d0:	f002 fcf8 	bl	8002fc4 <printToBufferUART1>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000004 	.word	0x20000004
 80005dc:	08003e58 	.word	0x08003e58
 80005e0:	08004158 	.word	0x08004158

080005e4 <SettingsReadFromFlash>:
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
	logDebug("SettingsFactoryWriteToFlash ");
}
void SettingsReadFromFlash(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff36 	bl	8000464 <flash_read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005fc:	6013      	str	r3, [r2, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	220a      	movs	r2, #10
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff2c 	bl	8000464 <flash_read>
 800060c:	4603      	mov	r3, r0
 800060e:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000610:	6093      	str	r3, [r2, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff21 	bl	8000464 <flash_read>
 8000622:	4603      	mov	r3, r0
 8000624:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000626:	6113      	str	r3, [r2, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff16 	bl	8000464 <flash_read>
 8000638:	4603      	mov	r3, r0
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800063c:	6193      	str	r3, [r2, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff0b 	bl	8000464 <flash_read>
 800064e:	4603      	mov	r3, r0
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000652:	6213      	str	r3, [r2, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000658:	f242 7210 	movw	r2, #10000	; 0x2710
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff00 	bl	8000464 <flash_read>
 8000664:	4603      	mov	r3, r0
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000668:	6293      	str	r3, [r2, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fef5 	bl	8000464 <flash_read>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff feeb 	bl	8000464 <flash_read>
 800068e:	4603      	mov	r3, r0
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000692:	6393      	str	r3, [r2, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	2203      	movs	r2, #3
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fee1 	bl	8000464 <flash_read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <SettingsReadFromFlash+0xd8>)
 80006aa:	f002 fd17 	bl	80030dc <printToBufferWithoutEndUART1>
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsReadFromFlash+0xdc>)
 80006b0:	f002 fc88 	bl	8002fc4 <printToBufferUART1>

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000054 	.word	0x20000054
 80006bc:	08003e58 	.word	0x08003e58
 80006c0:	080041d0 	.word	0x080041d0

080006c4 <DataWhenPowerOffReadFromFlash>:
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
}
void DataWhenPowerOffReadFromFlash(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fec6 	bl	8000464 <flash_read>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006dc:	6013      	str	r3, [r2, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff febc 	bl	8000464 <flash_read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f0:	6093      	str	r3, [r2, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff feb2 	bl	8000464 <flash_read>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000704:	6113      	str	r3, [r2, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	2201      	movs	r2, #1
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fea8 	bl	8000464 <flash_read>
 8000714:	4603      	mov	r3, r0
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000718:	6193      	str	r3, [r2, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <DataWhenPowerOffReadFromFlash+0x70>)
 800071c:	f002 fcde 	bl	80030dc <printToBufferWithoutEndUART1>
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <DataWhenPowerOffReadFromFlash+0x74>)
 8000722:	f002 fc4f 	bl	8002fc4 <printToBufferUART1>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c
 8000730:	ee6b2800 	.word	0xee6b2800
 8000734:	08003e58 	.word	0x08003e58
 8000738:	08004260 	.word	0x08004260

0800073c <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		EEpromReadStatus = 1;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <ReadFromFlash+0x84>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	 	logDebug("y1");
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <ReadFromFlash+0x88>)
 8000748:	f002 fcc8 	bl	80030dc <printToBufferWithoutEndUART1>
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <ReadFromFlash+0x8c>)
 800074e:	f002 fc39 	bl	8002fc4 <printToBufferUART1>
	 	delay_ms(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fb0e 	bl	8000d74 <delay_ms>
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
	    __disable_irq();
	    putCharDirectToUart2('A');
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f002 fbd3 	bl	8002f08 <putCharDirectToUart2>
	    DataWhenPowerOffReadFromFlash();
 8000762:	f7ff ffaf 	bl	80006c4 <DataWhenPowerOffReadFromFlash>
	    putCharDirectToUart2('B');
 8000766:	2042      	movs	r0, #66	; 0x42
 8000768:	f002 fbce 	bl	8002f08 <putCharDirectToUart2>
	    SettingsReadFromFlash();
 800076c:	f7ff ff3a 	bl	80005e4 <SettingsReadFromFlash>
	    putCharDirectToUart2('C');
 8000770:	2043      	movs	r0, #67	; 0x43
 8000772:	f002 fbc9 	bl	8002f08 <putCharDirectToUart2>
	    CalibrationReadFromFlash();
 8000776:	f7ff feb7 	bl	80004e8 <CalibrationReadFromFlash>
	    putCharDirectToUart2('D');
 800077a:	2044      	movs	r0, #68	; 0x44
 800077c:	f002 fbc4 	bl	8002f08 <putCharDirectToUart2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000780:	b662      	cpsie	i
}
 8000782:	bf00      	nop


		__enable_irq();
		putCharDirectToUart2('X');
 8000784:	2058      	movs	r0, #88	; 0x58
 8000786:	f002 fbbf 	bl	8002f08 <putCharDirectToUart2>
		if (EEpromReadStatus == 0)
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <ReadFromFlash+0x84>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <ReadFromFlash+0x6c>
		{
			logDebug("Read from EEprom - FAIL ");
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <ReadFromFlash+0x88>)
 8000794:	f002 fca2 	bl	80030dc <printToBufferWithoutEndUART1>
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ReadFromFlash+0x90>)
 800079a:	f002 fc13 	bl	8002fc4 <printToBufferUART1>
			EEpromReadStatus = 1;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <ReadFromFlash+0x84>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
			return 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e009      	b.n	80007bc <ReadFromFlash+0x80>
		}
		else
		{
			logDebug("Read from EEprom - SUCCESS");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ReadFromFlash+0x88>)
 80007aa:	f002 fc97 	bl	80030dc <printToBufferWithoutEndUART1>
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <ReadFromFlash+0x94>)
 80007b0:	f002 fc08 	bl	8002fc4 <printToBufferUART1>
			EEpromReadStatus = 1;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <ReadFromFlash+0x84>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
			return 1;
 80007ba:	2301      	movs	r3, #1
		}
}
 80007bc:	4618      	mov	r0, r3
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08003e58 	.word	0x08003e58
 80007c8:	080042a8 	.word	0x080042a8
 80007cc:	080042ac 	.word	0x080042ac
 80007d0:	080042c8 	.word	0x080042c8

080007d4 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 80007dc:	4ba0      	ldr	r3, [pc, #640]	; (8000a60 <WriteInLOG+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb15 	bl	8000e10 <itoa>
 80007e6:	60b8      	str	r0, [r7, #8]


	for(i=0;number[i]!='\0';i++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e012      	b.n	8000814 <WriteInLOG+0x40>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <WriteInLOG+0x28c>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	7bf9      	ldrb	r1, [r7, #15]
 80007fa:	781c      	ldrb	r4, [r3, #0]
 80007fc:	4898      	ldr	r0, [pc, #608]	; (8000a60 <WriteInLOG+0x28c>)
 80007fe:	4613      	mov	r3, r2
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4413      	add	r3, r2
 8000804:	4403      	add	r3, r0
 8000806:	440b      	add	r3, r1
 8000808:	3304      	adds	r3, #4
 800080a:	4622      	mov	r2, r4
 800080c:	701a      	strb	r2, [r3, #0]
	for(i=0;number[i]!='\0';i++)
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e6      	bne.n	80007ee <WriteInLOG+0x1a>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000820:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <WriteInLOG+0x28c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	7bf9      	ldrb	r1, [r7, #15]
 8000826:	488e      	ldr	r0, [pc, #568]	; (8000a60 <WriteInLOG+0x28c>)
 8000828:	4613      	mov	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	4413      	add	r3, r2
 800082e:	4403      	add	r3, r0
 8000830:	440b      	add	r3, r1
 8000832:	3304      	adds	r3, #4
 8000834:	223a      	movs	r2, #58	; 0x3a
 8000836:	701a      	strb	r2, [r3, #0]
	i++;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]

	for(j=0;str[j]!='\0';i++,j++)
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	e026      	b.n	8000892 <WriteInLOG+0xbe>
	{
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d810      	bhi.n	800086c <WriteInLOG+0x98>
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	4a83      	ldr	r2, [pc, #524]	; (8000a60 <WriteInLOG+0x28c>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	7bf9      	ldrb	r1, [r7, #15]
 8000856:	781c      	ldrb	r4, [r3, #0]
 8000858:	4881      	ldr	r0, [pc, #516]	; (8000a60 <WriteInLOG+0x28c>)
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	4403      	add	r3, r0
 8000862:	440b      	add	r3, r1
 8000864:	3304      	adds	r3, #4
 8000866:	4622      	mov	r2, r4
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e00c      	b.n	8000886 <WriteInLOG+0xb2>
		else
		{
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 800086c:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <WriteInLOG+0x28c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	7bf9      	ldrb	r1, [r7, #15]
 8000872:	487b      	ldr	r0, [pc, #492]	; (8000a60 <WriteInLOG+0x28c>)
 8000874:	4613      	mov	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	4403      	add	r3, r0
 800087c:	440b      	add	r3, r1
 800087e:	3304      	adds	r3, #4
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
			break;
 8000884:	e00b      	b.n	800089e <WriteInLOG+0xca>
	for(j=0;str[j]!='\0';i++,j++)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	3301      	adds	r3, #1
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1d2      	bne.n	8000844 <WriteInLOG+0x70>
		}
	}
	for (;i<16;i++)
 800089e:	e00e      	b.n	80008be <WriteInLOG+0xea>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 80008a0:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <WriteInLOG+0x28c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	7bf9      	ldrb	r1, [r7, #15]
 80008a6:	486e      	ldr	r0, [pc, #440]	; (8000a60 <WriteInLOG+0x28c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	4403      	add	r3, r0
 80008b0:	440b      	add	r3, r1
 80008b2:	3304      	adds	r3, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	701a      	strb	r2, [r3, #0]
	for (;i<16;i++)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d9ed      	bls.n	80008a0 <WriteInLOG+0xcc>
	}
	logDebugD("ii: ",i,0);
 80008c4:	4867      	ldr	r0, [pc, #412]	; (8000a64 <WriteInLOG+0x290>)
 80008c6:	f002 fc09 	bl	80030dc <printToBufferWithoutEndUART1>
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4865      	ldr	r0, [pc, #404]	; (8000a68 <WriteInLOG+0x294>)
 80008d2:	f002 fc5b 	bl	800318c <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <WriteInLOG+0x28c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	7bf9      	ldrb	r1, [r7, #15]
 80008dc:	4860      	ldr	r0, [pc, #384]	; (8000a60 <WriteInLOG+0x28c>)
 80008de:	4613      	mov	r3, r2
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4413      	add	r3, r2
 80008e4:	4403      	add	r3, r0
 80008e6:	440b      	add	r3, r1
 80008e8:	3304      	adds	r3, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]

	LoggingData.RecordsQuantity++;
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <WriteInLOG+0x28c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <WriteInLOG+0x28c>)
 80008f6:	6013      	str	r3, [r2, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <WriteInLOG+0x28c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b17      	cmp	r3, #23
 80008fe:	f240 809e 	bls.w	8000a3e <WriteInLOG+0x26a>
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e093      	b.n	8000a30 <WriteInLOG+0x25c>
		{
			number = itoa(i);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fa80 	bl	8000e10 <itoa>
 8000910:	60b8      	str	r0, [r7, #8]
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000912:	2300      	movs	r3, #0
 8000914:	737b      	strb	r3, [r7, #13]
 8000916:	e011      	b.n	800093c <WriteInLOG+0x168>
			{
				LoggingData.Records[i][k] = number[k];
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	7b79      	ldrb	r1, [r7, #13]
 8000922:	781c      	ldrb	r4, [r3, #0]
 8000924:	484e      	ldr	r0, [pc, #312]	; (8000a60 <WriteInLOG+0x28c>)
 8000926:	4613      	mov	r3, r2
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	4413      	add	r3, r2
 800092c:	4403      	add	r3, r0
 800092e:	440b      	add	r3, r1
 8000930:	3304      	adds	r3, #4
 8000932:	4622      	mov	r2, r4
 8000934:	701a      	strb	r2, [r3, #0]
			for(k=0;number[k]!='\0';k++)
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	3301      	adds	r3, #1
 800093a:	737b      	strb	r3, [r7, #13]
 800093c:	7b7b      	ldrb	r3, [r7, #13]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1e7      	bne.n	8000918 <WriteInLOG+0x144>
			}
			LoggingData.Records[i][k] = ':';
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	7b79      	ldrb	r1, [r7, #13]
 800094c:	4844      	ldr	r0, [pc, #272]	; (8000a60 <WriteInLOG+0x28c>)
 800094e:	4613      	mov	r3, r2
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	4413      	add	r3, r2
 8000954:	4403      	add	r3, r0
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	223a      	movs	r2, #58	; 0x3a
 800095c:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	3301      	adds	r3, #1
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	e035      	b.n	80009d2 <WriteInLOG+0x1fe>
			{
				if (i>=10)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b09      	cmp	r3, #9
 800096a:	d917      	bls.n	800099c <WriteInLOG+0x1c8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f103 010a 	add.w	r1, r3, #10
 8000972:	7bbc      	ldrb	r4, [r7, #14]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	7bb8      	ldrb	r0, [r7, #14]
 8000978:	4d39      	ldr	r5, [pc, #228]	; (8000a60 <WriteInLOG+0x28c>)
 800097a:	460b      	mov	r3, r1
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	440b      	add	r3, r1
 8000980:	442b      	add	r3, r5
 8000982:	4423      	add	r3, r4
 8000984:	3304      	adds	r3, #4
 8000986:	781c      	ldrb	r4, [r3, #0]
 8000988:	4935      	ldr	r1, [pc, #212]	; (8000a60 <WriteInLOG+0x28c>)
 800098a:	4613      	mov	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4413      	add	r3, r2
 8000990:	440b      	add	r3, r1
 8000992:	4403      	add	r3, r0
 8000994:	3304      	adds	r3, #4
 8000996:	4622      	mov	r2, r4
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e017      	b.n	80009cc <WriteInLOG+0x1f8>
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f103 010a 	add.w	r1, r3, #10
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	1c5c      	adds	r4, r3, #1
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	7bb8      	ldrb	r0, [r7, #14]
 80009aa:	4d2d      	ldr	r5, [pc, #180]	; (8000a60 <WriteInLOG+0x28c>)
 80009ac:	460b      	mov	r3, r1
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	440b      	add	r3, r1
 80009b2:	442b      	add	r3, r5
 80009b4:	4423      	add	r3, r4
 80009b6:	3304      	adds	r3, #4
 80009b8:	781c      	ldrb	r4, [r3, #0]
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <WriteInLOG+0x28c>)
 80009bc:	4613      	mov	r3, r2
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4413      	add	r3, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	4403      	add	r3, r0
 80009c6:	3304      	adds	r3, #4
 80009c8:	4622      	mov	r2, r4
 80009ca:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73bb      	strb	r3, [r7, #14]
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	7bb9      	ldrb	r1, [r7, #14]
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <WriteInLOG+0x28c>)
 80009d8:	4613      	mov	r3, r2
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	4403      	add	r3, r0
 80009e0:	440b      	add	r3, r1
 80009e2:	3304      	adds	r3, #4
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1bd      	bne.n	8000966 <WriteInLOG+0x192>
			}
			j--;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	73bb      	strb	r3, [r7, #14]
			for (;j<16;j++)
 80009f0:	e00d      	b.n	8000a0e <WriteInLOG+0x23a>
			{
				LoggingData.Records[i][j] = ' ';
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	7bb9      	ldrb	r1, [r7, #14]
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <WriteInLOG+0x28c>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	4413      	add	r3, r2
 80009fe:	4403      	add	r3, r0
 8000a00:	440b      	add	r3, r1
 8000a02:	3304      	adds	r3, #4
 8000a04:	2220      	movs	r2, #32
 8000a06:	701a      	strb	r2, [r3, #0]
			for (;j<16;j++)
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d9ee      	bls.n	80009f2 <WriteInLOG+0x21e>
			}
			LoggingData.Records[i][j] = '\0';
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	7bb9      	ldrb	r1, [r7, #14]
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <WriteInLOG+0x28c>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	4413      	add	r3, r2
 8000a20:	4403      	add	r3, r0
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b0d      	cmp	r3, #13
 8000a34:	f67f af68 	bls.w	8000908 <WriteInLOG+0x134>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <WriteInLOG+0x28c>)
 8000a3a:	220e      	movs	r2, #14
 8000a3c:	601a      	str	r2, [r3, #0]
	}
	flash_write_block();
 8000a3e:	f7ff fc95 	bl	800036c <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <WriteInLOG+0x290>)
 8000a44:	f002 fb4a 	bl	80030dc <printToBufferWithoutEndUART1>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <WriteInLOG+0x28c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <WriteInLOG+0x298>)
 8000a52:	f002 fb9b 	bl	800318c <printToBufferUART1D>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000b58 	.word	0x20000b58
 8000a64:	080043e4 	.word	0x080043e4
 8000a68:	080043ec 	.word	0x080043ec
 8000a6c:	080043f4 	.word	0x080043f4

08000a70 <InfoToUARTBeforeStart>:
}



void InfoToUARTBeforeStart(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000a74:	487d      	ldr	r0, [pc, #500]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a76:	f002 fb31 	bl	80030dc <printToBufferWithoutEndUART1>
 8000a7a:	4b7d      	ldr	r3, [pc, #500]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	487c      	ldr	r0, [pc, #496]	; (8000c74 <InfoToUARTBeforeStart+0x204>)
 8000a84:	f002 fb82 	bl	800318c <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.CalibrationValueForCurrent1 ,0);
 8000a88:	4878      	ldr	r0, [pc, #480]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a8a:	f002 fb27 	bl	80030dc <printToBufferWithoutEndUART1>
 8000a8e:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4878      	ldr	r0, [pc, #480]	; (8000c78 <InfoToUARTBeforeStart+0x208>)
 8000a98:	f002 fb78 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent2 ,0);
 8000a9c:	4873      	ldr	r0, [pc, #460]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a9e:	f002 fb1d 	bl	80030dc <printToBufferWithoutEndUART1>
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4874      	ldr	r0, [pc, #464]	; (8000c7c <InfoToUARTBeforeStart+0x20c>)
 8000aac:	f002 fb6e 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent2 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ab2:	f002 fb13 	bl	80030dc <printToBufferWithoutEndUART1>
 8000ab6:	4b6e      	ldr	r3, [pc, #440]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4870      	ldr	r0, [pc, #448]	; (8000c80 <InfoToUARTBeforeStart+0x210>)
 8000ac0:	f002 fb64 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent3 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8000ac4:	4869      	ldr	r0, [pc, #420]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ac6:	f002 fb09 	bl	80030dc <printToBufferWithoutEndUART1>
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	486c      	ldr	r0, [pc, #432]	; (8000c84 <InfoToUARTBeforeStart+0x214>)
 8000ad4:	f002 fb5a 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage3 ,0);
 8000ad8:	4864      	ldr	r0, [pc, #400]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ada:	f002 faff 	bl	80030dc <printToBufferWithoutEndUART1>
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4868      	ldr	r0, [pc, #416]	; (8000c88 <InfoToUARTBeforeStart+0x218>)
 8000ae8:	f002 fb50 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage4 ,0);
 8000aec:	485f      	ldr	r0, [pc, #380]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000aee:	f002 faf5 	bl	80030dc <printToBufferWithoutEndUART1>
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4864      	ldr	r0, [pc, #400]	; (8000c8c <InfoToUARTBeforeStart+0x21c>)
 8000afc:	f002 fb46 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage3 =",CalibrationData.CalibrationValueForVoltage5 ,0);
 8000b00:	485a      	ldr	r0, [pc, #360]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b02:	f002 faeb 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b06:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4860      	ldr	r0, [pc, #384]	; (8000c90 <InfoToUARTBeforeStart+0x220>)
 8000b10:	f002 fb3c 	bl	800318c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage4 =",CalibrationData.CalibrationValueForVoltage6 ,0) ;
 8000b14:	4855      	ldr	r0, [pc, #340]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b16:	f002 fae1 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <InfoToUARTBeforeStart+0x224>)
 8000b24:	f002 fb32 	bl	800318c <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.CalibrationValueForVoltage7 ,0) ;
 8000b28:	4850      	ldr	r0, [pc, #320]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b2a:	f002 fad7 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4858      	ldr	r0, [pc, #352]	; (8000c98 <InfoToUARTBeforeStart+0x228>)
 8000b38:	f002 fb28 	bl	800318c <printToBufferUART1D>
	delay_ms(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f000 f919 	bl	8000d74 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8000b42:	484a      	ldr	r0, [pc, #296]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b44:	f002 faca 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <InfoToUARTBeforeStart+0x230>)
 8000b52:	f002 fb1b 	bl	800318c <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 8000b56:	4845      	ldr	r0, [pc, #276]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b58:	f002 fac0 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <InfoToUARTBeforeStart+0x234>)
 8000b66:	f002 fb11 	bl	800318c <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 8000b6a:	4840      	ldr	r0, [pc, #256]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b6c:	f002 fab6 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <InfoToUARTBeforeStart+0x238>)
 8000b7a:	f002 fb07 	bl	800318c <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 8000b7e:	483b      	ldr	r0, [pc, #236]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b80:	f002 faac 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4847      	ldr	r0, [pc, #284]	; (8000cac <InfoToUARTBeforeStart+0x23c>)
 8000b8e:	f002 fafd 	bl	800318c <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b94:	f002 faa2 	bl	80030dc <printToBufferWithoutEndUART1>
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4843      	ldr	r0, [pc, #268]	; (8000cb0 <InfoToUARTBeforeStart+0x240>)
 8000ba2:	f002 faf3 	bl	800318c <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 8000ba6:	4831      	ldr	r0, [pc, #196]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ba8:	f002 fa98 	bl	80030dc <printToBufferWithoutEndUART1>
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483f      	ldr	r0, [pc, #252]	; (8000cb4 <InfoToUARTBeforeStart+0x244>)
 8000bb6:	f002 fae9 	bl	800318c <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bbc:	f002 fa8e 	bl	80030dc <printToBufferWithoutEndUART1>
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <InfoToUARTBeforeStart+0x248>)
 8000bca:	f002 fadf 	bl	800318c <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 8000bce:	4827      	ldr	r0, [pc, #156]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bd0:	f002 fa84 	bl	80030dc <printToBufferWithoutEndUART1>
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4837      	ldr	r0, [pc, #220]	; (8000cbc <InfoToUARTBeforeStart+0x24c>)
 8000bde:	f002 fad5 	bl	800318c <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000be4:	f002 fa7a 	bl	80030dc <printToBufferWithoutEndUART1>
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <InfoToUARTBeforeStart+0x250>)
 8000bf2:	f002 facb 	bl	800318c <printToBufferUART1D>
	delay_ms(50);
 8000bf6:	2032      	movs	r0, #50	; 0x32
 8000bf8:	f000 f8bc 	bl	8000d74 <delay_ms>

	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bfe:	f002 fa6d 	bl	80030dc <printToBufferWithoutEndUART1>
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <InfoToUARTBeforeStart+0x258>)
 8000c0c:	f002 fabe 	bl	800318c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c12:	f002 fa63 	bl	80030dc <printToBufferWithoutEndUART1>
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <InfoToUARTBeforeStart+0x25c>)
 8000c20:	f002 fab4 	bl	800318c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c26:	f002 fa59 	bl	80030dc <printToBufferWithoutEndUART1>
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <InfoToUARTBeforeStart+0x260>)
 8000c34:	f002 faaa 	bl	800318c <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c3a:	f002 fa4f 	bl	80030dc <printToBufferWithoutEndUART1>
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <InfoToUARTBeforeStart+0x264>)
 8000c48:	f002 faa0 	bl	800318c <printToBufferUART1D>

	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c4e:	f002 fa45 	bl	80030dc <printToBufferWithoutEndUART1>
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <InfoToUARTBeforeStart+0x268>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <InfoToUARTBeforeStart+0x26c>)
 8000c5c:	f002 fa96 	bl	800318c <printToBufferUART1D>
	delay_ms(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f000 f887 	bl	8000d74 <delay_ms>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080043f8 	.word	0x080043f8
 8000c70:	20000004 	.word	0x20000004
 8000c74:	08004400 	.word	0x08004400
 8000c78:	08004414 	.word	0x08004414
 8000c7c:	08004434 	.word	0x08004434
 8000c80:	08004454 	.word	0x08004454
 8000c84:	08004474 	.word	0x08004474
 8000c88:	08004494 	.word	0x08004494
 8000c8c:	080044b4 	.word	0x080044b4
 8000c90:	080044d4 	.word	0x080044d4
 8000c94:	080044f4 	.word	0x080044f4
 8000c98:	08004514 	.word	0x08004514
 8000c9c:	20000054 	.word	0x20000054
 8000ca0:	0800452c 	.word	0x0800452c
 8000ca4:	08004540 	.word	0x08004540
 8000ca8:	0800455c 	.word	0x0800455c
 8000cac:	0800456c 	.word	0x0800456c
 8000cb0:	0800457c 	.word	0x0800457c
 8000cb4:	0800458c 	.word	0x0800458c
 8000cb8:	0800459c 	.word	0x0800459c
 8000cbc:	080045b0 	.word	0x080045b0
 8000cc0:	080045c4 	.word	0x080045c4
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	080045e4 	.word	0x080045e4
 8000ccc:	08004600 	.word	0x08004600
 8000cd0:	08004628 	.word	0x08004628
 8000cd4:	0800464c 	.word	0x0800464c
 8000cd8:	200000cc 	.word	0x200000cc
 8000cdc:	08004658 	.word	0x08004658

08000ce0 <delay_us>:
void delay_us(uint32_t us)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	volatile uint32_t n = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	if (us==1) n=1;//в тактах процесора
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <delay_us+0x16>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
	if (us==2) n=2;//в тактах процесора
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d101      	bne.n	8000d00 <delay_us+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
	if (us==3) n=18;//в тактах процесора
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d101      	bne.n	8000d0a <delay_us+0x2a>
 8000d06:	2312      	movs	r3, #18
 8000d08:	617b      	str	r3, [r7, #20]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d90a      	bls.n	8000d26 <delay_us+0x46>
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <delay_us+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <delay_us+0x8c>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	3a03      	subs	r2, #3
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <delay_us+0x90>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	613b      	str	r3, [r7, #16]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60fb      	str	r3, [r7, #12]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <delay_us+0x90>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	60bb      	str	r3, [r7, #8]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d305      	bcc.n	8000d4c <delay_us+0x6c>
            n0+=SysTick->LOAD+1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <delay_us+0x90>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4413      	add	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        np=nc;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60fb      	str	r3, [r7, #12]
    }while(n0-nc<n);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	1a9a      	subs	r2, r3, r2
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3e9      	bcc.n	8000d30 <delay_us+0x50>
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200000cc 	.word	0x200000cc
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	while(value>0)
 8000d7c:	e006      	b.n	8000d8c <delay_ms+0x18>
	{
		delay_us(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f7ff ffad 	bl	8000ce0 <delay_us>
		value--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
	while(value>0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f5      	bne.n	8000d7e <delay_ms+0xa>
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <calcCRC>:
* количество байтов, участвующих в расчете (ровно)
* начальный код CRC (если считается не с начала массива),
* Для ускорения расчета используется таблица
***********************************************************************/
char calcCRC(char *Ptr, char Num, char CRC1)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0c2      	sub	sp, #264	; 0x108
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	6018      	str	r0, [r3, #0]
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	1cfb      	adds	r3, r7, #3
 8000dac:	4602      	mov	r2, r0
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	460a      	mov	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
   char CrcTable[256] = {
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <calcCRC+0x70>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f003 f82d 	bl	8003e24 <memcpy>
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1d3a      	adds	r2, r7, #4
 8000dd0:	1c59      	adds	r1, r3, #1
 8000dd2:	6011      	str	r1, [r2, #0]
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4053      	eors	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	f107 0208 	add.w	r2, r7, #8
 8000de6:	5c52      	ldrb	r2, [r2, r1]
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1cfb      	adds	r3, r7, #3
 8000dec:	1cfa      	adds	r2, r7, #3
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1cfb      	adds	r3, r7, #3
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e6      	bne.n	8000dca <calcCRC+0x2e>
  return CRC1;
 8000dfc:	1cbb      	adds	r3, r7, #2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800466c 	.word	0x0800466c

08000e10 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	int32_t sign;
	int8_t i,k;
	char s[16];
	static char s1[16];
     if ((sign = n) < 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da02      	bge.n	8000e28 <itoa+0x18>
         n = -n;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	425b      	negs	r3, r3
 8000e26:	607b      	str	r3, [r7, #4]
     i = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	77fb      	strb	r3, [r7, #31]
     do {
         s[i++] = n % 10 + '0';
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <itoa+0xec>)
 8000e30:	fb83 1302 	smull	r1, r3, r3, r2
 8000e34:	1099      	asrs	r1, r3, #2
 8000e36:	17d3      	asrs	r3, r2, #31
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	1ad1      	subs	r1, r2, r3
 8000e44:	b2cb      	uxtb	r3, r1
 8000e46:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	77fa      	strb	r2, [r7, #31]
 8000e52:	3330      	adds	r3, #48	; 0x30
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f803 2c18 	strb.w	r2, [r3, #-24]
     } while ((n /= 10) > 0);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <itoa+0xec>)
 8000e64:	fb82 1203 	smull	r1, r2, r2, r3
 8000e68:	1092      	asrs	r2, r2, #2
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dcda      	bgt.n	8000e2c <itoa+0x1c>
     if (sign < 0)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da0c      	bge.n	8000e96 <itoa+0x86>
         s[i++] = '-';
 8000e7c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e80:	b2d3      	uxtb	r3, r2
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	77fb      	strb	r3, [r7, #31]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	f107 0220 	add.w	r2, r7, #32
 8000e8e:	4413      	add	r3, r2
 8000e90:	222d      	movs	r2, #45	; 0x2d
 8000e92:	f803 2c18 	strb.w	r2, [r3, #-24]
     s[i] = '\0';
 8000e96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e9a:	f107 0220 	add.w	r2, r7, #32
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f803 2c18 	strb.w	r2, [r3, #-24]

     k=0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000eaa:	e017      	b.n	8000edc <itoa+0xcc>
     {
    	s1[k]=s[i-1];
 8000eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000eb6:	f107 0120 	add.w	r1, r7, #32
 8000eba:	440a      	add	r2, r1
 8000ebc:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <itoa+0xf0>)
 8000ec2:	54d1      	strb	r1, [r2, r3]
    	i--;
 8000ec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	77fb      	strb	r3, [r7, #31]
    	k++;
 8000ed0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e3      	bne.n	8000eac <itoa+0x9c>
     }
     s1[k] = '\0';
 8000ee4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <itoa+0xf0>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	54d1      	strb	r1, [r2, r3]
     return s1;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <itoa+0xf0>)
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	66666667 	.word	0x66666667
 8000f00:	200009b0 	.word	0x200009b0

08000f04 <itoa_koma>:
     s1[k] = '\0';
     return s1;
}

char * itoa_koma(int32_t n,uint8_t koma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08f      	sub	sp, #60	; 0x3c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	int32_t sign;
	int8_t i,k,j;
	char s[17];
	char sKoma[17];
	static char s1[17];
    if ((sign = n) < 0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
 8000f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da02      	bge.n	8000f20 <itoa_koma+0x1c>
    	n = -n;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	607b      	str	r3, [r7, #4]
     i = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     do
     {
         s[i++] = n % 10 + '0';
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <itoa_koma+0x1c8>)
 8000f2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2e:	1099      	asrs	r1, r3, #2
 8000f30:	17d3      	asrs	r3, r2, #31
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	1ad1      	subs	r1, r2, r3
 8000f3e:	b2cb      	uxtb	r3, r1
 8000f40:	f997 1037 	ldrsb.w	r1, [r7, #55]	; 0x37
 8000f44:	b2ca      	uxtb	r2, r1
 8000f46:	3201      	adds	r2, #1
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f56:	440b      	add	r3, r1
 8000f58:	f803 2c1c 	strb.w	r2, [r3, #-28]
     } while ((n /= 10) > 0);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a5b      	ldr	r2, [pc, #364]	; (80010cc <itoa_koma+0x1c8>)
 8000f60:	fb82 1203 	smull	r1, r2, r2, r3
 8000f64:	1092      	asrs	r2, r2, #2
 8000f66:	17db      	asrs	r3, r3, #31
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dcd9      	bgt.n	8000f26 <itoa_koma+0x22>
     s[i] = '\0';
 8000f72:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
     if (i<=1)
 8000f82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	dc0e      	bgt.n	8000fa8 <itoa_koma+0xa4>
     {
       	 s[i] = '0';
 8000f8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f92:	4413      	add	r3, r2
 8000f94:	2230      	movs	r2, #48	; 0x30
 8000f96:	f803 2c1c 	strb.w	r2, [r3, #-28]
       	 i++;
 8000f9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     if (i<=2&&koma>1)
 8000fa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	dc11      	bgt.n	8000fd4 <itoa_koma+0xd0>
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d90e      	bls.n	8000fd4 <itoa_koma+0xd0>
     {
    	 s[i] = '0';
 8000fb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2230      	movs	r2, #48	; 0x30
 8000fc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
    	 i++;
 8000fc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     k=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     j=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     while (j<i)
 8000fe0:	e02f      	b.n	8001042 <itoa_koma+0x13e>
     {
    	 if (k==koma)
 8000fe2:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10e      	bne.n	800100a <itoa_koma+0x106>
         {
         	 sKoma[k]='.';
 8000fec:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8000ff0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ff4:	4413      	add	r3, r2
 8000ff6:	222e      	movs	r2, #46	; 0x2e
 8000ff8:	f803 2c30 	strb.w	r2, [r3, #-48]
         	 k++;
 8000ffc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
         }
    	 sKoma[k]=s[j];
 800100a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800100e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001012:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001016:	440a      	add	r2, r1
 8001018:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800101c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001020:	440b      	add	r3, r1
 8001022:	f803 2c30 	strb.w	r2, [r3, #-48]
         j++;
 8001026:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
         k++;
 8001034:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     while (j<i)
 8001042:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001046:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800104a:	429a      	cmp	r2, r3
 800104c:	dbc9      	blt.n	8000fe2 <itoa_koma+0xde>
      }
     if (sign < 0) sKoma[k++] = '-';
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	2b00      	cmp	r3, #0
 8001052:	da0d      	bge.n	8001070 <itoa_koma+0x16c>
 8001054:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001058:	b2d3      	uxtb	r3, r2
 800105a:	3301      	adds	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001062:	4613      	mov	r3, r2
 8001064:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001068:	4413      	add	r3, r2
 800106a:	222d      	movs	r2, #45	; 0x2d
 800106c:	f803 2c30 	strb.w	r2, [r3, #-48]
     i=0;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 8001076:	e019      	b.n	80010ac <itoa_koma+0x1a8>
     {
    	s1[i]=sKoma[k-1];
 8001078:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001082:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001086:	440a      	add	r2, r1
 8001088:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 800108c:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <itoa_koma+0x1cc>)
 800108e:	54d1      	strb	r1, [r2, r3]
    	k--;
 8001090:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    	i++;
 800109e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 80010ac:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e1      	bne.n	8001078 <itoa_koma+0x174>
     }
     s1[i] = '\0';
 80010b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <itoa_koma+0x1cc>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	54d1      	strb	r1, [r2, r3]
     return s1;
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <itoa_koma+0x1cc>)
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	373c      	adds	r7, #60	; 0x3c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	66666667 	.word	0x66666667
 80010d0:	200009c0 	.word	0x200009c0

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <LL_ADC_DMA_GetRegAddr>:
  
  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	334c      	adds	r3, #76	; 0x4c
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	609a      	str	r2, [r3, #8]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	332c      	adds	r3, #44	; 0x2c
 80012b8:	4619      	mov	r1, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012c4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	fa92 f2a2 	rbit	r2, r2
 80012cc:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	fab2 f282 	clz	r2, r2
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	40d3      	lsrs	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	211f      	movs	r1, #31
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f003 011f 	and.w	r1, r3, #31
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001312:	b480      	push	{r7}
 8001314:	b08d      	sub	sp, #52	; 0x34
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	4619      	mov	r1, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800132e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	fa92 f2a2 	rbit	r2, r2
 8001336:	617a      	str	r2, [r7, #20]
  return result;
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	fab2 f282 	clz	r2, r2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	40d3      	lsrs	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001352:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001356:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	6a39      	ldr	r1, [r7, #32]
 800135a:	fa91 f1a1 	rbit	r1, r1
 800135e:	61f9      	str	r1, [r7, #28]
  return result;
 8001360:	69f9      	ldr	r1, [r7, #28]
 8001362:	fab1 f181 	clz	r1, r1
 8001366:	b2c9      	uxtb	r1, r1
 8001368:	40cb      	lsrs	r3, r1
 800136a:	2107      	movs	r1, #7
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800137a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800137e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001382:	fa91 f1a1 	rbit	r1, r1
 8001386:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138a:	fab1 f181 	clz	r1, r1
 800138e:	b2c9      	uxtb	r1, r1
 8001390:	40cb      	lsrs	r3, r1
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	431a      	orrs	r2, r3
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800139e:	bf00      	nop
 80013a0:	3734      	adds	r7, #52	; 0x34
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f043 0204 	orr.w	r2, r3, #4
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LL_DMA_EnableChannel+0x38>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	3a01      	subs	r2, #1
 8001446:	4906      	ldr	r1, [pc, #24]	; (8001460 <LL_DMA_EnableChannel+0x38>)
 8001448:	5c8a      	ldrb	r2, [r1, r2]
 800144a:	4611      	mov	r1, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	440a      	add	r2, r1
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	0800491c 	.word	0x0800491c

08001464 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <LL_DMA_SetDataTransferDirection+0x44>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001484:	f023 0310 	bic.w	r3, r3, #16
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	3a01      	subs	r2, #1
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <LL_DMA_SetDataTransferDirection+0x44>)
 800148e:	5c8a      	ldrb	r2, [r1, r2]
 8001490:	4611      	mov	r1, r2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	440a      	add	r2, r1
 8001496:	4611      	mov	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	0800491c 	.word	0x0800491c

080014ac <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <LL_DMA_SetMode+0x40>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 0220 	bic.w	r2, r3, #32
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <LL_DMA_SetMode+0x40>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	4619      	mov	r1, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	440b      	add	r3, r1
 80014da:	4619      	mov	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	0800491c 	.word	0x0800491c

080014f0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LL_DMA_SetPeriphIncMode+0x40>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3b01      	subs	r3, #1
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <LL_DMA_SetPeriphIncMode+0x40>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	4619      	mov	r1, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	440b      	add	r3, r1
 800151e:	4619      	mov	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	0800491c 	.word	0x0800491c

08001534 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LL_DMA_SetMemoryIncMode+0x40>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	461a      	mov	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3b01      	subs	r3, #1
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <LL_DMA_SetMemoryIncMode+0x40>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	4619      	mov	r1, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	440b      	add	r3, r1
 8001562:	4619      	mov	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	0800491c 	.word	0x0800491c

08001578 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LL_DMA_SetPeriphSize+0x40>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3b01      	subs	r3, #1
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <LL_DMA_SetPeriphSize+0x40>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	4619      	mov	r1, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	440b      	add	r3, r1
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	0800491c 	.word	0x0800491c

080015bc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LL_DMA_SetMemorySize+0x40>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3b01      	subs	r3, #1
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <LL_DMA_SetMemorySize+0x40>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	4619      	mov	r1, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	440b      	add	r3, r1
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	0800491c 	.word	0x0800491c

08001600 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	461a      	mov	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	3b01      	subs	r3, #1
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	4619      	mov	r1, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	440b      	add	r3, r1
 800162e:	4619      	mov	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	0800491c 	.word	0x0800491c

08001644 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LL_DMA_SetDataLength+0x40>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	3a01      	subs	r2, #1
 8001668:	4906      	ldr	r1, [pc, #24]	; (8001684 <LL_DMA_SetDataLength+0x40>)
 800166a:	5c8a      	ldrb	r2, [r1, r2]
 800166c:	4611      	mov	r1, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	440a      	add	r2, r1
 8001672:	4611      	mov	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	0800491c 	.word	0x0800491c

08001688 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b10      	cmp	r3, #16
 800169a:	d114      	bne.n	80016c6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <LL_DMA_ConfigAddresses+0x70>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <LL_DMA_ConfigAddresses+0x70>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80016c4:	e013      	b.n	80016ee <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LL_DMA_ConfigAddresses+0x70>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <LL_DMA_ConfigAddresses+0x70>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	60d3      	str	r3, [r2, #12]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	0800491c 	.word	0x0800491c

080016fc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <LL_RCC_HSE_Enable+0x18>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <LL_RCC_HSE_Enable+0x18>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <LL_RCC_HSE_IsReady+0x20>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000

0800173c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_RCC_SetSysClkSource+0x24>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 0203 	bic.w	r2, r3, #3
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <LL_RCC_SetSysClkSource+0x24>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <LL_RCC_GetSysClkSource+0x14>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000

0800177c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <LL_RCC_SetADCClockSource+0x24>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001804:	4904      	ldr	r1, [pc, #16]	; (8001818 <LL_RCC_SetADCClockSource+0x24>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <LL_RCC_PLL_Enable+0x18>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <LL_RCC_PLL_Enable+0x18>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_PLL_IsReady+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	430b      	orrs	r3, r1
 8001878:	4908      	ldr	r1, [pc, #32]	; (800189c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f023 020f 	bic.w	r2, r3, #15
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800188e:	4313      	orrs	r3, r2
 8001890:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000

080018a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <LL_APB2_GRP1_EnableClock+0x2c>)
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <LL_APB2_GRP1_EnableClock+0x2c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4313      	orrs	r3, r2
 8001912:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	605a      	str	r2, [r3, #4]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	615a      	str	r2, [r3, #20]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
	...

08001a70 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	6053      	str	r3, [r2, #4]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40010000 	.word	0x40010000

08001a98 <BUT_GetKey>:
	}
	else comp=0;
}

Key_Pressed_t BUT_GetKey(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
	if (pressedKey) PowerOffTimesec=0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <BUT_GetKey+0x2c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <BUT_GetKey+0x14>
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <BUT_GetKey+0x30>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
	Key_Pressed_t key = pressedKey;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <BUT_GetKey+0x2c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	71fb      	strb	r3, [r7, #7]
	pressedKey = 0;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <BUT_GetKey+0x2c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
	return key;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	200009dd 	.word	0x200009dd
 8001ac8:	200009d4 	.word	0x200009d4

08001acc <MainScreenAnswer>:
};
struct RequestFromClientToSrv_struct RequestFromClientToSrv;
struct AnswerFromSrvToClient_struct  AnswerFromSrvToClient;

void MainScreenAnswer()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
	uint16_t var_16=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	80fb      	strh	r3, [r7, #6]
	uint8_t *arrayPointer_16 = (uint8_t*) &var_16;
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	60fb      	str	r3, [r7, #12]

	uint16_t var_u16=0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	80bb      	strh	r3, [r7, #4]
	uint8_t *arrayPointer_u16 = (uint8_t*) &var_u16;
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	60bb      	str	r3, [r7, #8]
	arrayPointer_u16 = (uint8_t*) &Battery.Voltage;
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <MainScreenAnswer+0x154>)
 8001ae4:	60bb      	str	r3, [r7, #8]
	Master.Package[4]=arrayPointer_u16[0];
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <MainScreenAnswer+0x158>)
 8001aec:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=arrayPointer_u16[1];
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	785a      	ldrb	r2, [r3, #1]
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <MainScreenAnswer+0x158>)
 8001af4:	715a      	strb	r2, [r3, #5]

	arrayPointer_16 = (uint8_t*) &Battery.Current;
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <MainScreenAnswer+0x15c>)
 8001af8:	60fb      	str	r3, [r7, #12]
	Master.Package[6]=arrayPointer_16[0];
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b00:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=arrayPointer_16[1];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	785a      	ldrb	r2, [r3, #1]
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b08:	71da      	strb	r2, [r3, #7]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[0].Voltage;
 8001b0a:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <MainScreenAnswer+0x160>)
 8001b0c:	60bb      	str	r3, [r7, #8]
	Master.Package[8]=arrayPointer_u16[0];
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b14:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=arrayPointer_u16[1];
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	785a      	ldrb	r2, [r3, #1]
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b1c:	725a      	strb	r2, [r3, #9]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[1].Voltage;
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <MainScreenAnswer+0x164>)
 8001b20:	60bb      	str	r3, [r7, #8]
	Master.Package[10]=arrayPointer_u16[0];
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b28:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=arrayPointer_u16[1];
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	785a      	ldrb	r2, [r3, #1]
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b30:	72da      	strb	r2, [r3, #11]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[2].Voltage;
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <MainScreenAnswer+0x168>)
 8001b34:	60bb      	str	r3, [r7, #8]
	Master.Package[12]=arrayPointer_u16[0];
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b3c:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=arrayPointer_u16[1];
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	785a      	ldrb	r2, [r3, #1]
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b44:	735a      	strb	r2, [r3, #13]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[3].Voltage;
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <MainScreenAnswer+0x16c>)
 8001b48:	60bb      	str	r3, [r7, #8]
	Master.Package[14]=arrayPointer_u16[0];
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b50:	739a      	strb	r2, [r3, #14]
	Master.Package[15]=arrayPointer_u16[1];
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	785a      	ldrb	r2, [r3, #1]
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b58:	73da      	strb	r2, [r3, #15]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
	}

	if (NUMBER_OF_CELLS == 8)
	{
		arrayPointer_u16 = (uint8_t*) &CellsDatabase[4].Voltage;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <MainScreenAnswer+0x170>)
 8001b5c:	60bb      	str	r3, [r7, #8]
		Master.Package[16]=arrayPointer_u16[0];
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b64:	741a      	strb	r2, [r3, #16]
		Master.Package[17]=arrayPointer_u16[1];
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	785a      	ldrb	r2, [r3, #1]
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b6c:	745a      	strb	r2, [r3, #17]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[5].Voltage;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <MainScreenAnswer+0x174>)
 8001b70:	60bb      	str	r3, [r7, #8]
		Master.Package[18]=arrayPointer_u16[0];
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b78:	749a      	strb	r2, [r3, #18]
		Master.Package[19]=arrayPointer_u16[1];
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	785a      	ldrb	r2, [r3, #1]
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b80:	74da      	strb	r2, [r3, #19]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[6].Voltage;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MainScreenAnswer+0x178>)
 8001b84:	60bb      	str	r3, [r7, #8]
		Master.Package[20]=arrayPointer_u16[0];
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b8c:	751a      	strb	r2, [r3, #20]
		Master.Package[21]=arrayPointer_u16[1];
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	785a      	ldrb	r2, [r3, #1]
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <MainScreenAnswer+0x158>)
 8001b94:	755a      	strb	r2, [r3, #21]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[7].Voltage;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MainScreenAnswer+0x17c>)
 8001b98:	60bb      	str	r3, [r7, #8]
		Master.Package[22]=arrayPointer_u16[0];
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <MainScreenAnswer+0x158>)
 8001ba0:	759a      	strb	r2, [r3, #22]
		Master.Package[23]=arrayPointer_u16[1];
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	785a      	ldrb	r2, [r3, #1]
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MainScreenAnswer+0x158>)
 8001ba8:	75da      	strb	r2, [r3, #23]

		Master.Package[24]=95;
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bac:	225f      	movs	r2, #95	; 0x5f
 8001bae:	761a      	strb	r2, [r3, #24]
		Master.Package[25]=On_off;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <MainScreenAnswer+0x180>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bb8:	765a      	strb	r2, [r3, #25]
		Master.Data_length = 27-1;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bbc:	221a      	movs	r2, #26
 8001bbe:	779a      	strb	r2, [r3, #30]

		Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bc2:	7f9b      	ldrb	r3, [r3, #30]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4816      	ldr	r0, [pc, #88]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bcc:	f7ff f8e6 	bl	8000d9c <calcCRC>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bd6:	77da      	strb	r2, [r3, #31]
		Master.Package[26] = Master.DataCRC;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bda:	7fdb      	ldrb	r3, [r3, #31]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MainScreenAnswer+0x158>)
 8001be0:	769a      	strb	r2, [r3, #26]
		Master.Package[27] = 0x0A;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MainScreenAnswer+0x158>)
 8001be4:	220a      	movs	r2, #10
 8001be6:	76da      	strb	r2, [r3, #27]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bea:	7f9b      	ldrb	r3, [r3, #30]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3302      	adds	r3, #2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bf6:	f001 f967 	bl	8002ec8 <putDataInBufferUart2>

	}


	Master.Package[0] = PACKAGE_BEGIN;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MainScreenAnswer+0x158>)
 8001bfc:	22fe      	movs	r2, #254	; 0xfe
 8001bfe:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MainScreenAnswer+0x158>)
 8001c02:	7f9b      	ldrb	r3, [r3, #30]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <MainScreenAnswer+0x158>)
 8001c08:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MainScreenAnswer+0x158>)
 8001c0c:	22fa      	movs	r2, #250	; 0xfa
 8001c0e:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = MAIN_SCREEN;
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <MainScreenAnswer+0x158>)
 8001c12:	2214      	movs	r2, #20
 8001c14:	70da      	strb	r2, [r3, #3]

}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000b28 	.word	0x20000b28
 8001c24:	20000d18 	.word	0x20000d18
 8001c28:	20000b2a 	.word	0x20000b2a
 8001c2c:	20000a48 	.word	0x20000a48
 8001c30:	20000a64 	.word	0x20000a64
 8001c34:	20000a80 	.word	0x20000a80
 8001c38:	20000a9c 	.word	0x20000a9c
 8001c3c:	20000ab8 	.word	0x20000ab8
 8001c40:	20000ad4 	.word	0x20000ad4
 8001c44:	20000af0 	.word	0x20000af0
 8001c48:	20000b0c 	.word	0x20000b0c
 8001c4c:	200009dc 	.word	0x200009dc

08001c50 <SystemInfoAnswer>:

void SystemInfoAnswer()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	Master.Package[4]=1;//version before point
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=0;//version after point
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	715a      	strb	r2, [r3, #5]
	Master.Package[6]=1;// 1- LIFEPO4, 2 - LIon
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=NUMBER_OF_CELLS;//Number of cells
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c68:	2208      	movs	r2, #8
 8001c6a:	71da      	strb	r2, [r3, #7]
	Master.Package[8]=0;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=0;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	725a      	strb	r2, [r3, #9]
	Master.Package[10]=0;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=0;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	72da      	strb	r2, [r3, #11]
	Master.Package[12]=0;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=0;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	735a      	strb	r2, [r3, #13]

	Master.Data_length = 15-1;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c92:	220e      	movs	r2, #14
 8001c94:	779a      	strb	r2, [r3, #30]

	Master.Package[0] = PACKAGE_BEGIN;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c98:	22fe      	movs	r2, #254	; 0xfe
 8001c9a:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001c9e:	7f9b      	ldrb	r3, [r3, #30]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001ca4:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001ca8:	22fa      	movs	r2, #250	; 0xfa
 8001caa:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = SYSTEM_INFO;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	70da      	strb	r2, [r3, #3]
	Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cb4:	7f9b      	ldrb	r3, [r3, #30]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cbe:	f7ff f86d 	bl	8000d9c <calcCRC>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cc8:	77da      	strb	r2, [r3, #31]
	Master.Package[14] = Master.DataCRC;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001ccc:	7fdb      	ldrb	r3, [r3, #31]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cd2:	739a      	strb	r2, [r3, #14]
	Master.Package[15] = 0x0A;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cd6:	220a      	movs	r2, #10
 8001cd8:	73da      	strb	r2, [r3, #15]
	putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001cdc:	7f9b      	ldrb	r3, [r3, #30]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <SystemInfoAnswer+0xa0>)
 8001ce8:	f001 f8ee 	bl	8002ec8 <putDataInBufferUart2>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000d18 	.word	0x20000d18

08001cf4 <TIM7_Callback>:

void TIM7_Callback()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

	//logDebugD("l=",bufferUart1.rx_counter,0);
	//logDebugD("Le=",ParsingData.IsPassedPackageLengthFlag,0);
	//logDebugD("PB=",ParsingData.IsPassedPackageBeginFlag,0);
	//logDebugD("RE=",ParsingData.IsDataReadyReadFromBuffer,0)
	if (ParsingData.IsDataReadyReadFromBuffer == 1)
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <TIM7_Callback+0xe8>)
 8001cfc:	789b      	ldrb	r3, [r3, #2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d166      	bne.n	8001dd2 <TIM7_Callback+0xde>
	{
		if ( (getCharFromBufferUART2() == PACKAGE_BEGIN) )
 8001d04:	f001 f91a 	bl	8002f3c <getCharFromBufferUART2>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2bfe      	cmp	r3, #254	; 0xfe
 8001d0c:	d161      	bne.n	8001dd2 <TIM7_Callback+0xde>
		{
			ParsingData.IsDataReadyReadFromBuffer = 0;
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <TIM7_Callback+0xe8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	709a      	strb	r2, [r3, #2]
			//logDebug("PACKAGE_BEGIN");
			//logDebugD("l=",bufferUart1.rx_counter,0);

			Slave.Data_length = getCharFromBufferUART2();
 8001d14:	f001 f912 	bl	8002f3c <getCharFromBufferUART2>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <TIM7_Callback+0xec>)
 8001d1e:	779a      	strb	r2, [r3, #30]
			Slave.Package[0] = PACKAGE_BEGIN;
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <TIM7_Callback+0xec>)
 8001d22:	22fe      	movs	r2, #254	; 0xfe
 8001d24:	701a      	strb	r2, [r3, #0]
			Slave.Package[1] = Slave.Data_length;
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <TIM7_Callback+0xec>)
 8001d28:	7f9b      	ldrb	r3, [r3, #30]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <TIM7_Callback+0xec>)
 8001d2e:	705a      	strb	r2, [r3, #1]
			//logDebugD("Slave.Data_length  ",Slave.Data_length,0);
			if (Slave.Data_length <= DATALENGTH_MAX)
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <TIM7_Callback+0xec>)
 8001d32:	7f9b      	ldrb	r3, [r3, #30]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b1e      	cmp	r3, #30
 8001d38:	d84b      	bhi.n	8001dd2 <TIM7_Callback+0xde>
			{
				uint8_t i=0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8001d3e:	2302      	movs	r3, #2
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e009      	b.n	8001d58 <TIM7_Callback+0x64>
				{
					Slave.Package[i] = getCharFromBufferUART2();
 8001d44:	f001 f8fa 	bl	8002f3c <getCharFromBufferUART2>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	b2d1      	uxtb	r1, r2
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <TIM7_Callback+0xec>)
 8001d50:	54d1      	strb	r1, [r2, r3]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3301      	adds	r3, #1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <TIM7_Callback+0xec>)
 8001d5c:	7f9b      	ldrb	r3, [r3, #30]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	ddee      	ble.n	8001d44 <TIM7_Callback+0x50>
					//logDebugD("pack ",Slave.Package[i],0)
				}
				Slave.DataCRC = Slave.Package[i-2];
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	3b02      	subs	r3, #2
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <TIM7_Callback+0xec>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <TIM7_Callback+0xec>)
 8001d72:	77da      	strb	r2, [r3, #31]
				//logDebugD("CRC1",Slave.Package[i-2],0);
				//logDebugD("CRC2",Slave.Package[i-1],0);
				Slave.DataCRC_Calc = calcCRC(Slave.Package, Slave.Data_length, 0);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <TIM7_Callback+0xec>)
 8001d76:	7f9b      	ldrb	r3, [r3, #30]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4818      	ldr	r0, [pc, #96]	; (8001de0 <TIM7_Callback+0xec>)
 8001d80:	f7ff f80c 	bl	8000d9c <calcCRC>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <TIM7_Callback+0xec>)
 8001d8a:	f883 2020 	strb.w	r2, [r3, #32]
				if (Slave.DataCRC_Calc == Slave.DataCRC)
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <TIM7_Callback+0xec>)
 8001d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <TIM7_Callback+0xec>)
 8001d98:	7fdb      	ldrb	r3, [r3, #31]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d118      	bne.n	8001dd2 <TIM7_Callback+0xde>
				{
					//logDebug("CRC OK");
					if (Slave.Package[2] == READ_DATA)
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <TIM7_Callback+0xec>)
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2bfa      	cmp	r3, #250	; 0xfa
 8001da8:	d113      	bne.n	8001dd2 <TIM7_Callback+0xde>
					{
						//logDebug("READ Command");
						if(Slave.Package[3] == MAIN_SCREEN)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <TIM7_Callback+0xec>)
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b14      	cmp	r3, #20
 8001db2:	d101      	bne.n	8001db8 <TIM7_Callback+0xc4>
						{
							//logDebug("MAIN_SCREEN");
							MainScreenAnswer();
 8001db4:	f7ff fe8a 	bl	8001acc <MainScreenAnswer>
						}
						if(Slave.Package[3] == SYSTEM_INFO)
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <TIM7_Callback+0xec>)
 8001dba:	78db      	ldrb	r3, [r3, #3]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d107      	bne.n	8001dd2 <TIM7_Callback+0xde>
						{
							logDebug("SYSTEM_INFO");
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <TIM7_Callback+0xf0>)
 8001dc4:	f001 f98a 	bl	80030dc <printToBufferWithoutEndUART1>
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <TIM7_Callback+0xf4>)
 8001dca:	f001 f8fb 	bl	8002fc4 <printToBufferUART1>
							SystemInfoAnswer();
 8001dce:	f7ff ff3f 	bl	8001c50 <SystemInfoAnswer>
					}
				}//CRC
			}//DATALENGTH_MAX
		}//PACKAGE_BEGIN
	}//ParsingData.IsDataReadyReadFromBuffer
}//f
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200009a8 	.word	0x200009a8
 8001de0:	20000d44 	.word	0x20000d44
 8001de4:	08004790 	.word	0x08004790
 8001de8:	080047ec 	.word	0x080047ec

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff fd84 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001dfc:	f7ff fd68 	bl	80018d0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff f967 	bl	80010d4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001e06:	f7ff f989 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	210f      	movs	r1, #15
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f9d7 	bl	80011c4 <NVIC_EncodePriority>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1e:	f7ff f9a7 	bl	8001170 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001e22:	f7ff fe25 	bl	8001a70 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e26:	f000 fa05 	bl	8002234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2a:	f000 fcfb 	bl	8002824 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e2e:	f000 fa39 	bl	80022a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001e32:	f000 fc05 	bl	8002640 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001e36:	f000 fcdd 	bl	80027f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001e3a:	f000 fc6d 	bl	8002718 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001e3e:	f000 fbbf 	bl	80025c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  SystemCoreClockUpdate();
 8001e42:	f000 ff4b 	bl	8002cdc <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8001e46:	4bb5      	ldr	r3, [pc, #724]	; (800211c <main+0x330>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4ab5      	ldr	r2, [pc, #724]	; (8002120 <main+0x334>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9e8 	bl	8001228 <SysTick_Config>

	LoggingData.RecordsQuantity= 0;
 8001e58:	4bb2      	ldr	r3, [pc, #712]	; (8002124 <main+0x338>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
	uint8_t EEpromReadStatus;

	delay_ms(100);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f7fe ff88 	bl	8000d74 <delay_ms>
   GPIOA->BSRR =  GPIO_BSRR_BS11;//ON CPU
 8001e64:	4bb0      	ldr	r3, [pc, #704]	; (8002128 <main+0x33c>)
 8001e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e6a:	611a      	str	r2, [r3, #16]
   GPIOA->BSRR =  GPIO_BSRR_BS12;//12 V for
 8001e6c:	4bae      	ldr	r3, [pc, #696]	; (8002128 <main+0x33c>)
 8001e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e72:	611a      	str	r2, [r3, #16]
   GPIOB->BSRR =  GPIO_BSRR_BS4;//12 V for
 8001e74:	4bad      	ldr	r3, [pc, #692]	; (800212c <main+0x340>)
 8001e76:	2210      	movs	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
   logDebug("System ON");
 8001e7a:	48ad      	ldr	r0, [pc, #692]	; (8002130 <main+0x344>)
 8001e7c:	f001 f92e 	bl	80030dc <printToBufferWithoutEndUART1>
 8001e80:	48ac      	ldr	r0, [pc, #688]	; (8002134 <main+0x348>)
 8001e82:	f001 f89f 	bl	8002fc4 <printToBufferUART1>
	FlashVoltage = Voltage10Percent*ID_MAX_COUNT*10;
 8001e86:	4bac      	ldr	r3, [pc, #688]	; (8002138 <main+0x34c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	461a      	mov	r2, r3
 8001e98:	4ba8      	ldr	r3, [pc, #672]	; (800213c <main+0x350>)
 8001e9a:	601a      	str	r2, [r3, #0]

  //FactoryWriteToFlash_CRC();
	delay_ms(1000);
 8001e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea0:	f7fe ff68 	bl	8000d74 <delay_ms>

	flash_read_block();
 8001ea4:	f7fe fab2 	bl	800040c <flash_read_block>



	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <main+0x338>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b17      	cmp	r3, #23
 8001eae:	d902      	bls.n	8001eb6 <main+0xca>
 8001eb0:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <main+0x338>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
	EEpromReadStatus = ReadFromFlash();
 8001eb6:	f7fe fc41 	bl	800073c <ReadFromFlash>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
	if (EEpromReadStatus==0)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <main+0xf4>
	{
		delay_ms(1000);
 8001ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec8:	f7fe ff54 	bl	8000d74 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8001ecc:	f7fe fc36 	bl	800073c <ReadFromFlash>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
		logInfo("Read from EEprom - FAIL");
 8001ed4:	489a      	ldr	r0, [pc, #616]	; (8002140 <main+0x354>)
 8001ed6:	f001 f901 	bl	80030dc <printToBufferWithoutEndUART1>
 8001eda:	489a      	ldr	r0, [pc, #616]	; (8002144 <main+0x358>)
 8001edc:	f001 f872 	bl	8002fc4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 0)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <main+0x114>
	{

		delay_ms(4000);
 8001ee6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001eea:	f7fe ff43 	bl	8000d74 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8001eee:	4896      	ldr	r0, [pc, #600]	; (8002148 <main+0x35c>)
 8001ef0:	f7fe fc70 	bl	80007d4 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8001ef4:	4892      	ldr	r0, [pc, #584]	; (8002140 <main+0x354>)
 8001ef6:	f001 f8f1 	bl	80030dc <printToBufferWithoutEndUART1>
 8001efa:	4892      	ldr	r0, [pc, #584]	; (8002144 <main+0x358>)
 8001efc:	f001 f862 	bl	8002fc4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 1)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <main+0x126>
		logInfo("Read from EEprom - SUCCESS");
 8001f06:	488e      	ldr	r0, [pc, #568]	; (8002140 <main+0x354>)
 8001f08:	f001 f8e8 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f0c:	488f      	ldr	r0, [pc, #572]	; (800214c <main+0x360>)
 8001f0e:	f001 f859 	bl	8002fc4 <printToBufferUART1>



  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8001f12:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <main+0x364>)
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <main+0x368>)
 8001f18:	6013      	str	r3, [r2, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8001f1a:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <main+0x36c>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a8d      	ldr	r2, [pc, #564]	; (800215c <main+0x370>)
 8001f28:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <main+0x36c>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4a8c      	ldr	r2, [pc, #560]	; (8002160 <main+0x374>)
 8001f30:	6013      	str	r3, [r2, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <main+0x36c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <main+0x378>)
 8001f38:	6013      	str	r3, [r2, #0]
 // Generation_Coefficients_R_A_B();
  InfoToUARTBeforeStart();
 8001f3a:	f7fe fd99 	bl	8000a70 <InfoToUARTBeforeStart>
  logInfo(Version);
 8001f3e:	4880      	ldr	r0, [pc, #512]	; (8002140 <main+0x354>)
 8001f40:	f001 f8cc 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f44:	4888      	ldr	r0, [pc, #544]	; (8002168 <main+0x37c>)
 8001f46:	f001 f83d 	bl	8002fc4 <printToBufferUART1>
  delay_ms(1000);
 8001f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f4e:	f7fe ff11 	bl	8000d74 <delay_ms>

  //Output_ON();
  logDebug("OUTPUT ON");
 8001f52:	4877      	ldr	r0, [pc, #476]	; (8002130 <main+0x344>)
 8001f54:	f001 f8c2 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f58:	4884      	ldr	r0, [pc, #528]	; (800216c <main+0x380>)
 8001f5a:	f001 f833 	bl	8002fc4 <printToBufferUART1>
  //printToBufferUART1("Hello");

//	  GPIOC->BSRR =  GPIO_BSRR_BS15;
  Battery.LowBattery = 1;
 8001f5e:	4b84      	ldr	r3, [pc, #528]	; (8002170 <main+0x384>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BUT_GetKey();
 8001f64:	f7ff fd98 	bl	8001a98 <BUT_GetKey>
		//10 [9] B8
		//6  [6] I
		//5  [5] I
	//	Vref [15]

	  logDebugD("[6] ", RegularConvData[6],0);
 8001f68:	4871      	ldr	r0, [pc, #452]	; (8002130 <main+0x344>)
 8001f6a:	f001 f8b7 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f6e:	4b81      	ldr	r3, [pc, #516]	; (8002174 <main+0x388>)
 8001f70:	899b      	ldrh	r3, [r3, #12]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	487f      	ldr	r0, [pc, #508]	; (8002178 <main+0x38c>)
 8001f7a:	f001 f907 	bl	800318c <printToBufferUART1D>
	  logDebugD("I charge ", Battery.Current_Load,2);
 8001f7e:	486c      	ldr	r0, [pc, #432]	; (8002130 <main+0x344>)
 8001f80:	f001 f8ac 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <main+0x384>)
 8001f86:	88db      	ldrh	r3, [r3, #6]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	487b      	ldr	r0, [pc, #492]	; (800217c <main+0x390>)
 8001f90:	f001 f8fc 	bl	800318c <printToBufferUART1D>
	  logDebugD("[5] ", RegularConvData[5],0);
 8001f94:	4866      	ldr	r0, [pc, #408]	; (8002130 <main+0x344>)
 8001f96:	f001 f8a1 	bl	80030dc <printToBufferWithoutEndUART1>
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <main+0x388>)
 8001f9c:	895b      	ldrh	r3, [r3, #10]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4876      	ldr	r0, [pc, #472]	; (8002180 <main+0x394>)
 8001fa6:	f001 f8f1 	bl	800318c <printToBufferUART1D>
	  logDebugD("I Discharge ", Battery.Current_Charge,2);
 8001faa:	4861      	ldr	r0, [pc, #388]	; (8002130 <main+0x344>)
 8001fac:	f001 f896 	bl	80030dc <printToBufferWithoutEndUART1>
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <main+0x384>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4872      	ldr	r0, [pc, #456]	; (8002184 <main+0x398>)
 8001fbc:	f001 f8e6 	bl	800318c <printToBufferUART1D>
	  logDebugD("[4] ", RegularConvData[4],0);
 8001fc0:	485b      	ldr	r0, [pc, #364]	; (8002130 <main+0x344>)
 8001fc2:	f001 f88b 	bl	80030dc <printToBufferWithoutEndUART1>
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <main+0x388>)
 8001fc8:	891b      	ldrh	r3, [r3, #8]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	486d      	ldr	r0, [pc, #436]	; (8002188 <main+0x39c>)
 8001fd2:	f001 f8db 	bl	800318c <printToBufferUART1D>
	  logDebugD("B1 ", CellsDatabase[0].Voltage,2);
 8001fd6:	4856      	ldr	r0, [pc, #344]	; (8002130 <main+0x344>)
 8001fd8:	f001 f880 	bl	80030dc <printToBufferWithoutEndUART1>
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	; (800218c <main+0x3a0>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	486a      	ldr	r0, [pc, #424]	; (8002190 <main+0x3a4>)
 8001fe6:	f001 f8d1 	bl	800318c <printToBufferUART1D>
	  logDebugD("[3] ", RegularConvData[3],0);
 8001fea:	4851      	ldr	r0, [pc, #324]	; (8002130 <main+0x344>)
 8001fec:	f001 f876 	bl	80030dc <printToBufferWithoutEndUART1>
 8001ff0:	4b60      	ldr	r3, [pc, #384]	; (8002174 <main+0x388>)
 8001ff2:	88db      	ldrh	r3, [r3, #6]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4866      	ldr	r0, [pc, #408]	; (8002194 <main+0x3a8>)
 8001ffc:	f001 f8c6 	bl	800318c <printToBufferUART1D>
	  logDebugD("B2 ", CellsDatabase[1].Voltage,2);
 8002000:	484b      	ldr	r0, [pc, #300]	; (8002130 <main+0x344>)
 8002002:	f001 f86b 	bl	80030dc <printToBufferWithoutEndUART1>
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <main+0x3a0>)
 8002008:	8b9b      	ldrh	r3, [r3, #28]
 800200a:	2202      	movs	r2, #2
 800200c:	4619      	mov	r1, r3
 800200e:	4862      	ldr	r0, [pc, #392]	; (8002198 <main+0x3ac>)
 8002010:	f001 f8bc 	bl	800318c <printToBufferUART1D>
	  logDebugD("[1] ", RegularConvData[1],0);
 8002014:	4846      	ldr	r0, [pc, #280]	; (8002130 <main+0x344>)
 8002016:	f001 f861 	bl	80030dc <printToBufferWithoutEndUART1>
 800201a:	4b56      	ldr	r3, [pc, #344]	; (8002174 <main+0x388>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	485d      	ldr	r0, [pc, #372]	; (800219c <main+0x3b0>)
 8002026:	f001 f8b1 	bl	800318c <printToBufferUART1D>
	  logDebugD("B3 ", CellsDatabase[2].Voltage,2);
 800202a:	4841      	ldr	r0, [pc, #260]	; (8002130 <main+0x344>)
 800202c:	f001 f856 	bl	80030dc <printToBufferWithoutEndUART1>
 8002030:	4b56      	ldr	r3, [pc, #344]	; (800218c <main+0x3a0>)
 8002032:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002034:	2202      	movs	r2, #2
 8002036:	4619      	mov	r1, r3
 8002038:	4859      	ldr	r0, [pc, #356]	; (80021a0 <main+0x3b4>)
 800203a:	f001 f8a7 	bl	800318c <printToBufferUART1D>
	  logDebugD("[0] ", RegularConvData[0],0);
 800203e:	483c      	ldr	r0, [pc, #240]	; (8002130 <main+0x344>)
 8002040:	f001 f84c 	bl	80030dc <printToBufferWithoutEndUART1>
 8002044:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <main+0x388>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	4855      	ldr	r0, [pc, #340]	; (80021a4 <main+0x3b8>)
 8002050:	f001 f89c 	bl	800318c <printToBufferUART1D>
	  logDebugD("B4 ", CellsDatabase[3].Voltage,2);
 8002054:	4836      	ldr	r0, [pc, #216]	; (8002130 <main+0x344>)
 8002056:	f001 f841 	bl	80030dc <printToBufferWithoutEndUART1>
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <main+0x3a0>)
 800205c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002060:	2202      	movs	r2, #2
 8002062:	4619      	mov	r1, r3
 8002064:	4850      	ldr	r0, [pc, #320]	; (80021a8 <main+0x3bc>)
 8002066:	f001 f891 	bl	800318c <printToBufferUART1D>
	  logDebugD("[12] ", RegularConvData[12],0);
 800206a:	4831      	ldr	r0, [pc, #196]	; (8002130 <main+0x344>)
 800206c:	f001 f836 	bl	80030dc <printToBufferWithoutEndUART1>
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <main+0x388>)
 8002072:	8b1b      	ldrh	r3, [r3, #24]
 8002074:	b29b      	uxth	r3, r3
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	484c      	ldr	r0, [pc, #304]	; (80021ac <main+0x3c0>)
 800207c:	f001 f886 	bl	800318c <printToBufferUART1D>
	  logDebugD("B5 ", CellsDatabase[4].Voltage,2);
 8002080:	482b      	ldr	r0, [pc, #172]	; (8002130 <main+0x344>)
 8002082:	f001 f82b 	bl	80030dc <printToBufferWithoutEndUART1>
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <main+0x3a0>)
 8002088:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800208c:	2202      	movs	r2, #2
 800208e:	4619      	mov	r1, r3
 8002090:	4847      	ldr	r0, [pc, #284]	; (80021b0 <main+0x3c4>)
 8002092:	f001 f87b 	bl	800318c <printToBufferUART1D>
	  logDebugD("[11] ", RegularConvData[11],0);
 8002096:	4826      	ldr	r0, [pc, #152]	; (8002130 <main+0x344>)
 8002098:	f001 f820 	bl	80030dc <printToBufferWithoutEndUART1>
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <main+0x388>)
 800209e:	8adb      	ldrh	r3, [r3, #22]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4843      	ldr	r0, [pc, #268]	; (80021b4 <main+0x3c8>)
 80020a8:	f001 f870 	bl	800318c <printToBufferUART1D>
	  logDebugD("B6 ", CellsDatabase[5].Voltage,2);
 80020ac:	4820      	ldr	r0, [pc, #128]	; (8002130 <main+0x344>)
 80020ae:	f001 f815 	bl	80030dc <printToBufferWithoutEndUART1>
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <main+0x3a0>)
 80020b4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80020b8:	2202      	movs	r2, #2
 80020ba:	4619      	mov	r1, r3
 80020bc:	483e      	ldr	r0, [pc, #248]	; (80021b8 <main+0x3cc>)
 80020be:	f001 f865 	bl	800318c <printToBufferUART1D>
	  logDebugD("[10] ", RegularConvData[10],0);
 80020c2:	481b      	ldr	r0, [pc, #108]	; (8002130 <main+0x344>)
 80020c4:	f001 f80a 	bl	80030dc <printToBufferWithoutEndUART1>
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <main+0x388>)
 80020ca:	8a9b      	ldrh	r3, [r3, #20]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	483a      	ldr	r0, [pc, #232]	; (80021bc <main+0x3d0>)
 80020d4:	f001 f85a 	bl	800318c <printToBufferUART1D>
	  logDebugD("B7 ", CellsDatabase[6].Voltage,2);
 80020d8:	4815      	ldr	r0, [pc, #84]	; (8002130 <main+0x344>)
 80020da:	f000 ffff 	bl	80030dc <printToBufferWithoutEndUART1>
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <main+0x3a0>)
 80020e0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020e4:	2202      	movs	r2, #2
 80020e6:	4619      	mov	r1, r3
 80020e8:	4835      	ldr	r0, [pc, #212]	; (80021c0 <main+0x3d4>)
 80020ea:	f001 f84f 	bl	800318c <printToBufferUART1D>
	  logDebugD("[9] ", RegularConvData[9],0);
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <main+0x344>)
 80020f0:	f000 fff4 	bl	80030dc <printToBufferWithoutEndUART1>
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <main+0x388>)
 80020f6:	8a5b      	ldrh	r3, [r3, #18]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4831      	ldr	r0, [pc, #196]	; (80021c4 <main+0x3d8>)
 8002100:	f001 f844 	bl	800318c <printToBufferUART1D>
	  logDebugD("B8 ", CellsDatabase[7].Voltage,2);
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <main+0x344>)
 8002106:	f000 ffe9 	bl	80030dc <printToBufferWithoutEndUART1>
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <main+0x3a0>)
 800210c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002110:	2202      	movs	r2, #2
 8002112:	4619      	mov	r1, r3
 8002114:	482c      	ldr	r0, [pc, #176]	; (80021c8 <main+0x3dc>)
 8002116:	f001 f839 	bl	800318c <printToBufferUART1D>
 800211a:	e057      	b.n	80021cc <main+0x3e0>
 800211c:	200000cc 	.word	0x200000cc
 8002120:	10624dd3 	.word	0x10624dd3
 8002124:	20000b58 	.word	0x20000b58
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	08004790 	.word	0x08004790
 8002134:	08004808 	.word	0x08004808
 8002138:	20000d40 	.word	0x20000d40
 800213c:	200009e0 	.word	0x200009e0
 8002140:	0800476c 	.word	0x0800476c
 8002144:	08004814 	.word	0x08004814
 8002148:	0800482c 	.word	0x0800482c
 800214c:	0800483c 	.word	0x0800483c
 8002150:	2000009c 	.word	0x2000009c
 8002154:	200009d8 	.word	0x200009d8
 8002158:	20000054 	.word	0x20000054
 800215c:	20000dac 	.word	0x20000dac
 8002160:	20000db4 	.word	0x20000db4
 8002164:	20000d3c 	.word	0x20000d3c
 8002168:	200000bc 	.word	0x200000bc
 800216c:	08004858 	.word	0x08004858
 8002170:	20000b28 	.word	0x20000b28
 8002174:	20000b34 	.word	0x20000b34
 8002178:	08004864 	.word	0x08004864
 800217c:	0800486c 	.word	0x0800486c
 8002180:	08004878 	.word	0x08004878
 8002184:	08004880 	.word	0x08004880
 8002188:	08004890 	.word	0x08004890
 800218c:	20000a48 	.word	0x20000a48
 8002190:	08004898 	.word	0x08004898
 8002194:	0800489c 	.word	0x0800489c
 8002198:	080048a4 	.word	0x080048a4
 800219c:	080048a8 	.word	0x080048a8
 80021a0:	080048b0 	.word	0x080048b0
 80021a4:	080048b4 	.word	0x080048b4
 80021a8:	080048bc 	.word	0x080048bc
 80021ac:	080048c0 	.word	0x080048c0
 80021b0:	080048c8 	.word	0x080048c8
 80021b4:	080048cc 	.word	0x080048cc
 80021b8:	080048d4 	.word	0x080048d4
 80021bc:	080048d8 	.word	0x080048d8
 80021c0:	080048e0 	.word	0x080048e0
 80021c4:	080048e4 	.word	0x080048e4
 80021c8:	080048ec 	.word	0x080048ec

	  logDebugD("Ref ", RegularConvData[15],0);
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <main+0x42c>)
 80021ce:	f000 ff85 	bl	80030dc <printToBufferWithoutEndUART1>
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <main+0x430>)
 80021d4:	8bdb      	ldrh	r3, [r3, #30]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2200      	movs	r2, #0
 80021da:	4619      	mov	r1, r3
 80021dc:	4810      	ldr	r0, [pc, #64]	; (8002220 <main+0x434>)
 80021de:	f000 ffd5 	bl	800318c <printToBufferUART1D>
	  logDebugD("Ucontroller:", U_Controller,2);
 80021e2:	480d      	ldr	r0, [pc, #52]	; (8002218 <main+0x42c>)
 80021e4:	f000 ff7a 	bl	80030dc <printToBufferWithoutEndUART1>
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <main+0x438>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2202      	movs	r2, #2
 80021f0:	4619      	mov	r1, r3
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <main+0x43c>)
 80021f4:	f000 ffca 	bl	800318c <printToBufferUART1D>
	  logDebugD("Battery.Voltage:", Battery.Voltage,2);
 80021f8:	4807      	ldr	r0, [pc, #28]	; (8002218 <main+0x42c>)
 80021fa:	f000 ff6f 	bl	80030dc <printToBufferWithoutEndUART1>
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <main+0x440>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	2202      	movs	r2, #2
 8002206:	4619      	mov	r1, r3
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <main+0x444>)
 800220a:	f000 ffbf 	bl	800318c <printToBufferUART1D>
	 // logDebugD("PowerOffTimesec = ",PowerOffTimesec, 0);




	  delay_ms(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002212:	f7fe fdaf 	bl	8000d74 <delay_ms>
	  BUT_GetKey();
 8002216:	e6a5      	b.n	8001f64 <main+0x178>
 8002218:	08004790 	.word	0x08004790
 800221c:	20000b34 	.word	0x20000b34
 8002220:	080048f0 	.word	0x080048f0
 8002224:	20000b54 	.word	0x20000b54
 8002228:	080048f8 	.word	0x080048f8
 800222c:	20000b28 	.word	0x20000b28
 8002230:	08004908 	.word	0x08004908

08002234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 8002238:	f7ff fa60 	bl	80016fc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800223c:	bf00      	nop
 800223e:	f7ff fa6b 	bl	8001718 <LL_RCC_HSE_IsReady>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d1fa      	bne.n	800223e <SystemClock_Config+0xa>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 8002248:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800224c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002250:	f7ff fb04 	bl	800185c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002254:	f7ff fae2 	bl	800181c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002258:	bf00      	nop
 800225a:	f7ff faed 	bl	8001838 <LL_RCC_PLL_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d1fa      	bne.n	800225a <SystemClock_Config+0x26>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff fa89 	bl	800177c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fa9a 	bl	80017a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff faab 	bl	80017cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002276:	2002      	movs	r0, #2
 8002278:	f7ff fa60 	bl	800173c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800227c:	bf00      	nop
 800227e:	f7ff fa71 	bl	8001764 <LL_RCC_GetSysClkSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b08      	cmp	r3, #8
 8002286:	d1fa      	bne.n	800227e <SystemClock_Config+0x4a>
  {

  }
  LL_Init1msTick(24000000);
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <SystemClock_Config+0x6c>)
 800228a:	f001 fd8b 	bl	8003da4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <SystemClock_Config+0x6c>)
 8002290:	f001 fd96 	bl	8003dc0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff faad 	bl	80017f4 <LL_RCC_SetADCClockSource>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	016e3600 	.word	0x016e3600

080022a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	463b      	mov	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80022d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022d6:	f7ff fb13 	bl	8001900 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80022da:	2010      	movs	r0, #16
 80022dc:	f7ff fb10 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80022e0:	2004      	movs	r0, #4
 80022e2:	f7ff fb0d 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80022e6:	2008      	movs	r0, #8
 80022e8:	f7ff fb0a 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  PA7   ------> ADC1_IN7
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80022ec:	f643 733f 	movw	r3, #16191	; 0x3f3f
 80022f0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	463b      	mov	r3, r7
 80022f8:	4619      	mov	r1, r3
 80022fa:	489d      	ldr	r0, [pc, #628]	; (8002570 <MX_ADC1_Init+0x2cc>)
 80022fc:	f001 f990 	bl	8003620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	463b      	mov	r3, r7
 800230c:	4619      	mov	r1, r3
 800230e:	4899      	ldr	r0, [pc, #612]	; (8002574 <MX_ADC1_Init+0x2d0>)
 8002310:	f001 f986 	bl	8003620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002314:	f240 2302 	movw	r3, #514	; 0x202
 8002318:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	463b      	mov	r3, r7
 8002320:	4619      	mov	r1, r3
 8002322:	4895      	ldr	r0, [pc, #596]	; (8002578 <MX_ADC1_Init+0x2d4>)
 8002324:	f001 f97c 	bl	8003620 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002328:	2200      	movs	r2, #0
 800232a:	2101      	movs	r1, #1
 800232c:	4893      	ldr	r0, [pc, #588]	; (800257c <MX_ADC1_Init+0x2d8>)
 800232e:	f7ff f899 	bl	8001464 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	4891      	ldr	r0, [pc, #580]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002338:	f7ff f962 	bl	8001600 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800233c:	2220      	movs	r2, #32
 800233e:	2101      	movs	r1, #1
 8002340:	488e      	ldr	r0, [pc, #568]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002342:	f7ff f8b3 	bl	80014ac <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002346:	2200      	movs	r2, #0
 8002348:	2101      	movs	r1, #1
 800234a:	488c      	ldr	r0, [pc, #560]	; (800257c <MX_ADC1_Init+0x2d8>)
 800234c:	f7ff f8d0 	bl	80014f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	2101      	movs	r1, #1
 8002354:	4889      	ldr	r0, [pc, #548]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002356:	f7ff f8ed 	bl	8001534 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800235a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800235e:	2101      	movs	r1, #1
 8002360:	4886      	ldr	r0, [pc, #536]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002362:	f7ff f909 	bl	8001578 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800236a:	2101      	movs	r1, #1
 800236c:	4883      	ldr	r0, [pc, #524]	; (800257c <MX_ADC1_Init+0x2d8>)
 800236e:	f7ff f925 	bl	80015bc <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_ConfigAddresses(DMA1,
 8002372:	2100      	movs	r1, #0
 8002374:	4882      	ldr	r0, [pc, #520]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002376:	f7fe ff79 	bl	800126c <LL_ADC_DMA_GetRegAddr>
 800237a:	4602      	mov	r2, r0
 800237c:	4981      	ldr	r1, [pc, #516]	; (8002584 <MX_ADC1_Init+0x2e0>)
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	460b      	mov	r3, r1
 8002384:	2101      	movs	r1, #1
 8002386:	487d      	ldr	r0, [pc, #500]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002388:	f7ff f97e 	bl	8001688 <LL_DMA_ConfigAddresses>
                           (uint32_t)RegularConvData,
                           LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

   //LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,LL_ADC_DMA_GetRegAddr(ADC1,LL_ADC_DMA_REG_REGULAR_DATA));
   //LL_DMA_SetMemoryAddress(DMA1,LL_DMA_CHANNEL_1,RegularConvData);
   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, NUMBER_OF_CHANNELS);
 800238c:	2210      	movs	r2, #16
 800238e:	2101      	movs	r1, #1
 8002390:	487a      	ldr	r0, [pc, #488]	; (800257c <MX_ADC1_Init+0x2d8>)
 8002392:	f7ff f957 	bl	8001644 <LL_DMA_SetDataLength>
   //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
   //LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002396:	2101      	movs	r1, #1
 8002398:	4878      	ldr	r0, [pc, #480]	; (800257c <MX_ADC1_Init+0x2d8>)
 800239a:	f7ff f845 	bl	8001428 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80023a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80023a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ac:	4619      	mov	r1, r3
 80023ae:	4874      	ldr	r0, [pc, #464]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80023b0:	f001 f811 	bl	80033d6 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80023b4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80023b8:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS;
 80023ba:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 80023be:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80023c4:	2302      	movs	r3, #2
 80023c6:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80023c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	486a      	ldr	r0, [pc, #424]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80023d6:	f001 f825 	bl	8003424 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023e2:	4867      	ldr	r0, [pc, #412]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80023e4:	f7fe ff60 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80023e8:	2207      	movs	r2, #7
 80023ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ee:	4864      	ldr	r0, [pc, #400]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80023f0:	f7fe ff8f 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80023f4:	4a64      	ldr	r2, [pc, #400]	; (8002588 <MX_ADC1_Init+0x2e4>)
 80023f6:	f240 2105 	movw	r1, #517	; 0x205
 80023fa:	4861      	ldr	r0, [pc, #388]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80023fc:	f7fe ff54 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002400:	2207      	movs	r2, #7
 8002402:	4961      	ldr	r1, [pc, #388]	; (8002588 <MX_ADC1_Init+0x2e4>)
 8002404:	485e      	ldr	r0, [pc, #376]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002406:	f7fe ff84 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 800240a:	4a60      	ldr	r2, [pc, #384]	; (800258c <MX_ADC1_Init+0x2e8>)
 800240c:	f240 210a 	movw	r1, #522	; 0x20a
 8002410:	485b      	ldr	r0, [pc, #364]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002412:	f7fe ff49 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002416:	2207      	movs	r2, #7
 8002418:	495c      	ldr	r1, [pc, #368]	; (800258c <MX_ADC1_Init+0x2e8>)
 800241a:	4859      	ldr	r0, [pc, #356]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800241c:	f7fe ff79 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002420:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <MX_ADC1_Init+0x2ec>)
 8002422:	f240 210f 	movw	r1, #527	; 0x20f
 8002426:	4856      	ldr	r0, [pc, #344]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002428:	f7fe ff3e 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800242c:	2207      	movs	r2, #7
 800242e:	4958      	ldr	r1, [pc, #352]	; (8002590 <MX_ADC1_Init+0x2ec>)
 8002430:	4853      	ldr	r0, [pc, #332]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002432:	f7fe ff6e 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002436:	4a57      	ldr	r2, [pc, #348]	; (8002594 <MX_ADC1_Init+0x2f0>)
 8002438:	f44f 7105 	mov.w	r1, #532	; 0x214
 800243c:	4850      	ldr	r0, [pc, #320]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800243e:	f7fe ff33 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002442:	2207      	movs	r2, #7
 8002444:	4953      	ldr	r1, [pc, #332]	; (8002594 <MX_ADC1_Init+0x2f0>)
 8002446:	484e      	ldr	r0, [pc, #312]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002448:	f7fe ff63 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <MX_ADC1_Init+0x2f4>)
 800244e:	f240 2119 	movw	r1, #537	; 0x219
 8002452:	484b      	ldr	r0, [pc, #300]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002454:	f7fe ff28 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002458:	2207      	movs	r2, #7
 800245a:	494f      	ldr	r1, [pc, #316]	; (8002598 <MX_ADC1_Init+0x2f4>)
 800245c:	4848      	ldr	r0, [pc, #288]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800245e:	f7fe ff58 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002462:	4a4e      	ldr	r2, [pc, #312]	; (800259c <MX_ADC1_Init+0x2f8>)
 8002464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002468:	4845      	ldr	r0, [pc, #276]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800246a:	f7fe ff1d 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800246e:	2207      	movs	r2, #7
 8002470:	494a      	ldr	r1, [pc, #296]	; (800259c <MX_ADC1_Init+0x2f8>)
 8002472:	4843      	ldr	r0, [pc, #268]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002474:	f7fe ff4d 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002478:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <MX_ADC1_Init+0x2fc>)
 800247a:	f240 1105 	movw	r1, #261	; 0x105
 800247e:	4840      	ldr	r0, [pc, #256]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002480:	f7fe ff12 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002484:	2207      	movs	r2, #7
 8002486:	4946      	ldr	r1, [pc, #280]	; (80025a0 <MX_ADC1_Init+0x2fc>)
 8002488:	483d      	ldr	r0, [pc, #244]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800248a:	f7fe ff42 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_9);
 800248e:	4a45      	ldr	r2, [pc, #276]	; (80025a4 <MX_ADC1_Init+0x300>)
 8002490:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002494:	483a      	ldr	r0, [pc, #232]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002496:	f7fe ff07 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800249a:	2207      	movs	r2, #7
 800249c:	4941      	ldr	r1, [pc, #260]	; (80025a4 <MX_ADC1_Init+0x300>)
 800249e:	4838      	ldr	r0, [pc, #224]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024a0:	f7fe ff37 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_10);
 80024a4:	220a      	movs	r2, #10
 80024a6:	f240 110f 	movw	r1, #271	; 0x10f
 80024aa:	4835      	ldr	r0, [pc, #212]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024ac:	f7fe fefc 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80024b0:	2207      	movs	r2, #7
 80024b2:	210a      	movs	r1, #10
 80024b4:	4832      	ldr	r0, [pc, #200]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024b6:	f7fe ff2c 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_11);
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <MX_ADC1_Init+0x304>)
 80024bc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80024c0:	482f      	ldr	r0, [pc, #188]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024c2:	f7fe fef1 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80024c6:	2207      	movs	r2, #7
 80024c8:	4937      	ldr	r1, [pc, #220]	; (80025a8 <MX_ADC1_Init+0x304>)
 80024ca:	482d      	ldr	r0, [pc, #180]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024cc:	f7fe ff21 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_12);
 80024d0:	4a36      	ldr	r2, [pc, #216]	; (80025ac <MX_ADC1_Init+0x308>)
 80024d2:	f240 1119 	movw	r1, #281	; 0x119
 80024d6:	482a      	ldr	r0, [pc, #168]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024d8:	f7fe fee6 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80024dc:	2207      	movs	r2, #7
 80024de:	4933      	ldr	r1, [pc, #204]	; (80025ac <MX_ADC1_Init+0x308>)
 80024e0:	4827      	ldr	r0, [pc, #156]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024e2:	f7fe ff16 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_13);
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <MX_ADC1_Init+0x30c>)
 80024e8:	2100      	movs	r1, #0
 80024ea:	4825      	ldr	r0, [pc, #148]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024ec:	f7fe fedc 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80024f0:	2207      	movs	r2, #7
 80024f2:	492f      	ldr	r1, [pc, #188]	; (80025b0 <MX_ADC1_Init+0x30c>)
 80024f4:	4822      	ldr	r0, [pc, #136]	; (8002580 <MX_ADC1_Init+0x2dc>)
 80024f6:	f7fe ff0c 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_14);
 80024fa:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <MX_ADC1_Init+0x310>)
 80024fc:	2105      	movs	r1, #5
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002500:	f7fe fed2 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002504:	2207      	movs	r2, #7
 8002506:	492b      	ldr	r1, [pc, #172]	; (80025b4 <MX_ADC1_Init+0x310>)
 8002508:	481d      	ldr	r0, [pc, #116]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800250a:	f7fe ff02 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_15);
 800250e:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <MX_ADC1_Init+0x314>)
 8002510:	210a      	movs	r1, #10
 8002512:	481b      	ldr	r0, [pc, #108]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002514:	f7fe fec8 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002518:	2207      	movs	r2, #7
 800251a:	4927      	ldr	r1, [pc, #156]	; (80025b8 <MX_ADC1_Init+0x314>)
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800251e:	f7fe fef8 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_16, LL_ADC_CHANNEL_VREFINT);
 8002522:	4a26      	ldr	r2, [pc, #152]	; (80025bc <MX_ADC1_Init+0x318>)
 8002524:	210f      	movs	r1, #15
 8002526:	4816      	ldr	r0, [pc, #88]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002528:	f7fe febe 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800252c:	2207      	movs	r2, #7
 800252e:	4923      	ldr	r1, [pc, #140]	; (80025bc <MX_ADC1_Init+0x318>)
 8002530:	4813      	ldr	r0, [pc, #76]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002532:	f7fe feee 	bl	8001312 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8002536:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800253a:	4811      	ldr	r0, [pc, #68]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800253c:	f7fe fea2 	bl	8001284 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */
	 LL_ADC_Enable(ADC1);
 8002540:	480f      	ldr	r0, [pc, #60]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002542:	f7fe ff31 	bl	80013a8 <LL_ADC_Enable>
	  delay_ms(100);
 8002546:	2064      	movs	r0, #100	; 0x64
 8002548:	f7fe fc14 	bl	8000d74 <delay_ms>
	  LL_ADC_StartCalibration(ADC1);
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <MX_ADC1_Init+0x2dc>)
 800254e:	f7fe ff3a 	bl	80013c6 <LL_ADC_StartCalibration>
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8002552:	bf00      	nop
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002556:	f7fe ff45 	bl	80013e4 <LL_ADC_IsCalibrationOnGoing>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f9      	bne.n	8002554 <MX_ADC1_Init+0x2b0>
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8002560:	4807      	ldr	r0, [pc, #28]	; (8002580 <MX_ADC1_Init+0x2dc>)
 8002562:	f7fe ff51 	bl	8001408 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	40010800 	.word	0x40010800
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40020000 	.word	0x40020000
 8002580:	40012400 	.word	0x40012400
 8002584:	20000b34 	.word	0x20000b34
 8002588:	02300001 	.word	0x02300001
 800258c:	02600002 	.word	0x02600002
 8002590:	02900003 	.word	0x02900003
 8002594:	02c00004 	.word	0x02c00004
 8002598:	02f00005 	.word	0x02f00005
 800259c:	03200006 	.word	0x03200006
 80025a0:	03500007 	.word	0x03500007
 80025a4:	03b00009 	.word	0x03b00009
 80025a8:	0030000b 	.word	0x0030000b
 80025ac:	0060000c 	.word	0x0060000c
 80025b0:	0090000d 	.word	0x0090000d
 80025b4:	00c0000e 	.word	0x00c0000e
 80025b8:	00f0000f 	.word	0x00f0000f
 80025bc:	81500011 	.word	0x81500011

080025c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80025d4:	2020      	movs	r0, #32
 80025d6:	f7ff f97b 	bl	80018d0 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025da:	f7fe fd9f 	bl	800111c <__NVIC_GetPriorityGrouping>
 80025de:	4603      	mov	r3, r0
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fded 	bl	80011c4 <NVIC_EncodePriority>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	2037      	movs	r0, #55	; 0x37
 80025f0:	f7fe fdbe 	bl	8001170 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 80025f4:	2037      	movs	r0, #55	; 0x37
 80025f6:	f7fe fd9f 	bl	8001138 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 24000;
 80025fa:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80025fe:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 8002604:	230a      	movs	r3, #10
 8002606:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4619      	mov	r1, r3
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <MX_TIM7_Init+0x7c>)
 800260e:	f001 f9b3 	bl	8003978 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8002612:	480a      	ldr	r0, [pc, #40]	; (800263c <MX_TIM7_Init+0x7c>)
 8002614:	f7ff f99b 	bl	800194e <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
 8002618:	2120      	movs	r1, #32
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <MX_TIM7_Init+0x7c>)
 800261c:	f7ff f9a6 	bl	800196c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8002620:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_TIM7_Init+0x7c>)
 8002622:	f7ff f9b5 	bl	8001990 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
  LL_TIM_EnableCounter(TIM7);
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_TIM7_Init+0x7c>)
 8002628:	f7ff f982 	bl	8001930 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM7_Init+0x7c>)
 800262e:	f7ff f9be 	bl	80019ae <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM7_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40001400 	.word	0x40001400

08002640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265a:	463b      	mov	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002668:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266c:	f7ff f948 	bl	8001900 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002670:	2004      	movs	r0, #4
 8002672:	f7ff f945 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <MX_USART1_UART_Init+0xc8>)
 8002678:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800267a:	2309      	movs	r3, #9
 800267c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	463b      	mov	r3, r7
 8002688:	4619      	mov	r1, r3
 800268a:	4820      	ldr	r0, [pc, #128]	; (800270c <MX_USART1_UART_Init+0xcc>)
 800268c:	f000 ffc8 	bl	8003620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_USART1_UART_Init+0xd0>)
 8002692:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002694:	2304      	movs	r3, #4
 8002696:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	463b      	mov	r3, r7
 800269a:	4619      	mov	r1, r3
 800269c:	481b      	ldr	r0, [pc, #108]	; (800270c <MX_USART1_UART_Init+0xcc>)
 800269e:	f000 ffbf 	bl	8003620 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80026a2:	f7fe fd3b 	bl	800111c <__NVIC_GetPriorityGrouping>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd89 	bl	80011c4 <NVIC_EncodePriority>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	2025      	movs	r0, #37	; 0x25
 80026b8:	f7fe fd5a 	bl	8001170 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80026bc:	2025      	movs	r0, #37	; 0x25
 80026be:	f7fe fd3b 	bl	8001138 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80026c2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80026c6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80026d4:	230c      	movs	r3, #12
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	480b      	ldr	r0, [pc, #44]	; (8002714 <MX_USART1_UART_Init+0xd4>)
 80026e8:	f001 facc 	bl	8003c84 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80026ec:	4809      	ldr	r0, [pc, #36]	; (8002714 <MX_USART1_UART_Init+0xd4>)
 80026ee:	f7ff f97c 	bl	80019ea <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80026f2:	4808      	ldr	r0, [pc, #32]	; (8002714 <MX_USART1_UART_Init+0xd4>)
 80026f4:	f7ff f96a 	bl	80019cc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableIT_TXE(USART1);
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_USART1_UART_Init+0xd4>)
 80026fa:	f7ff f99a 	bl	8001a32 <LL_USART_EnableIT_TXE>
  // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END USART1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3730      	adds	r7, #48	; 0x30
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	04020002 	.word	0x04020002
 800270c:	40010800 	.word	0x40010800
 8002710:	04040004 	.word	0x04040004
 8002714:	40013800 	.word	0x40013800

08002718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002732:	463b      	mov	r3, r7
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002740:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002744:	f7ff f8c4 	bl	80018d0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002748:	2008      	movs	r0, #8
 800274a:	f7ff f8d9 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <MX_USART3_UART_Init+0xcc>)
 8002750:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002752:	2309      	movs	r3, #9
 8002754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	4821      	ldr	r0, [pc, #132]	; (80027e8 <MX_USART3_UART_Init+0xd0>)
 8002764:	f000 ff5c 	bl	8003620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <MX_USART3_UART_Init+0xd4>)
 800276a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800276c:	2304      	movs	r3, #4
 800276e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	463b      	mov	r3, r7
 8002772:	4619      	mov	r1, r3
 8002774:	481c      	ldr	r0, [pc, #112]	; (80027e8 <MX_USART3_UART_Init+0xd0>)
 8002776:	f000 ff53 	bl	8003620 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800277a:	f7fe fccf 	bl	800111c <__NVIC_GetPriorityGrouping>
 800277e:	4603      	mov	r3, r0
 8002780:	2200      	movs	r2, #0
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fd1d 	bl	80011c4 <NVIC_EncodePriority>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	2027      	movs	r0, #39	; 0x27
 8002790:	f7fe fcee 	bl	8001170 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002794:	2027      	movs	r0, #39	; 0x27
 8002796:	f7fe fccf 	bl	8001138 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800279a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800279e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027ac:	230c      	movs	r3, #12
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_USART3_UART_Init+0xd8>)
 80027c0:	f001 fa60 	bl	8003c84 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80027c4:	480a      	ldr	r0, [pc, #40]	; (80027f0 <MX_USART3_UART_Init+0xd8>)
 80027c6:	f7ff f910 	bl	80019ea <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <MX_USART3_UART_Init+0xd8>)
 80027cc:	f7ff f8fe 	bl	80019cc <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  //LL_USART_EnableIT_TXE(USART3);


  LL_USART_EnableIT_TXE(USART3);
 80027d0:	4807      	ldr	r0, [pc, #28]	; (80027f0 <MX_USART3_UART_Init+0xd8>)
 80027d2:	f7ff f92e 	bl	8001a32 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(USART3);
 80027d6:	4806      	ldr	r0, [pc, #24]	; (80027f0 <MX_USART3_UART_Init+0xd8>)
 80027d8:	f7ff f91c 	bl	8001a14 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART3_Init 2 */

}
 80027dc:	bf00      	nop
 80027de:	3730      	adds	r7, #48	; 0x30
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	04040004 	.word	0x04040004
 80027e8:	40010c00 	.word	0x40010c00
 80027ec:	04080008 	.word	0x04080008
 80027f0:	40004800 	.word	0x40004800

080027f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7ff f851 	bl	80018a0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027fe:	f7fe fc8d 	bl	800111c <__NVIC_GetPriorityGrouping>
 8002802:	4603      	mov	r3, r0
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fcdb 	bl	80011c4 <NVIC_EncodePriority>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	200b      	movs	r0, #11
 8002814:	f7fe fcac 	bl	8001170 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002818:	200b      	movs	r0, #11
 800281a:	f7fe fc8d 	bl	8001138 <__NVIC_EnableIRQ>

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002838:	2020      	movs	r0, #32
 800283a:	f7ff f861 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800283e:	2010      	movs	r0, #16
 8002840:	f7ff f85e 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002844:	2004      	movs	r0, #4
 8002846:	f7ff f85b 	bl	8001900 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800284a:	2008      	movs	r0, #8
 800284c:	f7ff f858 	bl	8001900 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8002850:	492e      	ldr	r1, [pc, #184]	; (800290c <MX_GPIO_Init+0xe8>)
 8002852:	482f      	ldr	r0, [pc, #188]	; (8002910 <MX_GPIO_Init+0xec>)
 8002854:	f7ff f8fc 	bl	8001a50 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8002858:	492e      	ldr	r1, [pc, #184]	; (8002914 <MX_GPIO_Init+0xf0>)
 800285a:	482f      	ldr	r0, [pc, #188]	; (8002918 <MX_GPIO_Init+0xf4>)
 800285c:	f7ff f8f8 	bl	8001a50 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8002860:	492e      	ldr	r1, [pc, #184]	; (800291c <MX_GPIO_Init+0xf8>)
 8002862:	482f      	ldr	r0, [pc, #188]	; (8002920 <MX_GPIO_Init+0xfc>)
 8002864:	f7ff f8f4 	bl	8001a50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8002868:	f240 4104 	movw	r1, #1028	; 0x404
 800286c:	482d      	ldr	r0, [pc, #180]	; (8002924 <MX_GPIO_Init+0x100>)
 800286e:	f7ff f8ef 	bl	8001a50 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <MX_GPIO_Init+0xe8>)
 8002874:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002876:	2301      	movs	r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800287a:	2302      	movs	r3, #2
 800287c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4822      	ldr	r0, [pc, #136]	; (8002910 <MX_GPIO_Init+0xec>)
 8002888:	f000 feca 	bl	8003620 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <MX_GPIO_Init+0xf0>)
 800288e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002890:	2301      	movs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002894:	2302      	movs	r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	481d      	ldr	r0, [pc, #116]	; (8002918 <MX_GPIO_Init+0xf4>)
 80028a2:	f000 febd 	bl	8003620 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <MX_GPIO_Init+0x104>)
 80028a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80028aa:	2304      	movs	r3, #4
 80028ac:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4819      	ldr	r0, [pc, #100]	; (8002918 <MX_GPIO_Init+0xf4>)
 80028b4:	f000 feb4 	bl	8003620 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_GPIO_Init+0xf8>)
 80028ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028bc:	2301      	movs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028c0:	2302      	movs	r3, #2
 80028c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4814      	ldr	r0, [pc, #80]	; (8002920 <MX_GPIO_Init+0xfc>)
 80028ce:	f000 fea7 	bl	8003620 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <MX_GPIO_Init+0x108>)
 80028d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028d6:	2308      	movs	r3, #8
 80028d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80028da:	2301      	movs	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	480d      	ldr	r0, [pc, #52]	; (8002918 <MX_GPIO_Init+0xf4>)
 80028e4:	f000 fe9c 	bl	8003620 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80028e8:	f240 4304 	movw	r3, #1028	; 0x404
 80028ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028ee:	2301      	movs	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028f2:	2302      	movs	r3, #2
 80028f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4809      	ldr	r0, [pc, #36]	; (8002924 <MX_GPIO_Init+0x100>)
 8002900:	f000 fe8e 	bl	8003620 <LL_GPIO_Init>

}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	04f138f9 	.word	0x04f138f9
 8002910:	40010c00 	.word	0x40010c00
 8002914:	041ac0da 	.word	0x041ac0da
 8002918:	40011000 	.word	0x40011000
 800291c:	04190019 	.word	0x04190019
 8002920:	40010800 	.word	0x40010800
 8002924:	40011400 	.word	0x40011400
 8002928:	04010001 	.word	0x04010001
 800292c:	04040004 	.word	0x04040004

08002930 <LL_TIM_ClearFlag_UPDATE>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f06f 0201 	mvn.w	r2, #1
 800293e:	611a      	str	r2, [r3, #16]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_TIM_IsActiveFlag_UPDATE>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_USART_IsActiveFlag_RXNE>:
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <NMI_Handler+0x4>

08002998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <HardFault_Handler+0x4>

0800299e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <BusFault_Handler+0x4>

080029aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <UsageFault_Handler+0x4>

080029b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART2)) //прерывание по передачи
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <USART1_IRQHandler+0x7c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d031      	beq.n	8002a60 <USART1_IRQHandler+0x74>
	{
		if (bufferUart1.tx_counter > 0) //е�?ли е�?ть что передать
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <USART1_IRQHandler+0x80>)
 80029fe:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d025      	beq.n	8002a54 <USART1_IRQHandler+0x68>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количе�?тво не переданных данных
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a0a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a16:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART3,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a1c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	b291      	uxth	r1, r2
 8002a26:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a28:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a30:	4413      	add	r3, r2
 8002a32:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <USART1_IRQHandler+0x7c>)
 8002a3a:	605a      	str	r2, [r3, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a3e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a48:	d10a      	bne.n	8002a60 <USART1_IRQHandler+0x74>
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <USART1_IRQHandler+0x80>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
	    	//LL_USART_DisableIT_TXE(USART2);
	    }
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8002a52:	e005      	b.n	8002a60 <USART1_IRQHandler+0x74>
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <USART1_IRQHandler+0x7c>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <USART1_IRQHandler+0x7c>)
 8002a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	200000f0 	.word	0x200000f0

08002a70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//if ( (USART1->SR & USART_SR_RXNE) !=0 ) //Ждем по�?туплени�? данных от компьютера
	volatile uint8_t data;
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8002a76:	4889      	ldr	r0, [pc, #548]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002a78:	f7ff ff79 	bl	800296e <LL_USART_IsActiveFlag_RXNE>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80cb 	beq.w	8002c1a <USART3_IRQHandler+0x1aa>
	{
	  data = (uint8_t) (USART3->DR & 0xFF);
 8002a84:	4b85      	ldr	r3, [pc, #532]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	71fb      	strb	r3, [r7, #7]

	  if ( (ParsingData.IsPassedPackageLengthFlag == 1)  )
 8002a8c:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d149      	bne.n	8002b2a <USART3_IRQHandler+0xba>
	  {
		  //logDebug("PD");
		  //logDebugD("i=",ParsingData.i,0);
		  //logDebugD("Le=",ParsingData.Length,0)
		  //logDebugD("Data=",data,0);
		  if (ParsingData.i < ParsingData.Length-2)
 8002a96:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002a98:	88db      	ldrh	r3, [r3, #6]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002aa0:	889b      	ldrh	r3, [r3, #4]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b02      	subs	r3, #2
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	da33      	bge.n	8002b12 <USART3_IRQHandler+0xa2>
		  {
			  ParsingData.i++;
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002aac:	88db      	ldrh	r3, [r3, #6]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002ab6:	80da      	strh	r2, [r3, #6]
			  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8002ab8:	4b7a      	ldr	r3, [pc, #488]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002aba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	b291      	uxth	r1, r2
 8002ac4:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002ac6:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8002aca:	461a      	mov	r2, r3
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	b2d9      	uxtb	r1, r3
 8002ad0:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002ad2:	5499      	strb	r1, [r3, r2]

			  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8002ad4:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002ad6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b64      	cmp	r3, #100	; 0x64
 8002ade:	d103      	bne.n	8002ae8 <USART3_IRQHandler+0x78>
 8002ae0:	4b70      	ldr	r3, [pc, #448]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8002ae8:	4b6e      	ldr	r3, [pc, #440]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002aea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002af6:	4619      	mov	r1, r3
 8002af8:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d114      	bne.n	8002b2a <USART3_IRQHandler+0xba>
			  {
				  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8002b08:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8002b10:	e00b      	b.n	8002b2a <USART3_IRQHandler+0xba>
			  }
		  }
		  else
		  {
			  //logDebug("else");
			  ParsingData.i = 0;
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	80da      	strh	r2, [r3, #6]
			  ParsingData.IsPassedPackageLengthFlag = 0;
 8002b18:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	705a      	strb	r2, [r3, #1]
			  ParsingData.IsPassedPackageBeginFlag = 0;
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
			  ParsingData.IsDataReadyReadFromBuffer = 1;
 8002b24:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	709a      	strb	r2, [r3, #2]
		  }
	  }
	  //
	  if ( (ParsingData.IsPassedPackageBeginFlag == 1) && (ParsingData.IsPassedPackageLengthFlag == 0) )
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d13a      	bne.n	8002baa <USART3_IRQHandler+0x13a>
 8002b34:	4b5a      	ldr	r3, [pc, #360]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b36:	785b      	ldrb	r3, [r3, #1]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d135      	bne.n	8002baa <USART3_IRQHandler+0x13a>
	  {
		  //logDebug("Length");
		  ParsingData.IsPassedPackageLengthFlag = 1;
 8002b3e:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	705a      	strb	r2, [r3, #1]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8002b44:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	b291      	uxth	r1, r2
 8002b50:	4a54      	ldr	r2, [pc, #336]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b52:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	b2d9      	uxtb	r1, r3
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b5e:	5499      	strb	r1, [r3, r2]
		  ParsingData.Length = data+1+1;
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3302      	adds	r3, #2
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002b6c:	809a      	strh	r2, [r3, #4]

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d103      	bne.n	8002b82 <USART3_IRQHandler+0x112>
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8002b82:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4a45      	ldr	r2, [pc, #276]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b90:	4619      	mov	r1, r3
 8002b92:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d107      	bne.n	8002baa <USART3_IRQHandler+0x13a>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8002ba2:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }
	  //
	  if ( (data == PACKAGE_BEGIN) && (ParsingData.IsPassedPackageBeginFlag == 0) )
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2bfe      	cmp	r3, #254	; 0xfe
 8002bb0:	d133      	bne.n	8002c1a <USART3_IRQHandler+0x1aa>
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12e      	bne.n	8002c1a <USART3_IRQHandler+0x1aa>
	  {
		  //logDebug("PB");
		  ParsingData.IsPassedPackageBeginFlag = 1;
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <USART3_IRQHandler+0x230>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002bc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	b291      	uxth	r1, r2
 8002bce:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002bd0:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	b2d9      	uxtb	r1, r3
 8002bda:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002bdc:	5499      	strb	r1, [r3, r2]
		  //bufferUart2.rx_buffer[bufferUart1.rx_wr_index++] = data; //BUG STUCK

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002be0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d103      	bne.n	8002bf2 <USART3_IRQHandler+0x182>
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002bf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d107      	bne.n	8002c1a <USART3_IRQHandler+0x1aa>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }

	}

	if ( (USART3->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d036      	beq.n	8002c94 <USART3_IRQHandler+0x224>
	{
		vard2++;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <USART3_IRQHandler+0x238>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <USART3_IRQHandler+0x238>)
 8002c2e:	6013      	str	r3, [r2, #0]
		if (bufferUart2.tx_counter > 0) //е�?ли е�?ть что передать
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c32:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d025      	beq.n	8002c88 <USART3_IRQHandler+0x218>
	    {
	      --bufferUart2.tx_counter; // уменьшаем количе�?тво не переданных данных
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c3e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c4a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART3->DR = bufferUart2.tx_buffer[bufferUart2.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c50:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	b291      	uxth	r1, r2
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c5c:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c64:	4413      	add	r3, r2
 8002c66:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002c6e:	605a      	str	r2, [r3, #4]
	      if (bufferUart2.tx_rd_index == TX_BUFFER_SIZE) bufferUart2.tx_rd_index=0; //идем по кругу
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c72:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7c:	d10a      	bne.n	8002c94 <USART3_IRQHandler+0x224>
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <USART3_IRQHandler+0x234>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c86:	e005      	b.n	8002c94 <USART3_IRQHandler+0x224>
	    	USART3->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <USART3_IRQHandler+0x22c>)
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40004800 	.word	0x40004800
 8002ca0:	200009a8 	.word	0x200009a8
 8002ca4:	2000054c 	.word	0x2000054c
 8002ca8:	200000ec 	.word	0x200000ec

08002cac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <TIM7_IRQHandler+0x20>)
 8002cb2:	f7ff fe4a 	bl	800294a <LL_TIM_IsActiveFlag_UPDATE>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <TIM7_IRQHandler+0x1a>
	  {
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <TIM7_IRQHandler+0x20>)
 8002cbe:	f7ff fe37 	bl	8002930 <LL_TIM_ClearFlag_UPDATE>
		TIM7_Callback();
 8002cc2:	f7ff f817 	bl	8001cf4 <TIM7_Callback>
	  }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40001400 	.word	0x40001400

08002cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
#endif /* STM32F105xC */

#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <SystemCoreClockUpdate+0xcc>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d011      	beq.n	8002d26 <SystemCoreClockUpdate+0x4a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d836      	bhi.n	8002d76 <SystemCoreClockUpdate+0x9a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <SystemCoreClockUpdate+0x3a>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d004      	beq.n	8002d1e <SystemCoreClockUpdate+0x42>
 8002d14:	e02f      	b.n	8002d76 <SystemCoreClockUpdate+0x9a>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <SystemCoreClockUpdate+0xd4>)
 8002d1a:	601a      	str	r2, [r3, #0]
      break;
 8002d1c:	e02f      	b.n	8002d7e <SystemCoreClockUpdate+0xa2>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <SystemCoreClockUpdate+0xd4>)
 8002d22:	601a      	str	r2, [r3, #0]
      break;
 8002d24:	e02b      	b.n	8002d7e <SystemCoreClockUpdate+0xa2>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <SystemCoreClockUpdate+0xcc>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d2e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <SystemCoreClockUpdate+0xcc>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0c9b      	lsrs	r3, r3, #18
 8002d3e:	3302      	adds	r3, #2
 8002d40:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <SystemCoreClockUpdate+0xd8>)
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	4a16      	ldr	r2, [pc, #88]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d52:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8002d54:	e013      	b.n	8002d7e <SystemCoreClockUpdate+0xa2>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <SystemCoreClockUpdate+0xcc>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <SystemCoreClockUpdate+0xd4>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d72:	6013      	str	r3, [r2, #0]
      break;
 8002d74:	e003      	b.n	8002d7e <SystemCoreClockUpdate+0xa2>

    default:
      SystemCoreClock = HSI_VALUE;
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <SystemCoreClockUpdate+0xd4>)
 8002d7a:	601a      	str	r2, [r3, #0]
      break;
 8002d7c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <SystemCoreClockUpdate+0xcc>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <SystemCoreClockUpdate+0xdc>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <SystemCoreClockUpdate+0xd0>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	200000cc 	.word	0x200000cc
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	003d0900 	.word	0x003d0900
 8002db8:	08004924 	.word	0x08004924

08002dbc <LL_USART_IsActiveFlag_TXE>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <LL_USART_EnableIT_TXE>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <putCharInBufferUart2>:
#endif
}


void putCharInBufferUart2(uint8_t c) //вывод данных
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
	//while (bufferUart2.tx_counter >= TX_BUFFER_SIZE); //если буфер переполнен, ждем
	LL_USART_DisableIT_TXE(USART3); //запрещаем прерывание, чтобы оно не мешало менять переменную
 8002e42:	481f      	ldr	r0, [pc, #124]	; (8002ec0 <putCharInBufferUart2+0x88>)
 8002e44:	f7ff ffdb 	bl	8002dfe <LL_USART_DisableIT_TXE>
	bufferUart2.tx_buffer[bufferUart2.tx_wr_index++]=c; //то кладем данные в буфер
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e4a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	b291      	uxth	r1, r2
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e56:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	79fa      	ldrb	r2, [r7, #7]
 8002e62:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart2.tx_wr_index == TX_BUFFER_SIZE)
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e68:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e72:	d103      	bne.n	8002e7c <putCharInBufferUart2+0x44>
		bufferUart2.tx_wr_index=0; //идем по кругу
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart2.tx_counter; //увеличиваем счетчик количества данных в буфере
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e7e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e8a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart2.tx_buffer_overflow < bufferUart2.tx_counter)
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e90:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002e98:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d206      	bcs.n	8002eb0 <putCharInBufferUart2+0x78>
			bufferUart2.tx_buffer_overflow = bufferUart2.tx_counter;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002ea4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <putCharInBufferUart2+0x8c>)
 8002eac:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	LL_USART_EnableIT_TXE(USART3); //разрешаем прерывание
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <putCharInBufferUart2+0x88>)
 8002eb2:	f7ff ff95 	bl	8002de0 <LL_USART_EnableIT_TXE>

}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40004800 	.word	0x40004800
 8002ec4:	2000054c 	.word	0x2000054c

08002ec8 <putDataInBufferUart2>:
  while (*s != 0)
	  putCharInBufferUart2(*s++);
}

void putDataInBufferUart2(volatile char *s, uint8_t lenght)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
    for (i = 0; i < lenght; i++ )
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e00a      	b.n	8002ef0 <putDataInBufferUart2+0x28>
    {
	   putCharInBufferUart2(s[i]);
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ffa7 	bl	8002e38 <putCharInBufferUart2>
    for (i = 0; i < lenght; i++ )
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3301      	adds	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d3f0      	bcc.n	8002eda <putDataInBufferUart2+0x12>
    }
    putCharInBufferUart2('\n');
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f7ff ff9d 	bl	8002e38 <putCharInBufferUart2>
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <putCharDirectToUart2>:



void putCharDirectToUart2(uint8_t c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3));
 8002f12:	bf00      	nop
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <putCharDirectToUart2+0x30>)
 8002f16:	f7ff ff51 	bl	8002dbc <LL_USART_IsActiveFlag_TXE>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f9      	beq.n	8002f14 <putCharDirectToUart2+0xc>
	LL_USART_TransmitData8(USART3, c);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4804      	ldr	r0, [pc, #16]	; (8002f38 <putCharDirectToUart2+0x30>)
 8002f26:	f7ff ff79 	bl	8002e1c <LL_USART_TransmitData8>
	c++;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	71fb      	strb	r3, [r7, #7]
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40004800 	.word	0x40004800

08002f3c <getCharFromBufferUART2>:
  while (*s != 0)
	  putCharDirectToUart2(*s++);
}

uint8_t getCharFromBufferUART2(void) //прием данных
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
	uint8_t data; //переменная для данных
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 8002f42:	bf00      	nop
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02d      	beq.n	8002fac <getCharFromBufferUART2+0x70>
	data=bufferUart2.rx_buffer[bufferUart2.rx_rd_index++]; //берем данные из буфера
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	b291      	uxth	r1, r2
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f5e:	f8a2 1066 	strh.w	r1, [r2, #102]	; 0x66
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	71fb      	strb	r3, [r7, #7]
	if (bufferUart2.rx_rd_index == RX_BUFFER_SIZE) bufferUart2.rx_rd_index=0; //идем по кругу
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d103      	bne.n	8002f7e <getCharFromBufferUART2+0x42>
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	USART3->CR1 &= ~USART_CR1_RXNEIE;  // Interrupt Disable
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <getCharFromBufferUART2+0x84>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <getCharFromBufferUART2+0x84>)
 8002f84:	f023 0320 	bic.w	r3, r3, #32
 8002f88:	60d3      	str	r3, [r2, #12]
	--bufferUart2.rx_counter; //чтобы оно не помешало изменить переменную
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <getCharFromBufferUART2+0x80>)
 8002f98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	USART3->CR1 |= USART_CR1_RXNEIE;// Interrupt enable
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <getCharFromBufferUART2+0x84>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <getCharFromBufferUART2+0x84>)
 8002fa2:	f043 0320 	orr.w	r3, r3, #32
 8002fa6:	60d3      	str	r3, [r2, #12]
	return data;
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	e001      	b.n	8002fb0 <getCharFromBufferUART2+0x74>
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop

}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000054c 	.word	0x2000054c
 8002fc0:	40004800 	.word	0x40004800

08002fc4 <printToBufferUART1>:

//UART3===========================================================


void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8002fcc:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <printToBufferUART1+0x110>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a40      	ldr	r2, [pc, #256]	; (80030d4 <printToBufferUART1+0x110>)
 8002fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd6:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 8002fd8:	e037      	b.n	800304a <printToBufferUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	4a3d      	ldr	r2, [pc, #244]	; (80030d8 <printToBufferUART1+0x114>)
 8002fe2:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8002fe6:	b292      	uxth	r2, r2
 8002fe8:	1c51      	adds	r1, r2, #1
 8002fea:	b288      	uxth	r0, r1
 8002fec:	493a      	ldr	r1, [pc, #232]	; (80030d8 <printToBufferUART1+0x114>)
 8002fee:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <printToBufferUART1+0x114>)
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <printToBufferUART1+0x114>)
 8003002:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8003006:	b29b      	uxth	r3, r3
 8003008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800300c:	d103      	bne.n	8003016 <printToBufferUART1+0x52>
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <printToBufferUART1+0x114>)
 8003010:	2200      	movs	r2, #0
 8003012:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <printToBufferUART1+0x114>)
 8003018:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800301c:	b29b      	uxth	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <printToBufferUART1+0x114>)
 8003024:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <printToBufferUART1+0x114>)
 800302a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <printToBufferUART1+0x114>)
 8003032:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003036:	b29b      	uxth	r3, r3
 8003038:	429a      	cmp	r2, r3
 800303a:	d206      	bcs.n	800304a <printToBufferUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <printToBufferUART1+0x114>)
 800303e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <printToBufferUART1+0x114>)
 8003046:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1c2      	bne.n	8002fda <printToBufferUART1+0x16>
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <printToBufferUART1+0x114>)
 8003056:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800305a:	b29b      	uxth	r3, r3
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	b291      	uxth	r1, r2
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <printToBufferUART1+0x114>)
 8003062:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8003066:	461a      	mov	r2, r3
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <printToBufferUART1+0x114>)
 800306a:	4413      	add	r3, r2
 800306c:	220a      	movs	r2, #10
 800306e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <printToBufferUART1+0x114>)
 8003074:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8003078:	b29b      	uxth	r3, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307e:	d103      	bne.n	8003088 <printToBufferUART1+0xc4>
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <printToBufferUART1+0x114>)
 8003082:	2200      	movs	r2, #0
 8003084:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <printToBufferUART1+0x114>)
 800308a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800308e:	b29b      	uxth	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <printToBufferUART1+0x114>)
 8003096:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800309a:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <printToBufferUART1+0x114>)
 800309c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <printToBufferUART1+0x114>)
 80030a4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d206      	bcs.n	80030bc <printToBufferUART1+0xf8>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <printToBufferUART1+0x114>)
 80030b0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <printToBufferUART1+0x114>)
 80030b8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <printToBufferUART1+0x110>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <printToBufferUART1+0x110>)
 80030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40013800 	.word	0x40013800
 80030d8:	200000f0 	.word	0x200000f0

080030dc <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <printToBufferWithoutEndUART1+0xa8>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <printToBufferWithoutEndUART1+0xa8>)
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80030f0:	e037      	b.n	8003162 <printToBufferWithoutEndUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 80030fa:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80030fe:	b292      	uxth	r2, r2
 8003100:	1c51      	adds	r1, r2, #1
 8003102:	b288      	uxth	r0, r1
 8003104:	4920      	ldr	r1, [pc, #128]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003106:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 800310a:	4611      	mov	r1, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003112:	440b      	add	r3, r1
 8003114:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 800311a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800311e:	b29b      	uxth	r3, r3
 8003120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003124:	d103      	bne.n	800312e <printToBufferWithoutEndUART1+0x52>
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003128:	2200      	movs	r2, #0
 800312a:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003130:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003134:	b29b      	uxth	r3, r3
 8003136:	3301      	adds	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 800313c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003142:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 800314a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800314e:	b29b      	uxth	r3, r3
 8003150:	429a      	cmp	r2, r3
 8003152:	d206      	bcs.n	8003162 <printToBufferWithoutEndUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 8003156:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800315a:	b29a      	uxth	r2, r3
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <printToBufferWithoutEndUART1+0xac>)
 800315e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1c2      	bne.n	80030f2 <printToBufferWithoutEndUART1+0x16>
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <printToBufferWithoutEndUART1+0xa8>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <printToBufferWithoutEndUART1+0xa8>)
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40013800 	.word	0x40013800
 8003188:	200000f0 	.word	0x200000f0

0800318c <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
	char *str1;
	if (koma == 0)
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <printToBufferUART1D+0x22>
		str1 = itoa(value);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd fe33 	bl	8000e10 <itoa>
 80031aa:	6178      	str	r0, [r7, #20]
 80031ac:	e007      	b.n	80031be <printToBufferUART1D+0x32>
	else
		str1 = itoa_koma(value,koma);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	79fa      	ldrb	r2, [r7, #7]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fea4 	bl	8000f04 <itoa_koma>
 80031bc:	6178      	str	r0, [r7, #20]

	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80031be:	4b5f      	ldr	r3, [pc, #380]	; (800333c <printToBufferUART1D+0x1b0>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a5e      	ldr	r2, [pc, #376]	; (800333c <printToBufferUART1D+0x1b0>)
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80031ca:	e037      	b.n	800323c <printToBufferUART1D+0xb0>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	60fa      	str	r2, [r7, #12]
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <printToBufferUART1D+0x1b4>)
 80031d4:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80031d8:	b292      	uxth	r2, r2
 80031da:	1c51      	adds	r1, r2, #1
 80031dc:	b288      	uxth	r0, r1
 80031de:	4958      	ldr	r1, [pc, #352]	; (8003340 <printToBufferUART1D+0x1b4>)
 80031e0:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80031e4:	4611      	mov	r1, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b55      	ldr	r3, [pc, #340]	; (8003340 <printToBufferUART1D+0x1b4>)
 80031ec:	440b      	add	r3, r1
 80031ee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80031f2:	4b53      	ldr	r3, [pc, #332]	; (8003340 <printToBufferUART1D+0x1b4>)
 80031f4:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031fe:	d103      	bne.n	8003208 <printToBufferUART1D+0x7c>
 8003200:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003202:	2200      	movs	r2, #0
 8003204:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8003208:	4b4d      	ldr	r3, [pc, #308]	; (8003340 <printToBufferUART1D+0x1b4>)
 800320a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800320e:	b29b      	uxth	r3, r3
 8003210:	3301      	adds	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003216:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <printToBufferUART1D+0x1b4>)
 800321c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8003220:	b29a      	uxth	r2, r3
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003224:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003228:	b29b      	uxth	r3, r3
 800322a:	429a      	cmp	r2, r3
 800322c:	d206      	bcs.n	800323c <printToBufferUART1D+0xb0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800322e:	4b44      	ldr	r3, [pc, #272]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003230:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b42      	ldr	r3, [pc, #264]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003238:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1c2      	bne.n	80031cc <printToBufferUART1D+0x40>
		#endif

	}

	while (*str1 != 0)
 8003246:	e036      	b.n	80032b6 <printToBufferUART1D+0x12a>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	617a      	str	r2, [r7, #20]
 800324e:	4a3c      	ldr	r2, [pc, #240]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003250:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8003254:	b292      	uxth	r2, r2
 8003256:	1c51      	adds	r1, r2, #1
 8003258:	b288      	uxth	r0, r1
 800325a:	4939      	ldr	r1, [pc, #228]	; (8003340 <printToBufferUART1D+0x1b4>)
 800325c:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8003260:	4611      	mov	r1, r2
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003266:	440b      	add	r3, r1
 8003268:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <printToBufferUART1D+0x1b4>)
 800326e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8003272:	b29b      	uxth	r3, r3
 8003274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003278:	d103      	bne.n	8003282 <printToBufferUART1D+0xf6>
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <printToBufferUART1D+0x1b4>)
 800327c:	2200      	movs	r2, #0
 800327e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003284:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003288:	b29b      	uxth	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003290:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003296:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <printToBufferUART1D+0x1b4>)
 800329e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d206      	bcs.n	80032b6 <printToBufferUART1D+0x12a>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032aa:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032b2:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str1 != 0)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1c4      	bne.n	8003248 <printToBufferUART1D+0xbc>
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032c0:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	b291      	uxth	r1, r2
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032cc:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032d4:	4413      	add	r3, r2
 80032d6:	220a      	movs	r2, #10
 80032d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032de:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e8:	d103      	bne.n	80032f2 <printToBufferUART1D+0x166>
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <printToBufferUART1D+0x1b4>)
 80032f4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003300:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003306:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <printToBufferUART1D+0x1b4>)
 800330e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003312:	b29b      	uxth	r3, r3
 8003314:	429a      	cmp	r2, r3
 8003316:	d206      	bcs.n	8003326 <printToBufferUART1D+0x19a>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <printToBufferUART1D+0x1b4>)
 800331a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <printToBufferUART1D+0x1b4>)
 8003322:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <printToBufferUART1D+0x1b0>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <printToBufferUART1D+0x1b0>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	60d3      	str	r3, [r2, #12]
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013800 	.word	0x40013800
 8003340:	200000f0 	.word	0x200000f0

08003344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800335c:	4c0a      	ldr	r4, [pc, #40]	; (8003388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800336a:	f7ff fcb1 	bl	8002cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336e:	f000 fd35 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003372:	f7fe fd3b 	bl	8001dec <main>
  bx lr
 8003376:	4770      	bx	lr
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800337c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8003380:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8003384:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8003388:	20000dbc 	.word	0x20000dbc

0800338c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC1_IRQHandler>

0800338e <LL_ADC_REG_SetSequencerLength>:
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <LL_ADC_IsEnabled>:
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ffe4 	bl	80033b2 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d112      	bne.n	8003416 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e001      	b.n	800341a <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffbd 	bl	80033b2 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d131      	bne.n	80034a2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	430b      	orrs	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e008      	b.n	8003472 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800347a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	68d2      	ldr	r2, [r2, #12]
 8003486:	4311      	orrs	r1, r2
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6912      	ldr	r2, [r2, #16]
 800348c:	430a      	orrs	r2, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff77 	bl	800338e <LL_ADC_REG_SetSequencerLength>
 80034a0:	e001      	b.n	80034a6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <LL_GPIO_SetPinMode>:
{
 80034b0:	b490      	push	{r4, r7}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0e1b      	lsrs	r3, r3, #24
 80034c4:	4413      	add	r3, r2
 80034c6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	613b      	str	r3, [r7, #16]
  return result;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	210f      	movs	r1, #15
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	401a      	ands	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	61bb      	str	r3, [r7, #24]
  return result;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	6023      	str	r3, [r4, #0]
}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bc90      	pop	{r4, r7}
 8003512:	4770      	bx	lr

08003514 <LL_GPIO_SetPinSpeed>:
{
 8003514:	b490      	push	{r4, r7}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0e1b      	lsrs	r3, r3, #24
 8003528:	4413      	add	r3, r2
 800352a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	613b      	str	r3, [r7, #16]
  return result;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	2103      	movs	r1, #3
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	401a      	ands	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	61bb      	str	r3, [r7, #24]
  return result;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	6023      	str	r3, [r4, #0]
}
 800356e:	bf00      	nop
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bc90      	pop	{r4, r7}
 8003576:	4770      	bx	lr

08003578 <LL_GPIO_SetPinOutputType>:
{
 8003578:	b490      	push	{r4, r7}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	4413      	add	r3, r2
 800358e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	613b      	str	r3, [r7, #16]
  return result;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	2104      	movs	r1, #4
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	401a      	ands	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	61bb      	str	r3, [r7, #24]
  return result;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc90      	pop	{r4, r7}
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_SetPinPull>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	613b      	str	r3, [r7, #16]
  return result;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	408b      	lsls	r3, r1
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	60fb      	str	r3, [r7, #12]
  return result;
 8003640:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800364a:	e044      	b.n	80036d6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	409a      	lsls	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03a      	beq.n	80036d0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d806      	bhi.n	800366e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003660:	f240 1201 	movw	r2, #257	; 0x101
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e008      	b.n	8003680 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b08      	subs	r3, #8
 8003672:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800367e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d106      	bne.n	8003696 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	461a      	mov	r2, r3
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ffa3 	bl	80035dc <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff06 	bl	80034b0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d003      	beq.n	80036b4 <LL_GPIO_Init+0x94>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	d10d      	bne.n	80036d0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	461a      	mov	r2, r3
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff54 	bl	8003578 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1b4      	bne.n	800364c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <LL_RCC_GetSysClkSource>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <LL_RCC_GetSysClkSource+0x14>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40021000 	.word	0x40021000

08003704 <LL_RCC_GetAHBPrescaler>:
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <LL_RCC_GetAHBPrescaler+0x14>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40021000 	.word	0x40021000

0800371c <LL_RCC_GetAPB1Prescaler>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40021000 	.word	0x40021000

08003734 <LL_RCC_GetAPB2Prescaler>:
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <LL_RCC_GetAPB2Prescaler+0x14>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	40021000 	.word	0x40021000

0800374c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <LL_RCC_PLL_GetMainSource+0x14>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	40021000 	.word	0x40021000

08003764 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000

0800377c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <LL_RCC_PLL_GetPrediv+0x14>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40021000 	.word	0x40021000

08003794 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800379c:	f000 f820 	bl	80037e0 <RCC_GetSystemClockFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f83e 	bl	800382c <RCC_GetHCLKClockFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f84c 	bl	8003858 <RCC_GetPCLK1ClockFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f858 	bl	8003880 <RCC_GetPCLK2ClockFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80037ea:	f7ff ff7f 	bl	80036ec <LL_RCC_GetSysClkSource>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00c      	beq.n	800380e <RCC_GetSystemClockFreq+0x2e>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d80e      	bhi.n	8003816 <RCC_GetSystemClockFreq+0x36>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <RCC_GetSystemClockFreq+0x22>
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d003      	beq.n	8003808 <RCC_GetSystemClockFreq+0x28>
 8003800:	e009      	b.n	8003816 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <RCC_GetSystemClockFreq+0x48>)
 8003804:	607b      	str	r3, [r7, #4]
      break;
 8003806:	e009      	b.n	800381c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <RCC_GetSystemClockFreq+0x48>)
 800380a:	607b      	str	r3, [r7, #4]
      break;
 800380c:	e006      	b.n	800381c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800380e:	f000 f84b 	bl	80038a8 <RCC_PLL_GetFreqDomain_SYS>
 8003812:	6078      	str	r0, [r7, #4]
      break;
 8003814:	e002      	b.n	800381c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <RCC_GetSystemClockFreq+0x48>)
 8003818:	607b      	str	r3, [r7, #4]
      break;
 800381a:	bf00      	nop
  }

  return frequency;
 800381c:	687b      	ldr	r3, [r7, #4]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	007a1200 	.word	0x007a1200

0800382c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003834:	f7ff ff66 	bl	8003704 <LL_RCC_GetAHBPrescaler>
 8003838:	4603      	mov	r3, r0
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <RCC_GetHCLKClockFreq+0x28>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	40d3      	lsrs	r3, r2
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	08004924 	.word	0x08004924

08003858 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003860:	f7ff ff5c 	bl	800371c <LL_RCC_GetAPB1Prescaler>
 8003864:	4603      	mov	r3, r0
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <RCC_GetPCLK1ClockFreq+0x24>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	40d3      	lsrs	r3, r2
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	08004934 	.word	0x08004934

08003880 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003888:	f7ff ff54 	bl	8003734 <LL_RCC_GetAPB2Prescaler>
 800388c:	4603      	mov	r3, r0
 800388e:	0adb      	lsrs	r3, r3, #11
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	40d3      	lsrs	r3, r2
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08004934 	.word	0x08004934

080038a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80038b6:	f7ff ff49 	bl	800374c <LL_RCC_PLL_GetMainSource>
 80038ba:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d003      	beq.n	80038d2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80038ca:	e00b      	b.n	80038e4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80038ce:	607b      	str	r3, [r7, #4]
      break;
 80038d0:	e00b      	b.n	80038ea <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80038d2:	f7ff ff53 	bl	800377c <LL_RCC_PLL_GetPrediv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	3301      	adds	r3, #1
 80038da:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	607b      	str	r3, [r7, #4]
      break;
 80038e2:	e002      	b.n	80038ea <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80038e6:	607b      	str	r3, [r7, #4]
      break;
 80038e8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80038ea:	f7ff ff3b 	bl	8003764 <LL_RCC_PLL_GetMultiplicator>
 80038ee:	4603      	mov	r3, r0
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	3302      	adds	r3, #2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	003d0900 	.word	0x003d0900
 8003908:	007a1200 	.word	0x007a1200

0800390c <LL_TIM_SetPrescaler>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_TIM_SetAutoReload>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <LL_TIM_SetRepetitionCounter>:
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	615a      	str	r2, [r3, #20]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <LL_TIM_Init+0x108>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00f      	beq.n	80039b0 <LL_TIM_Init+0x38>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003996:	d00b      	beq.n	80039b0 <LL_TIM_Init+0x38>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <LL_TIM_Init+0x10c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <LL_TIM_Init+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <LL_TIM_Init+0x110>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <LL_TIM_Init+0x38>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <LL_TIM_Init+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d106      	bne.n	80039be <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2f      	ldr	r2, [pc, #188]	; (8003a80 <LL_TIM_Init+0x108>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d027      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d023      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <LL_TIM_Init+0x10c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <LL_TIM_Init+0x110>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <LL_TIM_Init+0x114>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <LL_TIM_Init+0x118>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <LL_TIM_Init+0x11c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <LL_TIM_Init+0x120>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <LL_TIM_Init+0x124>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <LL_TIM_Init+0x128>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <LL_TIM_Init+0x9e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <LL_TIM_Init+0x12c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d106      	bne.n	8003a24 <LL_TIM_Init+0xac>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff78 	bl	8003926 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff65 	bl	800390c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <LL_TIM_Init+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <LL_TIM_Init+0xea>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <LL_TIM_Init+0x124>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <LL_TIM_Init+0xea>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <LL_TIM_Init+0x128>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <LL_TIM_Init+0xea>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <LL_TIM_Init+0x12c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d105      	bne.n	8003a6e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff69 	bl	8003940 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff73 	bl	800395a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40001800 	.word	0x40001800
 8003a94:	40001c00 	.word	0x40001c00
 8003a98:	40002000 	.word	0x40002000
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <LL_USART_IsEnabled>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <LL_USART_SetStopBitsLength>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	611a      	str	r2, [r3, #16]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <LL_USART_SetHWFlowCtrl>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	615a      	str	r2, [r3, #20]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
	...

08003b18 <LL_USART_SetBaudRate>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d152      	bne.n	8003bd4 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	4a4f      	ldr	r2, [pc, #316]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003b66:	fba3 0302 	umull	r0, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2064      	movs	r0, #100	; 0x64
 8003b6e:	fb00 f303 	mul.w	r3, r0, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	3332      	adds	r3, #50	; 0x32
 8003b78:	4a41      	ldr	r2, [pc, #260]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	b299      	uxth	r1, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009a      	lsls	r2, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba4:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	3332      	adds	r3, #50	; 0x32
 8003bb8:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	440b      	add	r3, r1
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	609a      	str	r2, [r3, #8]
}
 8003bd2:	e04f      	b.n	8003c74 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009a      	lsls	r2, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	b299      	uxth	r1, r3
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003c0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2064      	movs	r0, #100	; 0x64
 8003c14:	fb00 f303 	mul.w	r3, r0, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	440b      	add	r3, r1
 8003c30:	b299      	uxth	r1, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003c48:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2064      	movs	r0, #100	; 0x64
 8003c50:	fb00 f303 	mul.w	r3, r0, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <LL_USART_SetBaudRate+0x168>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	51eb851f 	.word	0x51eb851f

08003c84 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff06 	bl	8003aa8 <LL_USART_IsEnabled>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d157      	bne.n	8003d52 <LL_USART_Init+0xce>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003caa:	f023 030c 	bic.w	r3, r3, #12
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	6851      	ldr	r1, [r2, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	6912      	ldr	r2, [r2, #16]
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6992      	ldr	r2, [r2, #24]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fefc 	bl	8003ace <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff08 	bl	8003af2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd54 	bl	8003794 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <LL_USART_Init+0xd8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e01a      	b.n	8003d30 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <LL_USART_Init+0xdc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d102      	bne.n	8003d08 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e013      	b.n	8003d30 <LL_USART_Init+0xac>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <LL_USART_Init+0xe0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e00c      	b.n	8003d30 <LL_USART_Init+0xac>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <LL_USART_Init+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d102      	bne.n	8003d24 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e005      	b.n	8003d30 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <LL_USART_Init+0xe8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fee3 	bl	8003b18 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013800 	.word	0x40013800
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40004800 	.word	0x40004800
 8003d68:	40004c00 	.word	0x40004c00
 8003d6c:	40005000 	.word	0x40005000

08003d70 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <LL_InitTick+0x30>)
 8003d84:	3b01      	subs	r3, #1
 8003d86:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <LL_InitTick+0x30>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <LL_InitTick+0x30>)
 8003d90:	2205      	movs	r2, #5
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ffdd 	bl	8003d70 <LL_InitTick>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <LL_SetSystemCoreClock+0x18>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6013      	str	r3, [r2, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	200000cc 	.word	0x200000cc

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	2600      	movs	r6, #0
 8003de0:	4d0c      	ldr	r5, [pc, #48]	; (8003e14 <__libc_init_array+0x38>)
 8003de2:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	f000 f828 	bl	8003e40 <_init>
 8003df0:	2600      	movs	r6, #0
 8003df2:	4d0a      	ldr	r5, [pc, #40]	; (8003e1c <__libc_init_array+0x40>)
 8003df4:	4c0a      	ldr	r4, [pc, #40]	; (8003e20 <__libc_init_array+0x44>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	0800493c 	.word	0x0800493c
 8003e18:	0800493c 	.word	0x0800493c
 8003e1c:	0800493c 	.word	0x0800493c
 8003e20:	08004940 	.word	0x08004940

08003e24 <memcpy>:
 8003e24:	440a      	add	r2, r1
 8003e26:	4291      	cmp	r1, r2
 8003e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e2c:	d100      	bne.n	8003e30 <memcpy+0xc>
 8003e2e:	4770      	bx	lr
 8003e30:	b510      	push	{r4, lr}
 8003e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e36:	4291      	cmp	r1, r2
 8003e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e3c:	d1f9      	bne.n	8003e32 <memcpy+0xe>
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
