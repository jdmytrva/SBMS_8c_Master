
SBMS_8c_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001998  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001b7c  08001b7c  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b9c  08001b9c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001b9c  08001b9c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b9c  08001b9c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001ba8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001ba8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d1a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ab  00000000  00000000  00024d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00025ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00026588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cfcc  00000000  00000000  00026b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004844  00000000  00000000  00033b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004a4b2  00000000  00000000  00038390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00082842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a5c  00000000  00000000  00082898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	08001b64 	.word	0x08001b64

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	08001b64 	.word	0x08001b64

08000224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f003 0307 	and.w	r3, r3, #7
 8000232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__NVIC_SetPriorityGrouping+0x44>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800023a:	68ba      	ldr	r2, [r7, #8]
 800023c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000240:	4013      	ands	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800024c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000256:	4a04      	ldr	r2, [pc, #16]	; (8000268 <__NVIC_SetPriorityGrouping+0x44>)
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	60d3      	str	r3, [r2, #12]
}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <__NVIC_GetPriorityGrouping+0x18>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	0a1b      	lsrs	r3, r3, #8
 8000276:	f003 0307 	and.w	r3, r3, #7
}
 800027a:	4618      	mov	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	2b00      	cmp	r3, #0
 8000298:	db0b      	blt.n	80002b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 021f 	and.w	r2, r3, #31
 80002a0:	4906      	ldr	r1, [pc, #24]	; (80002bc <__NVIC_EnableIRQ+0x34>)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	095b      	lsrs	r3, r3, #5
 80002a8:	2001      	movs	r0, #1
 80002aa:	fa00 f202 	lsl.w	r2, r0, r2
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	db0a      	blt.n	80002ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <__NVIC_SetPriority+0x4c>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	0112      	lsls	r2, r2, #4
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	440b      	add	r3, r1
 80002e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e8:	e00a      	b.n	8000300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <__NVIC_SetPriority+0x50>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3b04      	subs	r3, #4
 80002f8:	0112      	lsls	r2, r2, #4
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	440b      	add	r3, r1
 80002fe:	761a      	strb	r2, [r3, #24]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f1c3 0307 	rsb	r3, r3, #7
 800032e:	2b04      	cmp	r3, #4
 8000330:	bf28      	it	cs
 8000332:	2304      	movcs	r3, #4
 8000334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3304      	adds	r3, #4
 800033a:	2b06      	cmp	r3, #6
 800033c:	d902      	bls.n	8000344 <NVIC_EncodePriority+0x30>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b03      	subs	r3, #3
 8000342:	e000      	b.n	8000346 <NVIC_EncodePriority+0x32>
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	f04f 32ff 	mov.w	r2, #4294967295
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	43da      	mvns	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	401a      	ands	r2, r3
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035c:	f04f 31ff 	mov.w	r1, #4294967295
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43d9      	mvns	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	4313      	orrs	r3, r2
         );
}
 800036e:	4618      	mov	r0, r3
 8000370:	3724      	adds	r7, #36	; 0x24
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	431a      	orrs	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	609a      	str	r2, [r3, #8]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	332c      	adds	r3, #44	; 0x2c
 80003ac:	4619      	mov	r1, r3
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80003b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003b8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ba:	69ba      	ldr	r2, [r7, #24]
 80003bc:	fa92 f2a2 	rbit	r2, r2
 80003c0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003c2:	697a      	ldr	r2, [r7, #20]
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	40d3      	lsrs	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	440b      	add	r3, r1
 80003d0:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	f003 031f 	and.w	r3, r3, #31
 80003dc:	211f      	movs	r1, #31
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43db      	mvns	r3, r3
 80003e4:	401a      	ands	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f003 011f 	and.w	r1, r3, #31
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	f003 031f 	and.w	r3, r3, #31
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	431a      	orrs	r2, r3
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003fc:	bf00      	nop
 80003fe:	3724      	adds	r7, #36	; 0x24
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000406:	b480      	push	{r7}
 8000408:	b08d      	sub	sp, #52	; 0x34
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	330c      	adds	r3, #12
 8000416:	4619      	mov	r1, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800041e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000422:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000424:	69ba      	ldr	r2, [r7, #24]
 8000426:	fa92 f2a2 	rbit	r2, r2
 800042a:	617a      	str	r2, [r7, #20]
  return result;
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	fab2 f282 	clz	r2, r2
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	40d3      	lsrs	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	440b      	add	r3, r1
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000446:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800044a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044c:	6a39      	ldr	r1, [r7, #32]
 800044e:	fa91 f1a1 	rbit	r1, r1
 8000452:	61f9      	str	r1, [r7, #28]
  return result;
 8000454:	69f9      	ldr	r1, [r7, #28]
 8000456:	fab1 f181 	clz	r1, r1
 800045a:	b2c9      	uxtb	r1, r1
 800045c:	40cb      	lsrs	r3, r1
 800045e:	2107      	movs	r1, #7
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	401a      	ands	r2, r3
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800046e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000472:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000476:	fa91 f1a1 	rbit	r1, r1
 800047a:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800047c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800047e:	fab1 f181 	clz	r1, r1
 8000482:	b2c9      	uxtb	r1, r1
 8000484:	40cb      	lsrs	r3, r1
 8000486:	6879      	ldr	r1, [r7, #4]
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	431a      	orrs	r2, r3
 800048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000490:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000492:	bf00      	nop
 8000494:	3734      	adds	r7, #52	; 0x34
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80004ae:	5cd3      	ldrb	r3, [r2, r3]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004bc:	f023 0310 	bic.w	r3, r3, #16
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	3a01      	subs	r2, #1
 80004c4:	4906      	ldr	r1, [pc, #24]	; (80004e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80004c6:	5c8a      	ldrb	r2, [r1, r2]
 80004c8:	4611      	mov	r1, r2
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	440a      	add	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	08001b7c 	.word	0x08001b7c

080004e4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LL_DMA_SetMode+0x40>)
 80004f6:	5cd3      	ldrb	r3, [r2, r3]
 80004f8:	461a      	mov	r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	4413      	add	r3, r2
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f023 0220 	bic.w	r2, r3, #32
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3b01      	subs	r3, #1
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <LL_DMA_SetMode+0x40>)
 800050a:	5ccb      	ldrb	r3, [r1, r3]
 800050c:	4619      	mov	r1, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	440b      	add	r3, r1
 8000512:	4619      	mov	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4313      	orrs	r3, r2
 8000518:	600b      	str	r3, [r1, #0]
             Mode);
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	08001b7c 	.word	0x08001b7c

08000528 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	3b01      	subs	r3, #1
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <LL_DMA_SetPeriphIncMode+0x40>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	461a      	mov	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3b01      	subs	r3, #1
 800054c:	4906      	ldr	r1, [pc, #24]	; (8000568 <LL_DMA_SetPeriphIncMode+0x40>)
 800054e:	5ccb      	ldrb	r3, [r1, r3]
 8000550:	4619      	mov	r1, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	440b      	add	r3, r1
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	08001b7c 	.word	0x08001b7c

0800056c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <LL_DMA_SetMemoryIncMode+0x40>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	461a      	mov	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3b01      	subs	r3, #1
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <LL_DMA_SetMemoryIncMode+0x40>)
 8000592:	5ccb      	ldrb	r3, [r1, r3]
 8000594:	4619      	mov	r1, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	440b      	add	r3, r1
 800059a:	4619      	mov	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4313      	orrs	r3, r2
 80005a0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	08001b7c 	.word	0x08001b7c

080005b0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <LL_DMA_SetPeriphSize+0x40>)
 80005c2:	5cd3      	ldrb	r3, [r2, r3]
 80005c4:	461a      	mov	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <LL_DMA_SetPeriphSize+0x40>)
 80005d6:	5ccb      	ldrb	r3, [r1, r3]
 80005d8:	4619      	mov	r1, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	440b      	add	r3, r1
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	08001b7c 	.word	0x08001b7c

080005f4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <LL_DMA_SetMemorySize+0x40>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3b01      	subs	r3, #1
 8000618:	4906      	ldr	r1, [pc, #24]	; (8000634 <LL_DMA_SetMemorySize+0x40>)
 800061a:	5ccb      	ldrb	r3, [r1, r3]
 800061c:	4619      	mov	r1, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	440b      	add	r3, r1
 8000622:	4619      	mov	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4313      	orrs	r3, r2
 8000628:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	08001b7c 	.word	0x08001b7c

08000638 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	461a      	mov	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4413      	add	r3, r2
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3b01      	subs	r3, #1
 800065c:	4906      	ldr	r1, [pc, #24]	; (8000678 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800065e:	5ccb      	ldrb	r3, [r1, r3]
 8000660:	4619      	mov	r1, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	440b      	add	r3, r1
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	08001b7c 	.word	0x08001b7c

0800067c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <LL_RCC_HSE_Enable+0x18>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <LL_RCC_HSE_Enable+0x18>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <LL_RCC_HSE_IsReady+0x20>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <LL_RCC_SetSysClkSource+0x24>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f023 0203 	bic.w	r2, r3, #3
 80006cc:	4904      	ldr	r1, [pc, #16]	; (80006e0 <LL_RCC_SetSysClkSource+0x24>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	604b      	str	r3, [r1, #4]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <LL_RCC_GetSysClkSource+0x14>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f003 030c 	and.w	r3, r3, #12
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000

080006fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_RCC_SetAHBPrescaler+0x24>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <LL_RCC_SetAHBPrescaler+0x24>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	604b      	str	r3, [r1, #4]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_RCC_SetAPB1Prescaler+0x24>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	604b      	str	r3, [r1, #4]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_RCC_SetAPB2Prescaler+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	604b      	str	r3, [r1, #4]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetADCClockSource+0x24>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetADCClockSource+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	604b      	str	r3, [r1, #4]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <LL_RCC_PLL_Enable+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <LL_RCC_PLL_Enable+0x18>)
 80007a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <LL_RCC_PLL_IsReady+0x20>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000

080007dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	430b      	orrs	r3, r1
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	604b      	str	r3, [r1, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	f023 020f 	bic.w	r2, r3, #15
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	4903      	ldr	r1, [pc, #12]	; (800081c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800080e:	4313      	orrs	r3, r2
 8000810:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000

08000820 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4313      	orrs	r3, r2
 8000832:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <LL_APB1_GRP1_EnableClock+0x2c>)
 800085a:	69da      	ldr	r2, [r3, #28]
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <LL_APB1_GRP1_EnableClock+0x2c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4013      	ands	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4313      	orrs	r3, r2
 8000892:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	699a      	ldr	r2, [r3, #24]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4013      	ands	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	431a      	orrs	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	609a      	str	r2, [r3, #8]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	615a      	str	r2, [r3, #20]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	615a      	str	r2, [r3, #20]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
	...

08000978 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000986:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	6053      	str	r3, [r2, #4]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40010000 	.word	0x40010000

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff6b 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009ae:	f7ff ff4f 	bl	8000850 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b2:	2003      	movs	r0, #3
 80009b4:	f7ff fc36 	bl	8000224 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80009b8:	f7ff fc58 	bl	800026c <__NVIC_GetPriorityGrouping>
 80009bc:	4603      	mov	r3, r0
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fca6 	bl	8000314 <NVIC_EncodePriority>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f7ff fc76 	bl	80002c0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80009d4:	f7ff ffd0 	bl	8000978 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f80e 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f000 fa98 	bl	8000f10 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009e0:	f000 f842 	bl	8000a68 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80009e4:	f000 f9cc 	bl	8000d80 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80009e8:	f000 fa7a 	bl	8000ee0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 fa20 	bl	8000e30 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80009f0:	f000 f99c 	bl	8000d2c <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0x54>
	...

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 80009fc:	f7ff fe3e 	bl	800067c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a00:	bf00      	nop
 8000a02:	f7ff fe49 	bl	8000698 <LL_RCC_HSE_IsReady>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d1fa      	bne.n	8000a02 <SystemClock_Config+0xa>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 8000a0c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000a10:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a14:	f7ff fee2 	bl	80007dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a18:	f7ff fec0 	bl	800079c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a1c:	bf00      	nop
 8000a1e:	f7ff fecb 	bl	80007b8 <LL_RCC_PLL_IsReady>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d1fa      	bne.n	8000a1e <SystemClock_Config+0x26>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fe67 	bl	80006fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe78 	bl	8000724 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fe89 	bl	800074c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff fe3e 	bl	80006bc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a40:	bf00      	nop
 8000a42:	f7ff fe4f 	bl	80006e4 <LL_RCC_GetSysClkSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d1fa      	bne.n	8000a42 <SystemClock_Config+0x4a>
  {

  }
  LL_Init1msTick(24000000);
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <SystemClock_Config+0x6c>)
 8000a4e:	f001 f849 	bl	8001ae4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <SystemClock_Config+0x6c>)
 8000a54:	f001 f854 	bl	8001b00 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe8b 	bl	8000774 <LL_RCC_SetADCClockSource>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	016e3600 	.word	0x016e3600

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000a96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a9a:	f7ff fef1 	bl	8000880 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f7ff feee 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f7ff feeb 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f7ff fee8 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  PA7   ------> ADC1_IN7
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000ab0:	f643 733f 	movw	r3, #16191	; 0x3f3f
 8000ab4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4888      	ldr	r0, [pc, #544]	; (8000ce0 <MX_ADC1_Init+0x278>)
 8000ac0:	f000 fc4e 	bl	8001360 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4884      	ldr	r0, [pc, #528]	; (8000ce4 <MX_ADC1_Init+0x27c>)
 8000ad4:	f000 fc44 	bl	8001360 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ad8:	f240 2302 	movw	r3, #514	; 0x202
 8000adc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4880      	ldr	r0, [pc, #512]	; (8000ce8 <MX_ADC1_Init+0x280>)
 8000ae8:	f000 fc3a 	bl	8001360 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	487e      	ldr	r0, [pc, #504]	; (8000cec <MX_ADC1_Init+0x284>)
 8000af2:	f7ff fcd3 	bl	800049c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	487c      	ldr	r0, [pc, #496]	; (8000cec <MX_ADC1_Init+0x284>)
 8000afc:	f7ff fd9c 	bl	8000638 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000b00:	2220      	movs	r2, #32
 8000b02:	2101      	movs	r1, #1
 8000b04:	4879      	ldr	r0, [pc, #484]	; (8000cec <MX_ADC1_Init+0x284>)
 8000b06:	f7ff fced 	bl	80004e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4877      	ldr	r0, [pc, #476]	; (8000cec <MX_ADC1_Init+0x284>)
 8000b10:	f7ff fd0a 	bl	8000528 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	2101      	movs	r1, #1
 8000b18:	4874      	ldr	r0, [pc, #464]	; (8000cec <MX_ADC1_Init+0x284>)
 8000b1a:	f7ff fd27 	bl	800056c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b22:	2101      	movs	r1, #1
 8000b24:	4871      	ldr	r0, [pc, #452]	; (8000cec <MX_ADC1_Init+0x284>)
 8000b26:	f7ff fd43 	bl	80005b0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2e:	2101      	movs	r1, #1
 8000b30:	486e      	ldr	r0, [pc, #440]	; (8000cec <MX_ADC1_Init+0x284>)
 8000b32:	f7ff fd5f 	bl	80005f4 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b44:	4619      	mov	r1, r3
 8000b46:	486a      	ldr	r0, [pc, #424]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b48:	f000 fae5 	bl	8001116 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000b4c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000b50:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS;
 8000b52:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8000b56:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4860      	ldr	r0, [pc, #384]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b6e:	f000 faf9 	bl	8001164 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	485d      	ldr	r0, [pc, #372]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b7c:	f7ff fc0e 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000b80:	2207      	movs	r2, #7
 8000b82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b86:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b88:	f7ff fc3d 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8000b8c:	4a59      	ldr	r2, [pc, #356]	; (8000cf4 <MX_ADC1_Init+0x28c>)
 8000b8e:	f240 2105 	movw	r1, #517	; 0x205
 8000b92:	4857      	ldr	r0, [pc, #348]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b94:	f7ff fc02 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000b98:	2207      	movs	r2, #7
 8000b9a:	4956      	ldr	r1, [pc, #344]	; (8000cf4 <MX_ADC1_Init+0x28c>)
 8000b9c:	4854      	ldr	r0, [pc, #336]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000b9e:	f7ff fc32 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8000ba2:	4a55      	ldr	r2, [pc, #340]	; (8000cf8 <MX_ADC1_Init+0x290>)
 8000ba4:	f240 210a 	movw	r1, #522	; 0x20a
 8000ba8:	4851      	ldr	r0, [pc, #324]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000baa:	f7ff fbf7 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000bae:	2207      	movs	r2, #7
 8000bb0:	4951      	ldr	r1, [pc, #324]	; (8000cf8 <MX_ADC1_Init+0x290>)
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bb4:	f7ff fc27 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8000bb8:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <MX_ADC1_Init+0x294>)
 8000bba:	f240 210f 	movw	r1, #527	; 0x20f
 8000bbe:	484c      	ldr	r0, [pc, #304]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bc0:	f7ff fbec 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	494d      	ldr	r1, [pc, #308]	; (8000cfc <MX_ADC1_Init+0x294>)
 8000bc8:	4849      	ldr	r0, [pc, #292]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bca:	f7ff fc1c 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <MX_ADC1_Init+0x298>)
 8000bd0:	f44f 7105 	mov.w	r1, #532	; 0x214
 8000bd4:	4846      	ldr	r0, [pc, #280]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bd6:	f7ff fbe1 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000bda:	2207      	movs	r2, #7
 8000bdc:	4948      	ldr	r1, [pc, #288]	; (8000d00 <MX_ADC1_Init+0x298>)
 8000bde:	4844      	ldr	r0, [pc, #272]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000be0:	f7ff fc11 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8000be4:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <MX_ADC1_Init+0x29c>)
 8000be6:	f240 2119 	movw	r1, #537	; 0x219
 8000bea:	4841      	ldr	r0, [pc, #260]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bec:	f7ff fbd6 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	4944      	ldr	r1, [pc, #272]	; (8000d04 <MX_ADC1_Init+0x29c>)
 8000bf4:	483e      	ldr	r0, [pc, #248]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000bf6:	f7ff fc06 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8000bfa:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <MX_ADC1_Init+0x2a0>)
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c02:	f7ff fbcb 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c06:	2207      	movs	r2, #7
 8000c08:	493f      	ldr	r1, [pc, #252]	; (8000d08 <MX_ADC1_Init+0x2a0>)
 8000c0a:	4839      	ldr	r0, [pc, #228]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c0c:	f7ff fbfb 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8000c10:	4a3e      	ldr	r2, [pc, #248]	; (8000d0c <MX_ADC1_Init+0x2a4>)
 8000c12:	f240 1105 	movw	r1, #261	; 0x105
 8000c16:	4836      	ldr	r0, [pc, #216]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c18:	f7ff fbc0 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	493b      	ldr	r1, [pc, #236]	; (8000d0c <MX_ADC1_Init+0x2a4>)
 8000c20:	4833      	ldr	r0, [pc, #204]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c22:	f7ff fbf0 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_9);
 8000c26:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <MX_ADC1_Init+0x2a8>)
 8000c28:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8000c2c:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c2e:	f7ff fbb5 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c32:	2207      	movs	r2, #7
 8000c34:	4936      	ldr	r1, [pc, #216]	; (8000d10 <MX_ADC1_Init+0x2a8>)
 8000c36:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c38:	f7ff fbe5 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_10);
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	f240 110f 	movw	r1, #271	; 0x10f
 8000c42:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c44:	f7ff fbaa 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c48:	2207      	movs	r2, #7
 8000c4a:	210a      	movs	r1, #10
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c4e:	f7ff fbda 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_11);
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <MX_ADC1_Init+0x2ac>)
 8000c54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c58:	4825      	ldr	r0, [pc, #148]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c5a:	f7ff fb9f 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c5e:	2207      	movs	r2, #7
 8000c60:	492c      	ldr	r1, [pc, #176]	; (8000d14 <MX_ADC1_Init+0x2ac>)
 8000c62:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c64:	f7ff fbcf 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_12);
 8000c68:	4a2b      	ldr	r2, [pc, #172]	; (8000d18 <MX_ADC1_Init+0x2b0>)
 8000c6a:	f240 1119 	movw	r1, #281	; 0x119
 8000c6e:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c70:	f7ff fb94 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c74:	2207      	movs	r2, #7
 8000c76:	4928      	ldr	r1, [pc, #160]	; (8000d18 <MX_ADC1_Init+0x2b0>)
 8000c78:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c7a:	f7ff fbc4 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_13);
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <MX_ADC1_Init+0x2b4>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c84:	f7ff fb8a 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c88:	2207      	movs	r2, #7
 8000c8a:	4924      	ldr	r1, [pc, #144]	; (8000d1c <MX_ADC1_Init+0x2b4>)
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c8e:	f7ff fbba 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_14);
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_ADC1_Init+0x2b8>)
 8000c94:	2105      	movs	r1, #5
 8000c96:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000c98:	f7ff fb80 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	4920      	ldr	r1, [pc, #128]	; (8000d20 <MX_ADC1_Init+0x2b8>)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000ca2:	f7ff fbb0 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_15);
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <MX_ADC1_Init+0x2bc>)
 8000ca8:	210a      	movs	r1, #10
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000cac:	f7ff fb76 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	491c      	ldr	r1, [pc, #112]	; (8000d24 <MX_ADC1_Init+0x2bc>)
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000cb6:	f7ff fba6 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_16, LL_ADC_CHANNEL_VREFINT);
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <MX_ADC1_Init+0x2c0>)
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000cc0:	f7ff fb6c 	bl	800039c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	4918      	ldr	r1, [pc, #96]	; (8000d28 <MX_ADC1_Init+0x2c0>)
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000cca:	f7ff fb9c 	bl	8000406 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000cce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_ADC1_Init+0x288>)
 8000cd4:	f7ff fb50 	bl	8000378 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40012400 	.word	0x40012400
 8000cf4:	02300001 	.word	0x02300001
 8000cf8:	02600002 	.word	0x02600002
 8000cfc:	02900003 	.word	0x02900003
 8000d00:	02c00004 	.word	0x02c00004
 8000d04:	02f00005 	.word	0x02f00005
 8000d08:	03200006 	.word	0x03200006
 8000d0c:	03500007 	.word	0x03500007
 8000d10:	03b00009 	.word	0x03b00009
 8000d14:	0030000b 	.word	0x0030000b
 8000d18:	0060000c 	.word	0x0060000c
 8000d1c:	0090000d 	.word	0x0090000d
 8000d20:	00c0000e 	.word	0x00c0000e
 8000d24:	00f0000f 	.word	0x00f0000f
 8000d28:	81500011 	.word	0x81500011

08000d2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8000d40:	2020      	movs	r0, #32
 8000d42:	f7ff fd85 	bl	8000850 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 24000;
 8000d46:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000d4a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 8000d50:	230a      	movs	r3, #10
 8000d52:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_TIM7_Init+0x50>)
 8000d5a:	f000 fcad 	bl	80016b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <MX_TIM7_Init+0x50>)
 8000d60:	f7ff fda6 	bl	80008b0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
 8000d64:	2120      	movs	r1, #32
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM7_Init+0x50>)
 8000d68:	f7ff fdb1 	bl	80008ce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <MX_TIM7_Init+0x50>)
 8000d6e:	f7ff fdc0 	bl	80008f2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001400 	.word	0x40001400

08000d80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000da8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dac:	f7ff fd68 	bl	8000880 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000db0:	2004      	movs	r0, #4
 8000db2:	f7ff fd65 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_USART1_UART_Init+0xa0>)
 8000db8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <MX_USART1_UART_Init+0xa4>)
 8000dcc:	f000 fac8 	bl	8001360 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_USART1_UART_Init+0xa8>)
 8000dd2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_USART1_UART_Init+0xa4>)
 8000dde:	f000 fabf 	bl	8001360 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000de2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000de6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000df4:	230c      	movs	r3, #12
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0xac>)
 8000e08:	f000 fddc 	bl	80019c4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_USART1_UART_Init+0xac>)
 8000e0e:	f7ff fd8e 	bl	800092e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0xac>)
 8000e14:	f7ff fd7c 	bl	8000910 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	04020002 	.word	0x04020002
 8000e24:	40010800 	.word	0x40010800
 8000e28:	04040004 	.word	0x04040004
 8000e2c:	40013800 	.word	0x40013800

08000e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000e58:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e5c:	f7ff fcf8 	bl	8000850 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000e60:	2008      	movs	r0, #8
 8000e62:	f7ff fd0d 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_USART3_UART_Init+0xa0>)
 8000e68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <MX_USART3_UART_Init+0xa4>)
 8000e7c:	f000 fa70 	bl	8001360 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_USART3_UART_Init+0xa8>)
 8000e82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000e84:	2304      	movs	r3, #4
 8000e86:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <MX_USART3_UART_Init+0xa4>)
 8000e8e:	f000 fa67 	bl	8001360 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000e92:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000e96:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <MX_USART3_UART_Init+0xac>)
 8000eb8:	f000 fd84 	bl	80019c4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_USART3_UART_Init+0xac>)
 8000ebe:	f7ff fd36 	bl	800092e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_USART3_UART_Init+0xac>)
 8000ec4:	f7ff fd24 	bl	8000910 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	04040004 	.word	0x04040004
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	04080008 	.word	0x04080008
 8000edc:	40004800 	.word	0x40004800

08000ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fc9b 	bl	8000820 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000eea:	f7ff f9bf 	bl	800026c <__NVIC_GetPriorityGrouping>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fa0d 	bl	8000314 <NVIC_EncodePriority>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4619      	mov	r1, r3
 8000efe:	200b      	movs	r0, #11
 8000f00:	f7ff f9de 	bl	80002c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f04:	200b      	movs	r0, #11
 8000f06:	f7ff f9bf 	bl	8000288 <__NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000f24:	2020      	movs	r0, #32
 8000f26:	f7ff fcab 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f7ff fca8 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000f30:	2004      	movs	r0, #4
 8000f32:	f7ff fca5 	bl	8000880 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000f36:	2008      	movs	r0, #8
 8000f38:	f7ff fca2 	bl	8000880 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8000f3c:	492e      	ldr	r1, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f3e:	482f      	ldr	r0, [pc, #188]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000f40:	f7ff fd0a 	bl	8000958 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8000f44:	492e      	ldr	r1, [pc, #184]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000f48:	f7ff fd06 	bl	8000958 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8000f4c:	492e      	ldr	r1, [pc, #184]	; (8001008 <MX_GPIO_Init+0xf8>)
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f50:	f7ff fd02 	bl	8000958 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8000f54:	f240 4104 	movw	r1, #1028	; 0x404
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f5a:	f7ff fcfd 	bl	8000958 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f60:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f66:	2302      	movs	r3, #2
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4822      	ldr	r0, [pc, #136]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000f74:	f000 f9f4 	bl	8001360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f7a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000f8e:	f000 f9e7 	bl	8001360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_GPIO_Init+0x104>)
 8000f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000f96:	2304      	movs	r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000fa0:	f000 f9de 	bl	8001360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_GPIO_Init+0xf8>)
 8000fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fac:	2302      	movs	r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_GPIO_Init+0xfc>)
 8000fba:	f000 f9d1 	bl	8001360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_GPIO_Init+0x108>)
 8000fc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000fd0:	f000 f9c6 	bl	8001360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000fd4:	f240 4304 	movw	r3, #1028	; 0x404
 8000fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_GPIO_Init+0x100>)
 8000fec:	f000 f9b8 	bl	8001360 <LL_GPIO_Init>

}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	04f138f9 	.word	0x04f138f9
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	041ac0da 	.word	0x041ac0da
 8001004:	40011000 	.word	0x40011000
 8001008:	04190019 	.word	0x04190019
 800100c:	40010800 	.word	0x40010800
 8001010:	40011400 	.word	0x40011400
 8001014:	04010001 	.word	0x04010001
 8001018:	04040004 	.word	0x04040004

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff ffe4 	bl	8001076 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f000 fd35 	bl	8001b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fc75 	bl	80009a0 <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80010c0:	08001ba4 	.word	0x08001ba4
  ldr r2, =_sbss
 80010c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80010c8:	20000020 	.word	0x20000020

080010cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>

080010ce <LL_ADC_REG_SetSequencerLength>:
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b01      	cmp	r3, #1
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe4 	bl	80010f2 <LL_ADC_IsEnabled>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d112      	bne.n	8001156 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e001      	b.n	800115a <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffbd 	bl	80010f2 <LL_ADC_IsEnabled>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d131      	bne.n	80011e2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	430b      	orrs	r3, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	e008      	b.n	80011b2 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80011ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	6811      	ldr	r1, [r2, #0]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	68d2      	ldr	r2, [r2, #12]
 80011c6:	4311      	orrs	r1, r2
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	6912      	ldr	r2, [r2, #16]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff77 	bl	80010ce <LL_ADC_REG_SetSequencerLength>
 80011e0:	e001      	b.n	80011e6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LL_GPIO_SetPinMode>:
{
 80011f0:	b490      	push	{r4, r7}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	0e1b      	lsrs	r3, r3, #24
 8001204:	4413      	add	r3, r2
 8001206:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	613b      	str	r3, [r7, #16]
  return result;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	210f      	movs	r1, #15
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	61bb      	str	r3, [r7, #24]
  return result;
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	6023      	str	r3, [r4, #0]
}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bc90      	pop	{r4, r7}
 8001252:	4770      	bx	lr

08001254 <LL_GPIO_SetPinSpeed>:
{
 8001254:	b490      	push	{r4, r7}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	461a      	mov	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	0e1b      	lsrs	r3, r3, #24
 8001268:	4413      	add	r3, r2
 800126a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	613b      	str	r3, [r7, #16]
  return result;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	2103      	movs	r1, #3
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	61bb      	str	r3, [r7, #24]
  return result;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	6023      	str	r3, [r4, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc90      	pop	{r4, r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_GPIO_SetPinOutputType>:
{
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	0e1b      	lsrs	r3, r3, #24
 80012cc:	4413      	add	r3, r2
 80012ce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	613b      	str	r3, [r7, #16]
  return result;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	2104      	movs	r1, #4
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	61bb      	str	r3, [r7, #24]
  return result;
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	6023      	str	r3, [r4, #0]
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bc90      	pop	{r4, r7}
 800131a:	4770      	bx	lr

0800131c <LL_GPIO_SetPinPull>:
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	613b      	str	r3, [r7, #16]
  return result;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	408b      	lsls	r3, r1
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	60da      	str	r2, [r3, #12]
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	0c1b      	lsrs	r3, r3, #16
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
  return result;
 8001380:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800138a:	e044      	b.n	8001416 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	409a      	lsls	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03a      	beq.n	8001410 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b07      	cmp	r3, #7
 800139e:	d806      	bhi.n	80013ae <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80013a0:	f240 1201 	movw	r2, #257	; 0x101
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	e008      	b.n	80013c0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b08      	subs	r3, #8
 80013b2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013be:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d106      	bne.n	80013d6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	461a      	mov	r2, r3
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffa3 	bl	800131c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	69b9      	ldr	r1, [r7, #24]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff06 	bl	80011f0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d003      	beq.n	80013f4 <LL_GPIO_Init+0x94>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d10d      	bne.n	8001410 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	461a      	mov	r2, r3
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff29 	bl	8001254 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	461a      	mov	r2, r3
 8001408:	69b9      	ldr	r1, [r7, #24]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff54 	bl	80012b8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3301      	adds	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1b4      	bne.n	800138c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <LL_RCC_GetSysClkSource>:
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <LL_RCC_GetSysClkSource+0x14>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000

08001444 <LL_RCC_GetAHBPrescaler>:
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <LL_RCC_GetAHBPrescaler+0x14>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_GetAPB1Prescaler>:
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000

08001474 <LL_RCC_GetAPB2Prescaler>:
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <LL_RCC_GetAPB2Prescaler+0x14>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <LL_RCC_PLL_GetMainSource+0x14>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000

080014a4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000

080014bc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <LL_RCC_PLL_GetPrediv+0x14>)
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000

080014d4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80014dc:	f000 f820 	bl	8001520 <RCC_GetSystemClockFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f83e 	bl	800156c <RCC_GetHCLKClockFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <RCC_GetPCLK1ClockFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f858 	bl	80015c0 <RCC_GetPCLK2ClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60da      	str	r2, [r3, #12]
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800152a:	f7ff ff7f 	bl	800142c <LL_RCC_GetSysClkSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b08      	cmp	r3, #8
 8001532:	d00c      	beq.n	800154e <RCC_GetSystemClockFreq+0x2e>
 8001534:	2b08      	cmp	r3, #8
 8001536:	d80e      	bhi.n	8001556 <RCC_GetSystemClockFreq+0x36>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <RCC_GetSystemClockFreq+0x22>
 800153c:	2b04      	cmp	r3, #4
 800153e:	d003      	beq.n	8001548 <RCC_GetSystemClockFreq+0x28>
 8001540:	e009      	b.n	8001556 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <RCC_GetSystemClockFreq+0x48>)
 8001544:	607b      	str	r3, [r7, #4]
      break;
 8001546:	e009      	b.n	800155c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <RCC_GetSystemClockFreq+0x48>)
 800154a:	607b      	str	r3, [r7, #4]
      break;
 800154c:	e006      	b.n	800155c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800154e:	f000 f84b 	bl	80015e8 <RCC_PLL_GetFreqDomain_SYS>
 8001552:	6078      	str	r0, [r7, #4]
      break;
 8001554:	e002      	b.n	800155c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <RCC_GetSystemClockFreq+0x48>)
 8001558:	607b      	str	r3, [r7, #4]
      break;
 800155a:	bf00      	nop
  }

  return frequency;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	007a1200 	.word	0x007a1200

0800156c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001574:	f7ff ff66 	bl	8001444 <LL_RCC_GetAHBPrescaler>
 8001578:	4603      	mov	r3, r0
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <RCC_GetHCLKClockFreq+0x28>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	40d3      	lsrs	r3, r2
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08001b84 	.word	0x08001b84

08001598 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80015a0:	f7ff ff5c 	bl	800145c <LL_RCC_GetAPB1Prescaler>
 80015a4:	4603      	mov	r3, r0
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <RCC_GetPCLK1ClockFreq+0x24>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	40d3      	lsrs	r3, r2
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08001b94 	.word	0x08001b94

080015c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80015c8:	f7ff ff54 	bl	8001474 <LL_RCC_GetAPB2Prescaler>
 80015cc:	4603      	mov	r3, r0
 80015ce:	0adb      	lsrs	r3, r3, #11
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	40d3      	lsrs	r3, r2
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	08001b94 	.word	0x08001b94

080015e8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80015f6:	f7ff ff49 	bl	800148c <LL_RCC_PLL_GetMainSource>
 80015fa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d003      	beq.n	8001612 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800160a:	e00b      	b.n	8001624 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800160e:	607b      	str	r3, [r7, #4]
      break;
 8001610:	e00b      	b.n	800162a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001612:	f7ff ff53 	bl	80014bc <LL_RCC_PLL_GetPrediv>
 8001616:	4603      	mov	r3, r0
 8001618:	3301      	adds	r3, #1
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	607b      	str	r3, [r7, #4]
      break;
 8001622:	e002      	b.n	800162a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001626:	607b      	str	r3, [r7, #4]
      break;
 8001628:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800162a:	f7ff ff3b 	bl	80014a4 <LL_RCC_PLL_GetMultiplicator>
 800162e:	4603      	mov	r3, r0
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	3302      	adds	r3, #2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	003d0900 	.word	0x003d0900
 8001648:	007a1200 	.word	0x007a1200

0800164c <LL_TIM_SetPrescaler>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LL_TIM_SetAutoReload>:
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <LL_TIM_SetRepetitionCounter>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	615a      	str	r2, [r3, #20]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <LL_TIM_Init+0x108>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00f      	beq.n	80016f0 <LL_TIM_Init+0x38>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d6:	d00b      	beq.n	80016f0 <LL_TIM_Init+0x38>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3a      	ldr	r2, [pc, #232]	; (80017c4 <LL_TIM_Init+0x10c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <LL_TIM_Init+0x38>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LL_TIM_Init+0x110>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d003      	beq.n	80016f0 <LL_TIM_Init+0x38>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <LL_TIM_Init+0x114>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d106      	bne.n	80016fe <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <LL_TIM_Init+0x108>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d027      	beq.n	8001756 <LL_TIM_Init+0x9e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d023      	beq.n	8001756 <LL_TIM_Init+0x9e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <LL_TIM_Init+0x10c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <LL_TIM_Init+0x9e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <LL_TIM_Init+0x110>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01b      	beq.n	8001756 <LL_TIM_Init+0x9e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <LL_TIM_Init+0x114>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d017      	beq.n	8001756 <LL_TIM_Init+0x9e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <LL_TIM_Init+0x118>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <LL_TIM_Init+0x9e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <LL_TIM_Init+0x11c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00f      	beq.n	8001756 <LL_TIM_Init+0x9e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <LL_TIM_Init+0x120>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00b      	beq.n	8001756 <LL_TIM_Init+0x9e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <LL_TIM_Init+0x124>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <LL_TIM_Init+0x9e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <LL_TIM_Init+0x128>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d003      	beq.n	8001756 <LL_TIM_Init+0x9e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <LL_TIM_Init+0x12c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d106      	bne.n	8001764 <LL_TIM_Init+0xac>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff78 	bl	8001666 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff65 	bl	800164c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <LL_TIM_Init+0x108>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00b      	beq.n	80017a2 <LL_TIM_Init+0xea>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <LL_TIM_Init+0x124>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <LL_TIM_Init+0xea>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <LL_TIM_Init+0x128>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d003      	beq.n	80017a2 <LL_TIM_Init+0xea>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <LL_TIM_Init+0x12c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d105      	bne.n	80017ae <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff69 	bl	8001680 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff73 	bl	800169a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40000800 	.word	0x40000800
 80017cc:	40000c00 	.word	0x40000c00
 80017d0:	40001800 	.word	0x40001800
 80017d4:	40001c00 	.word	0x40001c00
 80017d8:	40002000 	.word	0x40002000
 80017dc:	40014000 	.word	0x40014000
 80017e0:	40014400 	.word	0x40014400
 80017e4:	40014800 	.word	0x40014800

080017e8 <LL_USART_IsEnabled>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fc:	bf0c      	ite	eq
 80017fe:	2301      	moveq	r3, #1
 8001800:	2300      	movne	r3, #0
 8001802:	b2db      	uxtb	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_USART_SetStopBitsLength>:
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <LL_USART_SetHWFlowCtrl>:
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	615a      	str	r2, [r3, #20]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <LL_USART_SetBaudRate>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800186c:	d152      	bne.n	8001914 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	009a      	lsls	r2, r3, #2
 8001878:	441a      	add	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b29b      	uxth	r3, r3
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	b299      	uxth	r1, r3
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	441a      	add	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 80018a6:	fba3 0302 	umull	r0, r3, r3, r2
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2064      	movs	r0, #100	; 0x64
 80018ae:	fb00 f303 	mul.w	r3, r0, r3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	3332      	adds	r3, #50	; 0x32
 80018b8:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	440b      	add	r3, r1
 80018ce:	b299      	uxth	r1, r3
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009a      	lsls	r2, r3, #2
 80018da:	441a      	add	r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 80018e6:	fba3 0302 	umull	r0, r3, r3, r2
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2064      	movs	r0, #100	; 0x64
 80018ee:	fb00 f303 	mul.w	r3, r0, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	3332      	adds	r3, #50	; 0x32
 80018f8:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b29b      	uxth	r3, r3
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	b29b      	uxth	r3, r3
 8001908:	440b      	add	r3, r1
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	e04f      	b.n	80019b4 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009a      	lsls	r2, r3, #2
 800191e:	441a      	add	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	b29b      	uxth	r3, r3
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	b299      	uxth	r1, r3
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009a      	lsls	r2, r3, #2
 8001940:	441a      	add	r2, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fbb2 f2f3 	udiv	r2, r2, r3
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 800194c:	fba3 0302 	umull	r0, r3, r3, r2
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	2064      	movs	r0, #100	; 0x64
 8001954:	fb00 f303 	mul.w	r3, r0, r3
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	3332      	adds	r3, #50	; 0x32
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b29b      	uxth	r3, r3
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196c:	b29b      	uxth	r3, r3
 800196e:	440b      	add	r3, r1
 8001970:	b299      	uxth	r1, r3
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009a      	lsls	r2, r3, #2
 800197c:	441a      	add	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fbb2 f2f3 	udiv	r2, r2, r3
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 8001988:	fba3 0302 	umull	r0, r3, r3, r2
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	2064      	movs	r0, #100	; 0x64
 8001990:	fb00 f303 	mul.w	r3, r0, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	3332      	adds	r3, #50	; 0x32
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <LL_USART_SetBaudRate+0x168>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	440b      	add	r3, r1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	51eb851f 	.word	0x51eb851f

080019c4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff06 	bl	80017e8 <LL_USART_IsEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d157      	bne.n	8001a92 <LL_USART_Init+0xce>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80019ea:	f023 030c 	bic.w	r3, r3, #12
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	6851      	ldr	r1, [r2, #4]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	6912      	ldr	r2, [r2, #16]
 80019fc:	4311      	orrs	r1, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6992      	ldr	r2, [r2, #24]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fefc 	bl	800180e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff08 	bl	8001832 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd54 	bl	80014d4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <LL_USART_Init+0xd8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d102      	bne.n	8001a3a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	e01a      	b.n	8001a70 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <LL_USART_Init+0xdc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e013      	b.n	8001a70 <LL_USART_Init+0xac>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <LL_USART_Init+0xe0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	e00c      	b.n	8001a70 <LL_USART_Init+0xac>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <LL_USART_Init+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	e005      	b.n	8001a70 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a11      	ldr	r2, [pc, #68]	; (8001aac <LL_USART_Init+0xe8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fee3 	bl	8001858 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40004800 	.word	0x40004800
 8001aa8:	40004c00 	.word	0x40004c00
 8001aac:	40005000 	.word	0x40005000

08001ab0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <LL_InitTick+0x30>)
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <LL_InitTick+0x30>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <LL_InitTick+0x30>)
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001aec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffdd 	bl	8001ab0 <LL_InitTick>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <LL_SetSystemCoreClock+0x18>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000

08001b1c <__libc_init_array>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	2600      	movs	r6, #0
 8001b20:	4d0c      	ldr	r5, [pc, #48]	; (8001b54 <__libc_init_array+0x38>)
 8001b22:	4c0d      	ldr	r4, [pc, #52]	; (8001b58 <__libc_init_array+0x3c>)
 8001b24:	1b64      	subs	r4, r4, r5
 8001b26:	10a4      	asrs	r4, r4, #2
 8001b28:	42a6      	cmp	r6, r4
 8001b2a:	d109      	bne.n	8001b40 <__libc_init_array+0x24>
 8001b2c:	f000 f81a 	bl	8001b64 <_init>
 8001b30:	2600      	movs	r6, #0
 8001b32:	4d0a      	ldr	r5, [pc, #40]	; (8001b5c <__libc_init_array+0x40>)
 8001b34:	4c0a      	ldr	r4, [pc, #40]	; (8001b60 <__libc_init_array+0x44>)
 8001b36:	1b64      	subs	r4, r4, r5
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d105      	bne.n	8001b4a <__libc_init_array+0x2e>
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b44:	4798      	blx	r3
 8001b46:	3601      	adds	r6, #1
 8001b48:	e7ee      	b.n	8001b28 <__libc_init_array+0xc>
 8001b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4e:	4798      	blx	r3
 8001b50:	3601      	adds	r6, #1
 8001b52:	e7f2      	b.n	8001b3a <__libc_init_array+0x1e>
 8001b54:	08001b9c 	.word	0x08001b9c
 8001b58:	08001b9c 	.word	0x08001b9c
 8001b5c:	08001b9c 	.word	0x08001b9c
 8001b60:	08001ba0 	.word	0x08001ba0

08001b64 <_init>:
 8001b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b66:	bf00      	nop
 8001b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6a:	bc08      	pop	{r3}
 8001b6c:	469e      	mov	lr, r3
 8001b6e:	4770      	bx	lr

08001b70 <_fini>:
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	bf00      	nop
 8001b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b76:	bc08      	pop	{r3}
 8001b78:	469e      	mov	lr, r3
 8001b7a:	4770      	bx	lr
