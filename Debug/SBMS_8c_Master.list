
SBMS_8c_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006138  08006138  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  08006138  08006138  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006138  08006138  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08006140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d90  20000240  08006380  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd0  08006380  00020fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4f3  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec2  00000000  00000000  0002a75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d64a  00000000  00000000  0002db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a03  00000000  00000000  0003b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c40f  00000000  00000000  00043b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ff94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  0008ffe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000240 	.word	0x20000240
 8000200:	00000000 	.word	0x00000000
 8000204:	08005660 	.word	0x08005660

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000244 	.word	0x20000244
 8000220:	08005660 	.word	0x08005660

08000224 <flash_erase_page>:
{
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	while (FLASH->SR & FLASH_SR_BSY);
 800022c:	bf00      	nop
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <flash_erase_page+0x70>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <flash_erase_page+0xa>

		if (FLASH->SR & FLASH_SR_EOP) {
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <flash_erase_page+0x70>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <flash_erase_page+0x28>
			FLASH->SR = FLASH_SR_EOP;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <flash_erase_page+0x70>)
 8000248:	2220      	movs	r2, #32
 800024a:	60da      	str	r2, [r3, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <flash_erase_page+0x70>)
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <flash_erase_page+0x70>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6113      	str	r3, [r2, #16]
		FLASH->AR = address;
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <flash_erase_page+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <flash_erase_page+0x70>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <flash_erase_page+0x70>)
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6113      	str	r3, [r2, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 800026a:	bf00      	nop
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <flash_erase_page+0x70>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <flash_erase_page+0x48>
		FLASH->SR = FLASH_SR_EOP;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <flash_erase_page+0x70>)
 800027a:	2220      	movs	r2, #32
 800027c:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <flash_erase_page+0x70>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4a04      	ldr	r2, [pc, #16]	; (8000294 <flash_erase_page+0x70>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6113      	str	r3, [r2, #16]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40022000 	.word	0x40022000

08000298 <flash_unlock>:


void flash_unlock(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY_1;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <flash_unlock+0x18>)
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <flash_unlock+0x1c>)
 80002a0:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY_2;
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <flash_unlock+0x18>)
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <flash_unlock+0x20>)
 80002a6:	605a      	str	r2, [r3, #4]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40022000 	.word	0x40022000
 80002b4:	45670123 	.word	0x45670123
 80002b8:	cdef89ab 	.word	0xcdef89ab

080002bc <flash_lock>:

void flash_lock()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <flash_lock+0x18>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <flash_lock+0x18>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6113      	str	r3, [r2, #16]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40022000 	.word	0x40022000

080002d8 <flash_write>:



void flash_write(uint32_t address,uint32_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]


	while (FLASH->SR & FLASH_SR_BSY);
 80002e2:	bf00      	nop
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <flash_write+0x90>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <flash_write+0xc>
	if (FLASH->SR & FLASH_SR_EOP) {
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <flash_write+0x90>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <flash_write+0x2a>
		FLASH->SR = FLASH_SR_EOP;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <flash_write+0x90>)
 80002fe:	2220      	movs	r2, #32
 8000300:	60da      	str	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <flash_write+0x90>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <flash_write+0x90>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	b292      	uxth	r2, r2
 8000314:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000316:	bf00      	nop
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <flash_write+0x90>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <flash_write+0x40>
    		FLASH->SR = FLASH_SR_EOP;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <flash_write+0x90>)
 8000326:	2220      	movs	r2, #32
 8000328:	60da      	str	r2, [r3, #12]


	address+=2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3302      	adds	r3, #2
 800032e:	607b      	str	r3, [r7, #4]
	data>>=16;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	603b      	str	r3, [r7, #0]
    *(__IO uint16_t*)address = (uint16_t)data;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	b292      	uxth	r2, r2
 800033c:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800033e:	bf00      	nop
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <flash_write+0x90>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <flash_write+0x68>
    		FLASH->SR = FLASH_SR_EOP;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <flash_write+0x90>)
 800034e:	2220      	movs	r2, #32
 8000350:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <flash_write+0x90>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <flash_write+0x90>)
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	6113      	str	r3, [r2, #16]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000

0800036c <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
uint8_t flash_write_block()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
	__disable_irq();
	flash_unlock();
 8000376:	f7ff ff8f 	bl	8000298 <flash_unlock>
	uint32_t i=0;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <flash_write_block+0x8c>)
 8000380:	60bb      	str	r3, [r7, #8]
	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000382:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8000386:	607b      	str	r3, [r7, #4]
	uint32_t *source_adr = (void *)&LoggingData;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <flash_write_block+0x90>)
 800038a:	603b      	str	r3, [r7, #0]

	logDebugD("size: ",size,0);
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <flash_write_block+0x94>)
 800038e:	f004 fab5 	bl	80048fc <printToBufferWithoutEndUART1>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <flash_write_block+0x98>)
 800039a:	f004 fb07 	bl	80049ac <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <flash_write_block+0x94>)
 80003a0:	f004 faac 	bl	80048fc <printToBufferWithoutEndUART1>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <flash_write_block+0x9c>)
 80003ae:	f004 fafd 	bl	80049ac <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80003b2:	68b8      	ldr	r0, [r7, #8]
 80003b4:	f7ff ff36 	bl	8000224 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e00e      	b.n	80003dc <flash_write_block+0x70>
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	009a      	lsls	r2, r3, #2
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	18d0      	adds	r0, r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f7ff ff81 	bl	80002d8 <flash_write>
	for (i = 0; i < size/4; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d3eb      	bcc.n	80003be <flash_write_block+0x52>
    }

	flash_lock();
 80003e6:	f7ff ff69 	bl	80002bc <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ea:	b662      	cpsie	i
}
 80003ec:	bf00      	nop
	__enable_irq();
	return 1;
 80003ee:	2301      	movs	r3, #1
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	0801e400 	.word	0x0801e400
 80003fc:	20000d6c 	.word	0x20000d6c
 8000400:	08005678 	.word	0x08005678
 8000404:	08005680 	.word	0x08005680
 8000408:	08005688 	.word	0x08005688

0800040c <flash_read_block>:
uint8_t flash_read_block()
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]


	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000416:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800041a:	60bb      	str	r3, [r7, #8]
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <flash_read_block+0x50>)
 800041e:	607b      	str	r3, [r7, #4]
	uint32_t *dest_adr = (void *)&LoggingData;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <flash_read_block+0x54>)
 8000422:	603b      	str	r3, [r7, #0]

	for (i=0; i < size/4; ++i)
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	e00c      	b.n	8000444 <flash_read_block+0x38>
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	6839      	ldr	r1, [r7, #0]
 8000438:	440b      	add	r3, r1
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	601a      	str	r2, [r3, #0]
	for (i=0; i < size/4; ++i)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ed      	bcc.n	800042a <flash_read_block+0x1e>
	}

	return 1;
 800044e:	2301      	movs	r3, #1

}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	0801e400 	.word	0x0801e400
 8000460:	20000d6c 	.word	0x20000d6c

08000464 <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	617b      	str	r3, [r7, #20]
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d305      	bcc.n	800048a <flash_read+0x26>
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d801      	bhi.n	800048a <flash_read+0x26>
	{
		return EEpromValue;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	e01d      	b.n	80004c6 <flash_read+0x62>
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <flash_read+0x6c>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <flash_read+0x70>)
 8000492:	f004 fa33 	bl	80048fc <printToBufferWithoutEndUART1>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <flash_read+0x74>)
 800049e:	f004 fa85 	bl	80049ac <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <flash_read+0x70>)
 80004a4:	f004 fa2a 	bl	80048fc <printToBufferWithoutEndUART1>
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <flash_read+0x78>)
 80004b0:	f004 fa7c 	bl	80049ac <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <flash_read+0x70>)
 80004b6:	f004 fa21 	bl	80048fc <printToBufferWithoutEndUART1>
 80004ba:	2200      	movs	r2, #0
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <flash_read+0x7c>)
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <flash_read+0x80>)
 80004c0:	f004 fa74 	bl	80049ac <printToBufferUART1D>
		return MinValue;
 80004c4:	68bb      	ldr	r3, [r7, #8]
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	08005678 	.word	0x08005678
 80004d8:	08005690 	.word	0x08005690
 80004dc:	080056a8 	.word	0x080056a8
 80004e0:	0801ec00 	.word	0x0801ec00
 80004e4:	080056bc 	.word	0x080056bc

080004e8 <FactoryWriteToFlash_CRC>:
	flash_lock();
	__enable_irq();
	return 1;
}
uint8_t FactoryWriteToFlash_CRC()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	logDebug("FactoryWriteToFlash_CRC");
 80004ee:	485f      	ldr	r0, [pc, #380]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 80004f0:	f004 fa04 	bl	80048fc <printToBufferWithoutEndUART1>
 80004f4:	485e      	ldr	r0, [pc, #376]	; (8000670 <FactoryWriteToFlash_CRC+0x188>)
 80004f6:	f004 f975 	bl	80047e4 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 80004fa:	b672      	cpsid	i
}
 80004fc:	bf00      	nop
	__disable_irq();
	flash_unlock();
 80004fe:	f7ff fecb 	bl	8000298 <flash_unlock>
	char CRC_Calibration=0;
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
	char CRC_CalibrationVerify=0;
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]

	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 800050a:	4b5a      	ldr	r3, [pc, #360]	; (8000674 <FactoryWriteToFlash_CRC+0x18c>)
 800050c:	2200      	movs	r2, #0
 800050e:	214c      	movs	r1, #76	; 0x4c
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fc6b 	bl	8000dec <CalcCRC8>
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4a56      	ldr	r2, [pc, #344]	; (8000678 <FactoryWriteToFlash_CRC+0x190>)
 800051e:	6013      	str	r3, [r2, #0]


	CalibrationFactoryWriteToFlash();
 8000520:	f000 f8ca 	bl	80006b8 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000524:	f000 f9ac 	bl	8000880 <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <FactoryWriteToFlash_CRC+0x194>)
 800052a:	2200      	movs	r2, #0
 800052c:	214c      	movs	r1, #76	; 0x4c
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fc5c 	bl	8000dec <CalcCRC8>
 8000534:	4603      	mov	r3, r0
 8000536:	71bb      	strb	r3, [r7, #6]

	if (CRC_Calibration == CRC_CalibrationVerify )
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	429a      	cmp	r2, r3
 800053e:	d106      	bne.n	800054e <FactoryWriteToFlash_CRC+0x66>
	{
		logDebug("FCalibration write to Flash success ");
 8000540:	484a      	ldr	r0, [pc, #296]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 8000542:	f004 f9db 	bl	80048fc <printToBufferWithoutEndUART1>
 8000546:	484e      	ldr	r0, [pc, #312]	; (8000680 <FactoryWriteToFlash_CRC+0x198>)
 8000548:	f004 f94c 	bl	80047e4 <printToBufferUART1>
 800054c:	e007      	b.n	800055e <FactoryWriteToFlash_CRC+0x76>
	}else
	{
		logDebug("FCalibration write to Flash Fail, try again... ");
 800054e:	4847      	ldr	r0, [pc, #284]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 8000550:	f004 f9d4 	bl	80048fc <printToBufferWithoutEndUART1>
 8000554:	484b      	ldr	r0, [pc, #300]	; (8000684 <FactoryWriteToFlash_CRC+0x19c>)
 8000556:	f004 f945 	bl	80047e4 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 800055a:	f000 f8ad 	bl	80006b8 <CalibrationFactoryWriteToFlash>
	}

	char CRC_Settings=0;
 800055e:	2300      	movs	r3, #0
 8000560:	717b      	strb	r3, [r7, #5]
	char CRC_SettingsVerify=0;
 8000562:	2300      	movs	r3, #0
 8000564:	713b      	strb	r3, [r7, #4]

	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000566:	4b48      	ldr	r3, [pc, #288]	; (8000688 <FactoryWriteToFlash_CRC+0x1a0>)
 8000568:	2200      	movs	r2, #0
 800056a:	2144      	movs	r1, #68	; 0x44
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc3d 	bl	8000dec <CalcCRC8>
 8000572:	4603      	mov	r3, r0
 8000574:	717b      	strb	r3, [r7, #5]
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000576:	483d      	ldr	r0, [pc, #244]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 8000578:	f004 f9c0 	bl	80048fc <printToBufferWithoutEndUART1>
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	4842      	ldr	r0, [pc, #264]	; (800068c <FactoryWriteToFlash_CRC+0x1a4>)
 8000584:	f004 fa12 	bl	80049ac <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000588:	4838      	ldr	r0, [pc, #224]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 800058a:	f004 f9b7 	bl	80048fc <printToBufferWithoutEndUART1>
 800058e:	2200      	movs	r2, #0
 8000590:	2144      	movs	r1, #68	; 0x44
 8000592:	483f      	ldr	r0, [pc, #252]	; (8000690 <FactoryWriteToFlash_CRC+0x1a8>)
 8000594:	f004 fa0a 	bl	80049ac <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	4a3e      	ldr	r2, [pc, #248]	; (8000694 <FactoryWriteToFlash_CRC+0x1ac>)
 800059c:	6013      	str	r3, [r2, #0]


	SettingsFactoryWriteToFlash();
 800059e:	f000 f9ed 	bl	800097c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 80005a2:	f000 fab9 	bl	8000b18 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 80005a6:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <FactoryWriteToFlash_CRC+0x1b0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	2144      	movs	r1, #68	; 0x44
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fc1d 	bl	8000dec <CalcCRC8>
 80005b2:	4603      	mov	r3, r0
 80005b4:	713b      	strb	r3, [r7, #4]
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 80005b6:	482d      	ldr	r0, [pc, #180]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 80005b8:	f004 f9a0 	bl	80048fc <printToBufferWithoutEndUART1>
 80005bc:	793b      	ldrb	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	4832      	ldr	r0, [pc, #200]	; (800068c <FactoryWriteToFlash_CRC+0x1a4>)
 80005c4:	f004 f9f2 	bl	80049ac <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 80005c8:	4828      	ldr	r0, [pc, #160]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 80005ca:	f004 f997 	bl	80048fc <printToBufferWithoutEndUART1>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2144      	movs	r1, #68	; 0x44
 80005d2:	482f      	ldr	r0, [pc, #188]	; (8000690 <FactoryWriteToFlash_CRC+0x1a8>)
 80005d4:	f004 f9ea 	bl	80049ac <printToBufferUART1D>

	if (CRC_Settings == CRC_SettingsVerify )
 80005d8:	797a      	ldrb	r2, [r7, #5]
 80005da:	793b      	ldrb	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d106      	bne.n	80005ee <FactoryWriteToFlash_CRC+0x106>
	{
		logDebug("FSettings write to Flash success ");
 80005e0:	4822      	ldr	r0, [pc, #136]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 80005e2:	f004 f98b 	bl	80048fc <printToBufferWithoutEndUART1>
 80005e6:	482d      	ldr	r0, [pc, #180]	; (800069c <FactoryWriteToFlash_CRC+0x1b4>)
 80005e8:	f004 f8fc 	bl	80047e4 <printToBufferUART1>
 80005ec:	e007      	b.n	80005fe <FactoryWriteToFlash_CRC+0x116>
	}else
	{
		logDebug("FSettings write to Flash Fail, try again... ");
 80005ee:	481f      	ldr	r0, [pc, #124]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 80005f0:	f004 f984 	bl	80048fc <printToBufferWithoutEndUART1>
 80005f4:	482a      	ldr	r0, [pc, #168]	; (80006a0 <FactoryWriteToFlash_CRC+0x1b8>)
 80005f6:	f004 f8f5 	bl	80047e4 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 80005fa:	f000 f9bf 	bl	800097c <SettingsFactoryWriteToFlash>
	}

	char CRC_DataWhenPowerOff=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	70fb      	strb	r3, [r7, #3]
	char CRC_DataWhenPowerOffVerify=0;
 8000602:	2300      	movs	r3, #0
 8000604:	70bb      	strb	r3, [r7, #2]

	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <FactoryWriteToFlash_CRC+0x1bc>)
 8000608:	2200      	movs	r2, #0
 800060a:	211c      	movs	r1, #28
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fbed 	bl	8000dec <CalcCRC8>
 8000612:	4603      	mov	r3, r0
 8000614:	70fb      	strb	r3, [r7, #3]
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <FactoryWriteToFlash_CRC+0x1c0>)
 800061a:	6013      	str	r3, [r2, #0]


	DataWhenPowerOff_Factory_WriteToFlash();
 800061c:	f000 faec 	bl	8000bf8 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000620:	f000 fb5c 	bl	8000cdc <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <FactoryWriteToFlash_CRC+0x1c4>)
 8000626:	2200      	movs	r2, #0
 8000628:	211c      	movs	r1, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fbde 	bl	8000dec <CalcCRC8>
 8000630:	4603      	mov	r3, r0
 8000632:	70bb      	strb	r3, [r7, #2]

	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000634:	78fa      	ldrb	r2, [r7, #3]
 8000636:	78bb      	ldrb	r3, [r7, #2]
 8000638:	429a      	cmp	r2, r3
 800063a:	d106      	bne.n	800064a <FactoryWriteToFlash_CRC+0x162>
	{
		logDebug("FDataWhenPowerOff write to Flash success ");
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 800063e:	f004 f95d 	bl	80048fc <printToBufferWithoutEndUART1>
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <FactoryWriteToFlash_CRC+0x1c8>)
 8000644:	f004 f8ce 	bl	80047e4 <printToBufferUART1>
 8000648:	e007      	b.n	800065a <FactoryWriteToFlash_CRC+0x172>
	}else
	{
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <FactoryWriteToFlash_CRC+0x184>)
 800064c:	f004 f956 	bl	80048fc <printToBufferWithoutEndUART1>
 8000650:	4818      	ldr	r0, [pc, #96]	; (80006b4 <FactoryWriteToFlash_CRC+0x1cc>)
 8000652:	f004 f8c7 	bl	80047e4 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000656:	f000 facf 	bl	8000bf8 <DataWhenPowerOff_Factory_WriteToFlash>
	}

	flash_lock();
 800065a:	f7ff fe2f 	bl	80002bc <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800065e:	b662      	cpsie	i
}
 8000660:	bf00      	nop
	__enable_irq();
	return 1;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08005678 	.word	0x08005678
 8000670:	080057fc 	.word	0x080057fc
 8000674:	200000a8 	.word	0x200000a8
 8000678:	200000a4 	.word	0x200000a4
 800067c:	20000058 	.word	0x20000058
 8000680:	08005814 	.word	0x08005814
 8000684:	0800583c 	.word	0x0800583c
 8000688:	20000188 	.word	0x20000188
 800068c:	0800586c 	.word	0x0800586c
 8000690:	08005878 	.word	0x08005878
 8000694:	20000184 	.word	0x20000184
 8000698:	20000140 	.word	0x20000140
 800069c:	08005884 	.word	0x08005884
 80006a0:	080058a8 	.word	0x080058a8
 80006a4:	20000210 	.word	0x20000210
 80006a8:	2000020c 	.word	0x2000020c
 80006ac:	200001f0 	.word	0x200001f0
 80006b0:	080058d8 	.word	0x080058d8
 80006b4:	08005904 	.word	0x08005904

080006b8 <CalibrationFactoryWriteToFlash>:
	flash_write( CalibrationData.CalibrationValueForVoltage7_AddresInEEprom, CalibrationData.CalibrationValueForVoltage7);
	logDebug("CalibrationWriteToFlash ");

}
void CalibrationFactoryWriteToFlash(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fdaf 	bl	8000224 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe01 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent1);
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4a27      	ldr	r2, [pc, #156]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006dc:	6892      	ldr	r2, [r2, #8]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fdf9 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent2);
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006ec:	6912      	ldr	r2, [r2, #16]
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdf1 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage1);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 80006fc:	6992      	ldr	r2, [r2, #24]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fde9 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800070c:	6a12      	ldr	r2, [r2, #32]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fde1 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage3_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage3);
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800071c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdd9 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage4_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage4);
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800072c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd1 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage5_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage5);
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800073c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fdc9 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage6_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage6);
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800074c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fdc1 	bl	80002d8 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage7_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage7);
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <CalibrationFactoryWriteToFlash+0xc0>)
 800075c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdb9 	bl	80002d8 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <CalibrationFactoryWriteToFlash+0xc4>)
 8000768:	f004 f8c8 	bl	80048fc <printToBufferWithoutEndUART1>
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <CalibrationFactoryWriteToFlash+0xc8>)
 800076e:	f004 f839 	bl	80047e4 <printToBufferUART1>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000a4 	.word	0x200000a4
 800077c:	08005678 	.word	0x08005678
 8000780:	08005958 	.word	0x08005958

08000784 <CalibrationReadFromFlash>:
void CalibrationReadFromFlash(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 8000788:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fe66 	bl	8000464 <flash_read>
 8000798:	4603      	mov	r3, r0
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800079c:	6013      	str	r3, [r2, #0]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,1,1000);
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe5b 	bl	8000464 <flash_read>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a30      	ldr	r2, [pc, #192]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007b2:	6093      	str	r3, [r2, #8]
	CalibrationData.CalibrationValueForCurrent2 = flash_read(CalibrationData.CalibrationValueForCurrent2_AddresInEEprom,1,1000);
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe50 	bl	8000464 <flash_read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a2b      	ldr	r2, [pc, #172]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007c8:	6113      	str	r3, [r2, #16]
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,1,1000);
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fe45 	bl	8000464 <flash_read>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007de:	6193      	str	r3, [r2, #24]
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,1,1000);
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fe3a 	bl	8000464 <flash_read>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007f4:	6213      	str	r3, [r2, #32]
	CalibrationData.CalibrationValueForVoltage3 = flash_read(CalibrationData.CalibrationValueForVoltage3_AddresInEEprom,1,1000);
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe2f 	bl	8000464 <flash_read>
 8000806:	4603      	mov	r3, r0
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800080a:	6293      	str	r3, [r2, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage4 = flash_read(CalibrationData.CalibrationValueForVoltage4_AddresInEEprom,1,1000);
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe24 	bl	8000464 <flash_read>
 800081c:	4603      	mov	r3, r0
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage5 = flash_read(CalibrationData.CalibrationValueForVoltage5_AddresInEEprom,1,1000);
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 8000824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082a:	2101      	movs	r1, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fe19 	bl	8000464 <flash_read>
 8000832:	4603      	mov	r3, r0
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
	CalibrationData.CalibrationValueForVoltage6 = flash_read(CalibrationData.CalibrationValueForVoltage6_AddresInEEprom,1,1000);
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800083a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe0e 	bl	8000464 <flash_read>
 8000848:	4603      	mov	r3, r0
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
	CalibrationData.CalibrationValueForVoltage7 = flash_read(CalibrationData.CalibrationValueForVoltage7_AddresInEEprom,1,1000);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe03 	bl	8000464 <flash_read>
 800085e:	4603      	mov	r3, r0
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <CalibrationReadFromFlash+0xf0>)
 8000862:	6493      	str	r3, [r2, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <CalibrationReadFromFlash+0xf4>)
 8000866:	f004 f849 	bl	80048fc <printToBufferWithoutEndUART1>
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <CalibrationReadFromFlash+0xf8>)
 800086c:	f003 ffba 	bl	80047e4 <printToBufferUART1>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000004 	.word	0x20000004
 8000878:	08005678 	.word	0x08005678
 800087c:	08005978 	.word	0x08005978

08000880 <CalibrationReadFromFlashForVerify>:
void CalibrationReadFromFlashForVerify(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000884:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fde8 	bl	8000464 <flash_read>
 8000894:	4603      	mov	r3, r0
 8000896:	4a36      	ldr	r2, [pc, #216]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000898:	6013      	str	r3, [r2, #0]
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,1,1000);
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fddd 	bl	8000464 <flash_read>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a30      	ldr	r2, [pc, #192]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008ae:	6093      	str	r3, [r2, #8]
	CalibrationDataForVerify.CalibrationValueForCurrent2 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent2_AddresInEEprom,1,1000);
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fdd2 	bl	8000464 <flash_read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008c4:	6113      	str	r3, [r2, #16]
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,1,1000);
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ce:	2101      	movs	r1, #1
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fdc7 	bl	8000464 <flash_read>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008da:	6193      	str	r3, [r2, #24]
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,1,1000);
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fdbc 	bl	8000464 <flash_read>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008f0:	6213      	str	r3, [r2, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage3 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage3_AddresInEEprom,1,1000);
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fdb1 	bl	8000464 <flash_read>
 8000902:	4603      	mov	r3, r0
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000906:	6293      	str	r3, [r2, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForVoltage4 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage4_AddresInEEprom,1,1000);
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 800090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fda6 	bl	8000464 <flash_read>
 8000918:	4603      	mov	r3, r0
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage5 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage5_AddresInEEprom,1,1000);
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fd9b 	bl	8000464 <flash_read>
 800092e:	4603      	mov	r3, r0
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000932:	6393      	str	r3, [r2, #56]	; 0x38
	CalibrationDataForVerify.CalibrationValueForVoltage6 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage6_AddresInEEprom,1,1000);
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093c:	2101      	movs	r1, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fd90 	bl	8000464 <flash_read>
 8000944:	4603      	mov	r3, r0
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
	CalibrationDataForVerify.CalibrationValueForVoltage7 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage7_AddresInEEprom,1,1000);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd85 	bl	8000464 <flash_read>
 800095a:	4603      	mov	r3, r0
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <CalibrationReadFromFlashForVerify+0xf0>)
 800095e:	6493      	str	r3, [r2, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <CalibrationReadFromFlashForVerify+0xf4>)
 8000962:	f003 ffcb 	bl	80048fc <printToBufferWithoutEndUART1>
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <CalibrationReadFromFlashForVerify+0xf8>)
 8000968:	f003 ff3c 	bl	80047e4 <printToBufferUART1>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000054 	.word	0x20000054
 8000974:	08005678 	.word	0x08005678
 8000978:	08005994 	.word	0x08005994

0800097c <SettingsFactoryWriteToFlash>:
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
	logDebug("SettingsWriteToFlash ");
}
void SettingsFactoryWriteToFlash(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fc4d 	bl	8000224 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc9f 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009a0:	6892      	ldr	r2, [r2, #8]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc97 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009b0:	6912      	ldr	r2, [r2, #16]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc8f 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009c0:	6992      	ldr	r2, [r2, #24]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc87 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009d0:	6a12      	ldr	r2, [r2, #32]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc7f 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc77 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc6f 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 80009fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 8000a00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc67 	bl	80002d8 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <SettingsFactoryWriteToFlash+0xb0>)
 8000a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc5f 	bl	80002d8 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <SettingsFactoryWriteToFlash+0xb4>)
 8000a1c:	f003 ff6e 	bl	80048fc <printToBufferWithoutEndUART1>
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <SettingsFactoryWriteToFlash+0xb8>)
 8000a22:	f003 fedf 	bl	80047e4 <printToBufferUART1>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000184 	.word	0x20000184
 8000a30:	08005678 	.word	0x08005678
 8000a34:	080059d0 	.word	0x080059d0

08000a38 <SettingsReadFromFlash>:
void SettingsReadFromFlash(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd0c 	bl	8000464 <flash_read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a50:	6013      	str	r3, [r2, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	220a      	movs	r2, #10
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd02 	bl	8000464 <flash_read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a64:	6093      	str	r3, [r2, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fcf7 	bl	8000464 <flash_read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a7a:	6113      	str	r3, [r2, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fcec 	bl	8000464 <flash_read>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a90:	6193      	str	r3, [r2, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fce1 	bl	8000464 <flash_read>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000aa6:	6213      	str	r3, [r2, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcd6 	bl	8000464 <flash_read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000abc:	6293      	str	r3, [r2, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fccb 	bl	8000464 <flash_read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad8:	2264      	movs	r2, #100	; 0x64
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcc1 	bl	8000464 <flash_read>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000ae6:	6393      	str	r3, [r2, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	2203      	movs	r2, #3
 8000aee:	2101      	movs	r1, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fcb7 	bl	8000464 <flash_read>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <SettingsReadFromFlash+0xd4>)
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <SettingsReadFromFlash+0xd8>)
 8000afe:	f003 fefd 	bl	80048fc <printToBufferWithoutEndUART1>
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <SettingsReadFromFlash+0xdc>)
 8000b04:	f003 fe6e 	bl	80047e4 <printToBufferUART1>

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000f4 	.word	0x200000f4
 8000b10:	08005678 	.word	0x08005678
 8000b14:	080059f0 	.word	0x080059f0

08000b18 <SettingsReadFromFlashForVerify>:
void SettingsReadFromFlashForVerify(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc9c 	bl	8000464 <flash_read>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b30:	6013      	str	r3, [r2, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	220a      	movs	r2, #10
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fc92 	bl	8000464 <flash_read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b44:	6093      	str	r3, [r2, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fc87 	bl	8000464 <flash_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a24      	ldr	r2, [pc, #144]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b5a:	6113      	str	r3, [r2, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc7c 	bl	8000464 <flash_read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b70:	6193      	str	r3, [r2, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc71 	bl	8000464 <flash_read>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b86:	6213      	str	r3, [r2, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc66 	bl	8000464 <flash_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000b9c:	6293      	str	r3, [r2, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc5b 	bl	8000464 <flash_read>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	2264      	movs	r2, #100	; 0x64
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fc51 	bl	8000464 <flash_read>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000bc6:	6393      	str	r3, [r2, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	2203      	movs	r2, #3
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc47 	bl	8000464 <flash_read>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <SettingsReadFromFlashForVerify+0xd4>)
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <SettingsReadFromFlashForVerify+0xd8>)
 8000bde:	f003 fe8d 	bl	80048fc <printToBufferWithoutEndUART1>
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <SettingsReadFromFlashForVerify+0xdc>)
 8000be4:	f003 fdfe 	bl	80047e4 <printToBufferUART1>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000013c 	.word	0x2000013c
 8000bf0:	08005678 	.word	0x08005678
 8000bf4:	08005a08 	.word	0x08005a08

08000bf8 <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
void DataWhenPowerOff_Factory_WriteToFlash(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fb0f 	bl	8000224 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fb61 	bl	80002d8 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c1c:	6892      	ldr	r2, [r2, #8]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fb59 	bl	80002d8 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c2c:	6912      	ldr	r2, [r2, #16]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb51 	bl	80002d8 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <DataWhenPowerOff_Factory_WriteToFlash+0x60>)
 8000c3c:	6992      	ldr	r2, [r2, #24]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fb49 	bl	80002d8 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <DataWhenPowerOff_Factory_WriteToFlash+0x64>)
 8000c48:	f003 fe58 	bl	80048fc <printToBufferWithoutEndUART1>
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <DataWhenPowerOff_Factory_WriteToFlash+0x68>)
 8000c4e:	f003 fdc9 	bl	80047e4 <printToBufferUART1>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000020c 	.word	0x2000020c
 8000c5c:	08005678 	.word	0x08005678
 8000c60:	08005a58 	.word	0x08005a58

08000c64 <DataWhenPowerOffReadFromFlash>:
void DataWhenPowerOffReadFromFlash(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbf6 	bl	8000464 <flash_read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000c7c:	6013      	str	r3, [r2, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <DataWhenPowerOffReadFromFlash+0x6c>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbec 	bl	8000464 <flash_read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000c90:	6093      	str	r3, [r2, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <DataWhenPowerOffReadFromFlash+0x6c>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbe2 	bl	8000464 <flash_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000ca4:	6113      	str	r3, [r2, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	2201      	movs	r2, #1
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbd8 	bl	8000464 <flash_read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <DataWhenPowerOffReadFromFlash+0x68>)
 8000cb8:	6193      	str	r3, [r2, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <DataWhenPowerOffReadFromFlash+0x70>)
 8000cbc:	f003 fe1e 	bl	80048fc <printToBufferWithoutEndUART1>
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <DataWhenPowerOffReadFromFlash+0x74>)
 8000cc2:	f003 fd8f 	bl	80047e4 <printToBufferUART1>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001cc 	.word	0x200001cc
 8000cd0:	ee6b2800 	.word	0xee6b2800
 8000cd4:	08005678 	.word	0x08005678
 8000cd8:	08005a80 	.word	0x08005a80

08000cdc <DataWhenPowerOffReadFromFlashForVerify>:
void DataWhenPowerOffReadFromFlashForVerify(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbba 	bl	8000464 <flash_read>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000cf4:	6013      	str	r3, [r2, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <DataWhenPowerOffReadFromFlashForVerify+0x6c>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fbb0 	bl	8000464 <flash_read>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000d08:	6093      	str	r3, [r2, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <DataWhenPowerOffReadFromFlashForVerify+0x6c>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fba6 	bl	8000464 <flash_read>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000d1c:	6113      	str	r3, [r2, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	2201      	movs	r2, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb9c 	bl	8000464 <flash_read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <DataWhenPowerOffReadFromFlashForVerify+0x68>)
 8000d30:	6193      	str	r3, [r2, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <DataWhenPowerOffReadFromFlashForVerify+0x70>)
 8000d34:	f003 fde2 	bl	80048fc <printToBufferWithoutEndUART1>
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <DataWhenPowerOffReadFromFlashForVerify+0x74>)
 8000d3a:	f003 fd53 	bl	80047e4 <printToBufferUART1>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001ec 	.word	0x200001ec
 8000d48:	ee6b2800 	.word	0xee6b2800
 8000d4c:	08005678 	.word	0x08005678
 8000d50:	08005aa0 	.word	0x08005aa0

08000d54 <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
		EEpromReadStatus = 1;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <ReadFromFlash+0x84>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
	 	logDebug("y1");
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <ReadFromFlash+0x88>)
 8000d60:	f003 fdcc 	bl	80048fc <printToBufferWithoutEndUART1>
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <ReadFromFlash+0x8c>)
 8000d66:	f003 fd3d 	bl	80047e4 <printToBufferUART1>
	 	delay_ms(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f000 fb6c 	bl	8001448 <delay_ms>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
	    __disable_irq();
	    putCharDirectToUart2('A');
 8000d74:	2041      	movs	r0, #65	; 0x41
 8000d76:	f003 fcd7 	bl	8004728 <putCharDirectToUart2>
	    DataWhenPowerOffReadFromFlash();
 8000d7a:	f7ff ff73 	bl	8000c64 <DataWhenPowerOffReadFromFlash>
	    putCharDirectToUart2('B');
 8000d7e:	2042      	movs	r0, #66	; 0x42
 8000d80:	f003 fcd2 	bl	8004728 <putCharDirectToUart2>
	    SettingsReadFromFlash();
 8000d84:	f7ff fe58 	bl	8000a38 <SettingsReadFromFlash>
	    putCharDirectToUart2('C');
 8000d88:	2043      	movs	r0, #67	; 0x43
 8000d8a:	f003 fccd 	bl	8004728 <putCharDirectToUart2>
	    CalibrationReadFromFlash();
 8000d8e:	f7ff fcf9 	bl	8000784 <CalibrationReadFromFlash>
	    putCharDirectToUart2('D');
 8000d92:	2044      	movs	r0, #68	; 0x44
 8000d94:	f003 fcc8 	bl	8004728 <putCharDirectToUart2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d98:	b662      	cpsie	i
}
 8000d9a:	bf00      	nop


		__enable_irq();
		putCharDirectToUart2('X');
 8000d9c:	2058      	movs	r0, #88	; 0x58
 8000d9e:	f003 fcc3 	bl	8004728 <putCharDirectToUart2>
		if (EEpromReadStatus == 0)
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ReadFromFlash+0x84>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10a      	bne.n	8000dc0 <ReadFromFlash+0x6c>
		{
			logDebug("Read from EEprom - FAIL ");
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <ReadFromFlash+0x88>)
 8000dac:	f003 fda6 	bl	80048fc <printToBufferWithoutEndUART1>
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <ReadFromFlash+0x90>)
 8000db2:	f003 fd17 	bl	80047e4 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ReadFromFlash+0x84>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			return 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e009      	b.n	8000dd4 <ReadFromFlash+0x80>
		}
		else
		{
			logDebug("Read from EEprom - SUCCESS");
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <ReadFromFlash+0x88>)
 8000dc2:	f003 fd9b 	bl	80048fc <printToBufferWithoutEndUART1>
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <ReadFromFlash+0x94>)
 8000dc8:	f003 fd0c 	bl	80047e4 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <ReadFromFlash+0x84>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
			return 1;
 8000dd2:	2301      	movs	r3, #1
		}
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	08005678 	.word	0x08005678
 8000de0:	08005ac8 	.word	0x08005ac8
 8000de4:	08005acc 	.word	0x08005acc
 8000de8:	08005ae8 	.word	0x08005ae8

08000dec <CalcCRC8>:



uint8_t CalcCRC8(uint8_t *Ptr, uint8_t Num, uint8_t CRC1)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0c2      	sub	sp, #264	; 0x108
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dfa:	6018      	str	r0, [r3, #0]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e04:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000e08:	4602      	mov	r2, r0
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e10:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e14:	460a      	mov	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
   const uint8_t CrcTable[256] = {
 8000e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <CalcCRC8+0xb8>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	4611      	mov	r1, r2
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f004 fc0a 	bl	8005644 <memcpy>
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000e3e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000e42:	1c59      	adds	r1, r3, #1
 8000e44:	6011      	str	r1, [r2, #0]
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e4c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e5c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e60:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000e64:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000e68:	5c52      	ldrb	r2, [r2, r1]
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e70:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000e74:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000e78:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e86:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1cf      	bne.n	8000e30 <CalcCRC8+0x44>
  return CRC1;
 8000e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e94:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000e98:	781b      	ldrb	r3, [r3, #0]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08005b04 	.word	0x08005b04

08000ea8 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000eb0:	4ba0      	ldr	r3, [pc, #640]	; (8001134 <WriteInLOG+0x28c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fb39 	bl	800152c <itoa>
 8000eba:	60b8      	str	r0, [r7, #8]


	for(i=0;number[i]!='\0';i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e012      	b.n	8000ee8 <WriteInLOG+0x40>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a9a      	ldr	r2, [pc, #616]	; (8001134 <WriteInLOG+0x28c>)
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	7bf9      	ldrb	r1, [r7, #15]
 8000ece:	781c      	ldrb	r4, [r3, #0]
 8000ed0:	4898      	ldr	r0, [pc, #608]	; (8001134 <WriteInLOG+0x28c>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4403      	add	r3, r0
 8000eda:	440b      	add	r3, r1
 8000edc:	3304      	adds	r3, #4
 8000ede:	4622      	mov	r2, r4
 8000ee0:	701a      	strb	r2, [r3, #0]
	for(i=0;number[i]!='\0';i++)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e6      	bne.n	8000ec2 <WriteInLOG+0x1a>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <WriteInLOG+0x28c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	7bf9      	ldrb	r1, [r7, #15]
 8000efa:	488e      	ldr	r0, [pc, #568]	; (8001134 <WriteInLOG+0x28c>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	4403      	add	r3, r0
 8000f04:	440b      	add	r3, r1
 8000f06:	3304      	adds	r3, #4
 8000f08:	223a      	movs	r2, #58	; 0x3a
 8000f0a:	701a      	strb	r2, [r3, #0]
	i++;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]

	for(j=0;str[j]!='\0';i++,j++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	73bb      	strb	r3, [r7, #14]
 8000f16:	e026      	b.n	8000f66 <WriteInLOG+0xbe>
	{
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d810      	bhi.n	8000f40 <WriteInLOG+0x98>
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a83      	ldr	r2, [pc, #524]	; (8001134 <WriteInLOG+0x28c>)
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	7bf9      	ldrb	r1, [r7, #15]
 8000f2a:	781c      	ldrb	r4, [r3, #0]
 8000f2c:	4881      	ldr	r0, [pc, #516]	; (8001134 <WriteInLOG+0x28c>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4413      	add	r3, r2
 8000f34:	4403      	add	r3, r0
 8000f36:	440b      	add	r3, r1
 8000f38:	3304      	adds	r3, #4
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e00c      	b.n	8000f5a <WriteInLOG+0xb2>
		else
		{
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000f40:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <WriteInLOG+0x28c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	7bf9      	ldrb	r1, [r7, #15]
 8000f46:	487b      	ldr	r0, [pc, #492]	; (8001134 <WriteInLOG+0x28c>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4403      	add	r3, r0
 8000f50:	440b      	add	r3, r1
 8000f52:	3304      	adds	r3, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			break;
 8000f58:	e00b      	b.n	8000f72 <WriteInLOG+0xca>
	for(j=0;str[j]!='\0';i++,j++)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73bb      	strb	r3, [r7, #14]
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1d2      	bne.n	8000f18 <WriteInLOG+0x70>
		}
	}
	for (;i<16;i++)
 8000f72:	e00e      	b.n	8000f92 <WriteInLOG+0xea>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f74:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <WriteInLOG+0x28c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	7bf9      	ldrb	r1, [r7, #15]
 8000f7a:	486e      	ldr	r0, [pc, #440]	; (8001134 <WriteInLOG+0x28c>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	4403      	add	r3, r0
 8000f84:	440b      	add	r3, r1
 8000f86:	3304      	adds	r3, #4
 8000f88:	2220      	movs	r2, #32
 8000f8a:	701a      	strb	r2, [r3, #0]
	for (;i<16;i++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d9ed      	bls.n	8000f74 <WriteInLOG+0xcc>
	}
	logDebugD("ii: ",i,0);
 8000f98:	4867      	ldr	r0, [pc, #412]	; (8001138 <WriteInLOG+0x290>)
 8000f9a:	f003 fcaf 	bl	80048fc <printToBufferWithoutEndUART1>
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4865      	ldr	r0, [pc, #404]	; (800113c <WriteInLOG+0x294>)
 8000fa6:	f003 fd01 	bl	80049ac <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <WriteInLOG+0x28c>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	7bf9      	ldrb	r1, [r7, #15]
 8000fb0:	4860      	ldr	r0, [pc, #384]	; (8001134 <WriteInLOG+0x28c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4403      	add	r3, r0
 8000fba:	440b      	add	r3, r1
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

	LoggingData.RecordsQuantity++;
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <WriteInLOG+0x28c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a5a      	ldr	r2, [pc, #360]	; (8001134 <WriteInLOG+0x28c>)
 8000fca:	6013      	str	r3, [r2, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000fcc:	4b59      	ldr	r3, [pc, #356]	; (8001134 <WriteInLOG+0x28c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b17      	cmp	r3, #23
 8000fd2:	f240 809e 	bls.w	8001112 <WriteInLOG+0x26a>
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e093      	b.n	8001104 <WriteInLOG+0x25c>
		{
			number = itoa(i);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 faa4 	bl	800152c <itoa>
 8000fe4:	60b8      	str	r0, [r7, #8]
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	e011      	b.n	8001010 <WriteInLOG+0x168>
			{
				LoggingData.Records[i][k] = number[k];
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	7b79      	ldrb	r1, [r7, #13]
 8000ff6:	781c      	ldrb	r4, [r3, #0]
 8000ff8:	484e      	ldr	r0, [pc, #312]	; (8001134 <WriteInLOG+0x28c>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	4403      	add	r3, r0
 8001002:	440b      	add	r3, r1
 8001004:	3304      	adds	r3, #4
 8001006:	4622      	mov	r2, r4
 8001008:	701a      	strb	r2, [r3, #0]
			for(k=0;number[k]!='\0';k++)
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	3301      	adds	r3, #1
 800100e:	737b      	strb	r3, [r7, #13]
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e7      	bne.n	8000fec <WriteInLOG+0x144>
			}
			LoggingData.Records[i][k] = ':';
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	7b79      	ldrb	r1, [r7, #13]
 8001020:	4844      	ldr	r0, [pc, #272]	; (8001134 <WriteInLOG+0x28c>)
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	4403      	add	r3, r0
 800102a:	440b      	add	r3, r1
 800102c:	3304      	adds	r3, #4
 800102e:	223a      	movs	r2, #58	; 0x3a
 8001030:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	3301      	adds	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	e035      	b.n	80010a6 <WriteInLOG+0x1fe>
			{
				if (i>=10)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d917      	bls.n	8001070 <WriteInLOG+0x1c8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f103 010a 	add.w	r1, r3, #10
 8001046:	7bbc      	ldrb	r4, [r7, #14]
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	7bb8      	ldrb	r0, [r7, #14]
 800104c:	4d39      	ldr	r5, [pc, #228]	; (8001134 <WriteInLOG+0x28c>)
 800104e:	460b      	mov	r3, r1
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	442b      	add	r3, r5
 8001056:	4423      	add	r3, r4
 8001058:	3304      	adds	r3, #4
 800105a:	781c      	ldrb	r4, [r3, #0]
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <WriteInLOG+0x28c>)
 800105e:	4613      	mov	r3, r2
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	440b      	add	r3, r1
 8001066:	4403      	add	r3, r0
 8001068:	3304      	adds	r3, #4
 800106a:	4622      	mov	r2, r4
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e017      	b.n	80010a0 <WriteInLOG+0x1f8>
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f103 010a 	add.w	r1, r3, #10
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	1c5c      	adds	r4, r3, #1
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	7bb8      	ldrb	r0, [r7, #14]
 800107e:	4d2d      	ldr	r5, [pc, #180]	; (8001134 <WriteInLOG+0x28c>)
 8001080:	460b      	mov	r3, r1
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	440b      	add	r3, r1
 8001086:	442b      	add	r3, r5
 8001088:	4423      	add	r3, r4
 800108a:	3304      	adds	r3, #4
 800108c:	781c      	ldrb	r4, [r3, #0]
 800108e:	4929      	ldr	r1, [pc, #164]	; (8001134 <WriteInLOG+0x28c>)
 8001090:	4613      	mov	r3, r2
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	440b      	add	r3, r1
 8001098:	4403      	add	r3, r0
 800109a:	3304      	adds	r3, #4
 800109c:	4622      	mov	r2, r4
 800109e:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	3301      	adds	r3, #1
 80010a4:	73bb      	strb	r3, [r7, #14]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	7bb9      	ldrb	r1, [r7, #14]
 80010aa:	4822      	ldr	r0, [pc, #136]	; (8001134 <WriteInLOG+0x28c>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	4403      	add	r3, r0
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1bd      	bne.n	800103a <WriteInLOG+0x192>
			}
			j--;
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	73bb      	strb	r3, [r7, #14]
			for (;j<16;j++)
 80010c4:	e00d      	b.n	80010e2 <WriteInLOG+0x23a>
			{
				LoggingData.Records[i][j] = ' ';
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	7bb9      	ldrb	r1, [r7, #14]
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <WriteInLOG+0x28c>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	4403      	add	r3, r0
 80010d4:	440b      	add	r3, r1
 80010d6:	3304      	adds	r3, #4
 80010d8:	2220      	movs	r2, #32
 80010da:	701a      	strb	r2, [r3, #0]
			for (;j<16;j++)
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	3301      	adds	r3, #1
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d9ee      	bls.n	80010c6 <WriteInLOG+0x21e>
			}
			LoggingData.Records[i][j] = '\0';
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	7bb9      	ldrb	r1, [r7, #14]
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <WriteInLOG+0x28c>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	4403      	add	r3, r0
 80010f6:	440b      	add	r3, r1
 80010f8:	3304      	adds	r3, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b0d      	cmp	r3, #13
 8001108:	f67f af68 	bls.w	8000fdc <WriteInLOG+0x134>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <WriteInLOG+0x28c>)
 800110e:	220e      	movs	r2, #14
 8001110:	601a      	str	r2, [r3, #0]
	}
	flash_write_block();
 8001112:	f7ff f92b 	bl	800036c <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <WriteInLOG+0x290>)
 8001118:	f003 fbf0 	bl	80048fc <printToBufferWithoutEndUART1>
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <WriteInLOG+0x28c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <WriteInLOG+0x298>)
 8001126:	f003 fc41 	bl	80049ac <printToBufferUART1D>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	20000d6c 	.word	0x20000d6c
 8001138:	08005c04 	.word	0x08005c04
 800113c:	08005c0c 	.word	0x08005c0c
 8001140:	08005c14 	.word	0x08005c14

08001144 <InfoToUARTBeforeStart>:
}



void InfoToUARTBeforeStart(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8001148:	487d      	ldr	r0, [pc, #500]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800114a:	f003 fbd7 	bl	80048fc <printToBufferWithoutEndUART1>
 800114e:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	487c      	ldr	r0, [pc, #496]	; (8001348 <InfoToUARTBeforeStart+0x204>)
 8001158:	f003 fc28 	bl	80049ac <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.CalibrationValueForCurrent1 ,0);
 800115c:	4878      	ldr	r0, [pc, #480]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800115e:	f003 fbcd 	bl	80048fc <printToBufferWithoutEndUART1>
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	4878      	ldr	r0, [pc, #480]	; (800134c <InfoToUARTBeforeStart+0x208>)
 800116c:	f003 fc1e 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent2 ,0);
 8001170:	4873      	ldr	r0, [pc, #460]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001172:	f003 fbc3 	bl	80048fc <printToBufferWithoutEndUART1>
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4874      	ldr	r0, [pc, #464]	; (8001350 <InfoToUARTBeforeStart+0x20c>)
 8001180:	f003 fc14 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent2 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 8001184:	486e      	ldr	r0, [pc, #440]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001186:	f003 fbb9 	bl	80048fc <printToBufferWithoutEndUART1>
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4870      	ldr	r0, [pc, #448]	; (8001354 <InfoToUARTBeforeStart+0x210>)
 8001194:	f003 fc0a 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent3 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8001198:	4869      	ldr	r0, [pc, #420]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800119a:	f003 fbaf 	bl	80048fc <printToBufferWithoutEndUART1>
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	486c      	ldr	r0, [pc, #432]	; (8001358 <InfoToUARTBeforeStart+0x214>)
 80011a8:	f003 fc00 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage3 ,0);
 80011ac:	4864      	ldr	r0, [pc, #400]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80011ae:	f003 fba5 	bl	80048fc <printToBufferWithoutEndUART1>
 80011b2:	4b64      	ldr	r3, [pc, #400]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4868      	ldr	r0, [pc, #416]	; (800135c <InfoToUARTBeforeStart+0x218>)
 80011bc:	f003 fbf6 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage4 ,0);
 80011c0:	485f      	ldr	r0, [pc, #380]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80011c2:	f003 fb9b 	bl	80048fc <printToBufferWithoutEndUART1>
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4864      	ldr	r0, [pc, #400]	; (8001360 <InfoToUARTBeforeStart+0x21c>)
 80011d0:	f003 fbec 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage3 =",CalibrationData.CalibrationValueForVoltage5 ,0);
 80011d4:	485a      	ldr	r0, [pc, #360]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80011d6:	f003 fb91 	bl	80048fc <printToBufferWithoutEndUART1>
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4860      	ldr	r0, [pc, #384]	; (8001364 <InfoToUARTBeforeStart+0x220>)
 80011e4:	f003 fbe2 	bl	80049ac <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage4 =",CalibrationData.CalibrationValueForVoltage6 ,0) ;
 80011e8:	4855      	ldr	r0, [pc, #340]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80011ea:	f003 fb87 	bl	80048fc <printToBufferWithoutEndUART1>
 80011ee:	4b55      	ldr	r3, [pc, #340]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	485c      	ldr	r0, [pc, #368]	; (8001368 <InfoToUARTBeforeStart+0x224>)
 80011f8:	f003 fbd8 	bl	80049ac <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.CalibrationValueForVoltage7 ,0) ;
 80011fc:	4850      	ldr	r0, [pc, #320]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80011fe:	f003 fb7d 	bl	80048fc <printToBufferWithoutEndUART1>
 8001202:	4b50      	ldr	r3, [pc, #320]	; (8001344 <InfoToUARTBeforeStart+0x200>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4858      	ldr	r0, [pc, #352]	; (800136c <InfoToUARTBeforeStart+0x228>)
 800120c:	f003 fbce 	bl	80049ac <printToBufferUART1D>
	delay_ms(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f000 f919 	bl	8001448 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8001216:	484a      	ldr	r0, [pc, #296]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001218:	f003 fb70 	bl	80048fc <printToBufferWithoutEndUART1>
 800121c:	4b54      	ldr	r3, [pc, #336]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	4853      	ldr	r0, [pc, #332]	; (8001374 <InfoToUARTBeforeStart+0x230>)
 8001226:	f003 fbc1 	bl	80049ac <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 800122a:	4845      	ldr	r0, [pc, #276]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800122c:	f003 fb66 	bl	80048fc <printToBufferWithoutEndUART1>
 8001230:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	484f      	ldr	r0, [pc, #316]	; (8001378 <InfoToUARTBeforeStart+0x234>)
 800123a:	f003 fbb7 	bl	80049ac <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 800123e:	4840      	ldr	r0, [pc, #256]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001240:	f003 fb5c 	bl	80048fc <printToBufferWithoutEndUART1>
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	484b      	ldr	r0, [pc, #300]	; (800137c <InfoToUARTBeforeStart+0x238>)
 800124e:	f003 fbad 	bl	80049ac <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 8001252:	483b      	ldr	r0, [pc, #236]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001254:	f003 fb52 	bl	80048fc <printToBufferWithoutEndUART1>
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4847      	ldr	r0, [pc, #284]	; (8001380 <InfoToUARTBeforeStart+0x23c>)
 8001262:	f003 fba3 	bl	80049ac <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 8001266:	4836      	ldr	r0, [pc, #216]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001268:	f003 fb48 	bl	80048fc <printToBufferWithoutEndUART1>
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4843      	ldr	r0, [pc, #268]	; (8001384 <InfoToUARTBeforeStart+0x240>)
 8001276:	f003 fb99 	bl	80049ac <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 800127a:	4831      	ldr	r0, [pc, #196]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800127c:	f003 fb3e 	bl	80048fc <printToBufferWithoutEndUART1>
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	483f      	ldr	r0, [pc, #252]	; (8001388 <InfoToUARTBeforeStart+0x244>)
 800128a:	f003 fb8f 	bl	80049ac <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 800128e:	482c      	ldr	r0, [pc, #176]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001290:	f003 fb34 	bl	80048fc <printToBufferWithoutEndUART1>
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	483b      	ldr	r0, [pc, #236]	; (800138c <InfoToUARTBeforeStart+0x248>)
 800129e:	f003 fb85 	bl	80049ac <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80012a4:	f003 fb2a 	bl	80048fc <printToBufferWithoutEndUART1>
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4837      	ldr	r0, [pc, #220]	; (8001390 <InfoToUARTBeforeStart+0x24c>)
 80012b2:	f003 fb7b 	bl	80049ac <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 80012b6:	4822      	ldr	r0, [pc, #136]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80012b8:	f003 fb20 	bl	80048fc <printToBufferWithoutEndUART1>
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <InfoToUARTBeforeStart+0x22c>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4833      	ldr	r0, [pc, #204]	; (8001394 <InfoToUARTBeforeStart+0x250>)
 80012c6:	f003 fb71 	bl	80049ac <printToBufferUART1D>
	delay_ms(50);
 80012ca:	2032      	movs	r0, #50	; 0x32
 80012cc:	f000 f8bc 	bl	8001448 <delay_ms>

	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80012d2:	f003 fb13 	bl	80048fc <printToBufferWithoutEndUART1>
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <InfoToUARTBeforeStart+0x254>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <InfoToUARTBeforeStart+0x258>)
 80012e0:	f003 fb64 	bl	80049ac <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80012e6:	f003 fb09 	bl	80048fc <printToBufferWithoutEndUART1>
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <InfoToUARTBeforeStart+0x254>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <InfoToUARTBeforeStart+0x25c>)
 80012f4:	f003 fb5a 	bl	80049ac <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 80012fa:	f003 faff 	bl	80048fc <printToBufferWithoutEndUART1>
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <InfoToUARTBeforeStart+0x254>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <InfoToUARTBeforeStart+0x260>)
 8001308:	f003 fb50 	bl	80049ac <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 800130e:	f003 faf5 	bl	80048fc <printToBufferWithoutEndUART1>
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <InfoToUARTBeforeStart+0x254>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4823      	ldr	r0, [pc, #140]	; (80013a8 <InfoToUARTBeforeStart+0x264>)
 800131c:	f003 fb46 	bl	80049ac <printToBufferUART1D>

	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <InfoToUARTBeforeStart+0x1fc>)
 8001322:	f003 faeb 	bl	80048fc <printToBufferWithoutEndUART1>
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <InfoToUARTBeforeStart+0x268>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <InfoToUARTBeforeStart+0x26c>)
 8001330:	f003 fb3c 	bl	80049ac <printToBufferUART1D>
	delay_ms(50);
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f000 f887 	bl	8001448 <delay_ms>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08005c18 	.word	0x08005c18
 8001344:	20000004 	.word	0x20000004
 8001348:	08005c20 	.word	0x08005c20
 800134c:	08005c34 	.word	0x08005c34
 8001350:	08005c54 	.word	0x08005c54
 8001354:	08005c74 	.word	0x08005c74
 8001358:	08005c94 	.word	0x08005c94
 800135c:	08005cb4 	.word	0x08005cb4
 8001360:	08005cd4 	.word	0x08005cd4
 8001364:	08005cf4 	.word	0x08005cf4
 8001368:	08005d14 	.word	0x08005d14
 800136c:	08005d34 	.word	0x08005d34
 8001370:	200000f4 	.word	0x200000f4
 8001374:	08005d4c 	.word	0x08005d4c
 8001378:	08005d60 	.word	0x08005d60
 800137c:	08005d7c 	.word	0x08005d7c
 8001380:	08005d8c 	.word	0x08005d8c
 8001384:	08005d9c 	.word	0x08005d9c
 8001388:	08005dac 	.word	0x08005dac
 800138c:	08005dbc 	.word	0x08005dbc
 8001390:	08005dd0 	.word	0x08005dd0
 8001394:	08005de4 	.word	0x08005de4
 8001398:	200001cc 	.word	0x200001cc
 800139c:	08005e04 	.word	0x08005e04
 80013a0:	08005e20 	.word	0x08005e20
 80013a4:	08005e48 	.word	0x08005e48
 80013a8:	08005e6c 	.word	0x08005e6c
 80013ac:	2000023c 	.word	0x2000023c
 80013b0:	08005e78 	.word	0x08005e78

080013b4 <delay_us>:
void delay_us(uint32_t us)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	volatile uint32_t n = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
	if (us==1) n=1;//в тактах процесора
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <delay_us+0x16>
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
	if (us==2) n=2;//в тактах процесора
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d101      	bne.n	80013d4 <delay_us+0x20>
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
	if (us==3) n=18;//в тактах процесора
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d101      	bne.n	80013de <delay_us+0x2a>
 80013da:	2312      	movs	r3, #18
 80013dc:	617b      	str	r3, [r7, #20]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d90a      	bls.n	80013fa <delay_us+0x46>
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <delay_us+0x88>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <delay_us+0x8c>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0c9b      	lsrs	r3, r3, #18
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	3a03      	subs	r2, #3
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <delay_us+0x90>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	613b      	str	r3, [r7, #16]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	60fb      	str	r3, [r7, #12]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <delay_us+0x90>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	60bb      	str	r3, [r7, #8]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d305      	bcc.n	8001420 <delay_us+0x6c>
            n0+=SysTick->LOAD+1;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <delay_us+0x90>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4413      	add	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        np=nc;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60fb      	str	r3, [r7, #12]
    }while(n0-nc<n);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	1a9a      	subs	r2, r3, r2
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	d3e9      	bcc.n	8001404 <delay_us+0x50>
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	2000023c 	.word	0x2000023c
 8001440:	431bde83 	.word	0x431bde83
 8001444:	e000e010 	.word	0xe000e010

08001448 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	while(value>0)
 8001450:	e006      	b.n	8001460 <delay_ms+0x18>
	{
		delay_us(1000);
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f7ff ffad 	bl	80013b4 <delay_us>
		value--;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3b01      	subs	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
	while(value>0)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f5      	bne.n	8001452 <delay_ms+0xa>
	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <calcCRC>:
* количество байтов, участвующих в расчете (ровно)
* начальный код CRC (если считается не с начала массива),
* Для ускорения расчета используется таблица
***********************************************************************/
char calcCRC(char *Ptr, char Num, char CRC1)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0c2      	sub	sp, #264	; 0x108
 8001474:	af00      	add	r7, sp, #0
 8001476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800147a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001488:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800148c:	4602      	mov	r2, r0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001494:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8001498:	460a      	mov	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
   char CrcTable[256] = {
 800149c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <calcCRC+0xb8>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	4611      	mov	r1, r2
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	461a      	mov	r2, r3
 80014b0:	f004 f8c8 	bl	8005644 <memcpy>
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 80014b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80014c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	6011      	str	r1, [r2, #0]
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014d0:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4053      	eors	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014e0:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80014e4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80014e8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80014ec:	5c52      	ldrb	r2, [r2, r1]
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014f4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80014f8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80014fc:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	3a01      	subs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800150a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1cf      	bne.n	80014b4 <calcCRC+0x44>
  return CRC1;
 8001514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001518:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800151c:	781b      	ldrb	r3, [r3, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08005e8c 	.word	0x08005e8c

0800152c <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	int32_t sign;
	int8_t i,k;
	char s[16];
	static char s1[16];
     if ((sign = n) < 0)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da02      	bge.n	8001544 <itoa+0x18>
         n = -n;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	425b      	negs	r3, r3
 8001542:	607b      	str	r3, [r7, #4]
     i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	77fb      	strb	r3, [r7, #31]
     do {
         s[i++] = n % 10 + '0';
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <itoa+0xe4>)
 800154c:	fb83 1302 	smull	r1, r3, r3, r2
 8001550:	1099      	asrs	r1, r3, #2
 8001552:	17d3      	asrs	r3, r2, #31
 8001554:	1ac9      	subs	r1, r1, r3
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1ad1      	subs	r1, r2, r3
 8001560:	b2cb      	uxtb	r3, r1
 8001562:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	3201      	adds	r2, #1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	77fa      	strb	r2, [r7, #31]
 800156e:	3330      	adds	r3, #48	; 0x30
 8001570:	b2da      	uxtb	r2, r3
 8001572:	f101 0320 	add.w	r3, r1, #32
 8001576:	443b      	add	r3, r7
 8001578:	f803 2c18 	strb.w	r2, [r3, #-24]
     } while ((n /= 10) > 0);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a24      	ldr	r2, [pc, #144]	; (8001610 <itoa+0xe4>)
 8001580:	fb82 1203 	smull	r1, r2, r2, r3
 8001584:	1092      	asrs	r2, r2, #2
 8001586:	17db      	asrs	r3, r3, #31
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dcda      	bgt.n	8001548 <itoa+0x1c>
     if (sign < 0)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	da0b      	bge.n	80015b0 <itoa+0x84>
         s[i++] = '-';
 8001598:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800159c:	b2d3      	uxtb	r3, r2
 800159e:	3301      	adds	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	77fb      	strb	r3, [r7, #31]
 80015a4:	4613      	mov	r3, r2
 80015a6:	3320      	adds	r3, #32
 80015a8:	443b      	add	r3, r7
 80015aa:	222d      	movs	r2, #45	; 0x2d
 80015ac:	f803 2c18 	strb.w	r2, [r3, #-24]
     s[i] = '\0';
 80015b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015b4:	3320      	adds	r3, #32
 80015b6:	443b      	add	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	f803 2c18 	strb.w	r2, [r3, #-24]

     k=0;
 80015be:	2300      	movs	r3, #0
 80015c0:	77bb      	strb	r3, [r7, #30]
     while (i)
 80015c2:	e016      	b.n	80015f2 <itoa+0xc6>
     {
    	s1[k]=s[i-1];
 80015c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015ce:	3220      	adds	r2, #32
 80015d0:	443a      	add	r2, r7
 80015d2:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <itoa+0xe8>)
 80015d8:	54d1      	strb	r1, [r2, r3]
    	i--;
 80015da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	77fb      	strb	r3, [r7, #31]
    	k++;
 80015e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	77bb      	strb	r3, [r7, #30]
     while (i)
 80015f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e4      	bne.n	80015c4 <itoa+0x98>
     }
     s1[k] = '\0';
 80015fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <itoa+0xe8>)
 8001600:	2100      	movs	r1, #0
 8001602:	54d1      	strb	r1, [r2, r3]
     return s1;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <itoa+0xe8>)
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	66666667 	.word	0x66666667
 8001614:	20000b30 	.word	0x20000b30

08001618 <itoa_koma>:
     s1[k] = '\0';
     return s1;
}

char * itoa_koma(int32_t n,uint8_t koma)
{
 8001618:	b480      	push	{r7}
 800161a:	b08f      	sub	sp, #60	; 0x3c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	int32_t sign;
	int8_t i,k,j;
	char s[17];
	char sKoma[17];
	static char s1[17];
    if ((sign = n) < 0)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	da02      	bge.n	8001634 <itoa_koma+0x1c>
    	n = -n;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	425b      	negs	r3, r3
 8001632:	607b      	str	r3, [r7, #4]
     i = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     do
     {
         s[i++] = n % 10 + '0';
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <itoa_koma+0x1b8>)
 800163e:	fb83 1302 	smull	r1, r3, r3, r2
 8001642:	1099      	asrs	r1, r3, #2
 8001644:	17d3      	asrs	r3, r2, #31
 8001646:	1ac9      	subs	r1, r1, r3
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	1ad1      	subs	r1, r2, r3
 8001652:	b2cb      	uxtb	r3, r1
 8001654:	f997 1037 	ldrsb.w	r1, [r7, #55]	; 0x37
 8001658:	b2ca      	uxtb	r2, r1
 800165a:	3201      	adds	r2, #1
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8001662:	3330      	adds	r3, #48	; 0x30
 8001664:	b2da      	uxtb	r2, r3
 8001666:	f101 0338 	add.w	r3, r1, #56	; 0x38
 800166a:	443b      	add	r3, r7
 800166c:	f803 2c1c 	strb.w	r2, [r3, #-28]
     } while ((n /= 10) > 0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a57      	ldr	r2, [pc, #348]	; (80017d0 <itoa_koma+0x1b8>)
 8001674:	fb82 1203 	smull	r1, r2, r2, r3
 8001678:	1092      	asrs	r2, r2, #2
 800167a:	17db      	asrs	r3, r3, #31
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	dcd9      	bgt.n	800163a <itoa_koma+0x22>
     s[i] = '\0';
 8001686:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800168a:	3338      	adds	r3, #56	; 0x38
 800168c:	443b      	add	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	f803 2c1c 	strb.w	r2, [r3, #-28]
     if (i<=1)
 8001694:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001698:	2b01      	cmp	r3, #1
 800169a:	dc0d      	bgt.n	80016b8 <itoa_koma+0xa0>
     {
       	 s[i] = '0';
 800169c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016a0:	3338      	adds	r3, #56	; 0x38
 80016a2:	443b      	add	r3, r7
 80016a4:	2230      	movs	r2, #48	; 0x30
 80016a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
       	 i++;
 80016aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     if (i<=2&&koma>1)
 80016b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016bc:	2b02      	cmp	r3, #2
 80016be:	dc10      	bgt.n	80016e2 <itoa_koma+0xca>
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d90d      	bls.n	80016e2 <itoa_koma+0xca>
     {
    	 s[i] = '0';
 80016c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016ca:	3338      	adds	r3, #56	; 0x38
 80016cc:	443b      	add	r3, r7
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    	 i++;
 80016d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     k=0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     j=0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     while (j<i)
 80016ee:	e02c      	b.n	800174a <itoa_koma+0x132>
     {
    	 if (k==koma)
 80016f0:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10d      	bne.n	8001716 <itoa_koma+0xfe>
         {
         	 sKoma[k]='.';
 80016fa:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80016fe:	3338      	adds	r3, #56	; 0x38
 8001700:	443b      	add	r3, r7
 8001702:	222e      	movs	r2, #46	; 0x2e
 8001704:	f803 2c30 	strb.w	r2, [r3, #-48]
         	 k++;
 8001708:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
         }
    	 sKoma[k]=s[j];
 8001716:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800171a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800171e:	3238      	adds	r2, #56	; 0x38
 8001720:	443a      	add	r2, r7
 8001722:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001726:	3338      	adds	r3, #56	; 0x38
 8001728:	443b      	add	r3, r7
 800172a:	f803 2c30 	strb.w	r2, [r3, #-48]
         j++;
 800172e:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3301      	adds	r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
         k++;
 800173c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     while (j<i)
 800174a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800174e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001752:	429a      	cmp	r2, r3
 8001754:	dbcc      	blt.n	80016f0 <itoa_koma+0xd8>
      }
     if (sign < 0) sKoma[k++] = '-';
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	2b00      	cmp	r3, #0
 800175a:	da0c      	bge.n	8001776 <itoa_koma+0x15e>
 800175c:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001760:	b2d3      	uxtb	r3, r2
 8001762:	3301      	adds	r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800176a:	4613      	mov	r3, r2
 800176c:	3338      	adds	r3, #56	; 0x38
 800176e:	443b      	add	r3, r7
 8001770:	222d      	movs	r2, #45	; 0x2d
 8001772:	f803 2c30 	strb.w	r2, [r3, #-48]
     i=0;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 800177c:	e018      	b.n	80017b0 <itoa_koma+0x198>
     {
    	s1[i]=sKoma[k-1];
 800177e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001788:	3238      	adds	r2, #56	; 0x38
 800178a:	443a      	add	r2, r7
 800178c:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <itoa_koma+0x1bc>)
 8001792:	54d1      	strb	r1, [r2, r3]
    	k--;
 8001794:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    	i++;
 80017a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 80017b0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e2      	bne.n	800177e <itoa_koma+0x166>
     }
     s1[i] = '\0';
 80017b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <itoa_koma+0x1bc>)
 80017be:	2100      	movs	r1, #0
 80017c0:	54d1      	strb	r1, [r2, r3]
     return s1;
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <itoa_koma+0x1bc>)
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	373c      	adds	r7, #60	; 0x3c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	66666667 	.word	0x66666667
 80017d4:	20000b40 	.word	0x20000b40

080017d8 <Module16>:
     }
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	if (value == 0) return 0;
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <Module16+0x16>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e00f      	b.n	800180e <Module16+0x36>
	if (value > 0) return value;
 80017ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dd02      	ble.n	80017fc <Module16+0x24>
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	e008      	b.n	800180e <Module16+0x36>
	if (value < 0) return (-1)*value;
 80017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da04      	bge.n	800180e <Module16+0x36>
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	425b      	negs	r3, r3
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21b      	sxth	r3, r3
 800180c:	e7ff      	b.n	800180e <Module16+0x36>
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <Module32>:
	if (value == 0) return 0;
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}
int32_t Module32 (int32_t value)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	if (value == 0) return 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <Module32+0x12>
 8001826:	2300      	movs	r3, #0
 8001828:	e00a      	b.n	8001840 <Module32+0x28>
	if (value > 0) return value;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd01      	ble.n	8001834 <Module32+0x1c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	e005      	b.n	8001840 <Module32+0x28>
	if (value < 0) return (-1)*value;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	da02      	bge.n	8001840 <Module32+0x28>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	425b      	negs	r3, r3
 800183e:	e7ff      	b.n	8001840 <Module32+0x28>
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <RunningAverageI1>:

   return middle;
}

int32_t RunningAverageI1(int32_t newValue)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <RunningAverageI1+0x4c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001870:	fb03 f202 	mul.w	r2, r3, r2
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <RunningAverageI1+0x4c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4413      	add	r3, r2
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <RunningAverageI1+0x4c>)
 800187c:	6013      	str	r3, [r2, #0]
	return filteredlValueI1/10;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <RunningAverageI1+0x4c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <RunningAverageI1+0x50>)
 8001884:	fb82 1203 	smull	r1, r2, r2, r3
 8001888:	1092      	asrs	r2, r2, #2
 800188a:	17db      	asrs	r3, r3, #31
 800188c:	1ad3      	subs	r3, r2, r3
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000b54 	.word	0x20000b54
 800189c:	66666667 	.word	0x66666667

080018a0 <RunningAverageI2>:

int32_t RunningAverageI2(int32_t newValue)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <RunningAverageI2+0x4c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80018c4:	fb03 f202 	mul.w	r2, r3, r2
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <RunningAverageI2+0x4c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <RunningAverageI2+0x4c>)
 80018d0:	6013      	str	r3, [r2, #0]
	return filteredlValueI2/10;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <RunningAverageI2+0x4c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <RunningAverageI2+0x50>)
 80018d8:	fb82 1203 	smull	r1, r2, r2, r3
 80018dc:	1092      	asrs	r2, r2, #2
 80018de:	17db      	asrs	r3, r3, #31
 80018e0:	1ad3      	subs	r3, r2, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000b58 	.word	0x20000b58
 80018f0:	66666667 	.word	0x66666667

080018f4 <RunningAverageU1>:

int32_t RunningAverageU1(int32_t newValue)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <RunningAverageU1+0x4c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001918:	fb03 f202 	mul.w	r2, r3, r2
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <RunningAverageU1+0x4c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <RunningAverageU1+0x4c>)
 8001924:	6013      	str	r3, [r2, #0]
	return filteredlValueU1/10;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <RunningAverageU1+0x4c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <RunningAverageU1+0x50>)
 800192c:	fb82 1203 	smull	r1, r2, r2, r3
 8001930:	1092      	asrs	r2, r2, #2
 8001932:	17db      	asrs	r3, r3, #31
 8001934:	1ad3      	subs	r3, r2, r3
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000b5c 	.word	0x20000b5c
 8001944:	66666667 	.word	0x66666667

08001948 <RunningAverageU2>:

int32_t RunningAverageU2(int32_t newValue)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <RunningAverageU2+0x4c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800196c:	fb03 f202 	mul.w	r2, r3, r2
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <RunningAverageU2+0x4c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <RunningAverageU2+0x4c>)
 8001978:	6013      	str	r3, [r2, #0]
	return filteredlValueU2/10;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <RunningAverageU2+0x4c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <RunningAverageU2+0x50>)
 8001980:	fb82 1203 	smull	r1, r2, r2, r3
 8001984:	1092      	asrs	r2, r2, #2
 8001986:	17db      	asrs	r3, r3, #31
 8001988:	1ad3      	subs	r3, r2, r3
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000b60 	.word	0x20000b60
 8001998:	66666667 	.word	0x66666667

0800199c <RunningAverageU3>:

int32_t RunningAverageU3(int32_t newValue)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU3 = 0;
	filteredlValueU3 += (newValue - filteredlValueU3) * k;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <RunningAverageU3+0x4c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019c0:	fb03 f202 	mul.w	r2, r3, r2
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <RunningAverageU3+0x4c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <RunningAverageU3+0x4c>)
 80019cc:	6013      	str	r3, [r2, #0]
	return filteredlValueU3/10;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <RunningAverageU3+0x4c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a06      	ldr	r2, [pc, #24]	; (80019ec <RunningAverageU3+0x50>)
 80019d4:	fb82 1203 	smull	r1, r2, r2, r3
 80019d8:	1092      	asrs	r2, r2, #2
 80019da:	17db      	asrs	r3, r3, #31
 80019dc:	1ad3      	subs	r3, r2, r3
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000b64 	.word	0x20000b64
 80019ec:	66666667 	.word	0x66666667

080019f0 <RunningAverageU4>:

int32_t RunningAverageU4(int32_t newValue)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU4 = 0;
	filteredlValueU4 += (newValue - filteredlValueU4) * k;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <RunningAverageU4+0x4c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a14:	fb03 f202 	mul.w	r2, r3, r2
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <RunningAverageU4+0x4c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <RunningAverageU4+0x4c>)
 8001a20:	6013      	str	r3, [r2, #0]
	return filteredlValueU4/10;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <RunningAverageU4+0x4c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <RunningAverageU4+0x50>)
 8001a28:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2c:	1092      	asrs	r2, r2, #2
 8001a2e:	17db      	asrs	r3, r3, #31
 8001a30:	1ad3      	subs	r3, r2, r3
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000b68 	.word	0x20000b68
 8001a40:	66666667 	.word	0x66666667

08001a44 <RunningAverageU5>:

int32_t RunningAverageU5(int32_t newValue)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU5 = 0;
	filteredlValueU5 += (newValue - filteredlValueU5) * k;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <RunningAverageU5+0x4c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a68:	fb03 f202 	mul.w	r2, r3, r2
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <RunningAverageU5+0x4c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <RunningAverageU5+0x4c>)
 8001a74:	6013      	str	r3, [r2, #0]
	return filteredlValueU5/10;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <RunningAverageU5+0x4c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <RunningAverageU5+0x50>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1092      	asrs	r2, r2, #2
 8001a82:	17db      	asrs	r3, r3, #31
 8001a84:	1ad3      	subs	r3, r2, r3
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000b6c 	.word	0x20000b6c
 8001a94:	66666667 	.word	0x66666667

08001a98 <RunningAverageU6>:

int32_t RunningAverageU6(int32_t newValue)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU6 = 0;
	filteredlValueU6 += (newValue - filteredlValueU6) * k;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <RunningAverageU6+0x4c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001abc:	fb03 f202 	mul.w	r2, r3, r2
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <RunningAverageU6+0x4c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <RunningAverageU6+0x4c>)
 8001ac8:	6013      	str	r3, [r2, #0]
	return filteredlValueU6/10;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <RunningAverageU6+0x4c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <RunningAverageU6+0x50>)
 8001ad0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad4:	1092      	asrs	r2, r2, #2
 8001ad6:	17db      	asrs	r3, r3, #31
 8001ad8:	1ad3      	subs	r3, r2, r3
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000b70 	.word	0x20000b70
 8001ae8:	66666667 	.word	0x66666667

08001aec <RunningAverageU7>:

int32_t RunningAverageU7(int32_t newValue)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU7 = 0;
	filteredlValueU7 += (newValue - filteredlValueU7) * k;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <RunningAverageU7+0x4c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b10:	fb03 f202 	mul.w	r2, r3, r2
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <RunningAverageU7+0x4c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <RunningAverageU7+0x4c>)
 8001b1c:	6013      	str	r3, [r2, #0]
	return filteredlValueU7/10;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <RunningAverageU7+0x4c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <RunningAverageU7+0x50>)
 8001b24:	fb82 1203 	smull	r1, r2, r2, r3
 8001b28:	1092      	asrs	r2, r2, #2
 8001b2a:	17db      	asrs	r3, r3, #31
 8001b2c:	1ad3      	subs	r3, r2, r3
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000b74 	.word	0x20000b74
 8001b3c:	66666667 	.word	0x66666667

08001b40 <RunningAverageU8>:

int32_t RunningAverageU8(int32_t newValue)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU8 = 0;
	filteredlValueU8 += (newValue - filteredlValueU8) * k;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <RunningAverageU8+0x4c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b64:	fb03 f202 	mul.w	r2, r3, r2
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <RunningAverageU8+0x4c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <RunningAverageU8+0x4c>)
 8001b70:	6013      	str	r3, [r2, #0]
	return filteredlValueU8/10;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <RunningAverageU8+0x4c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <RunningAverageU8+0x50>)
 8001b78:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7c:	1092      	asrs	r2, r2, #2
 8001b7e:	17db      	asrs	r3, r3, #31
 8001b80:	1ad3      	subs	r3, r2, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000b78 	.word	0x20000b78
 8001b90:	66666667 	.word	0x66666667

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <__NVIC_EnableIRQ+0x34>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <LL_ADC_DMA_GetRegAddr>:
  
  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	334c      	adds	r3, #76	; 0x4c
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	332c      	adds	r3, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d84:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	211f      	movs	r1, #31
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f003 011f 	and.w	r1, r3, #31
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dc8:	bf00      	nop
 8001dca:	3724      	adds	r7, #36	; 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b08d      	sub	sp, #52	; 0x34
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	330c      	adds	r3, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	617a      	str	r2, [r7, #20]
  return result;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	40d3      	lsrs	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001e12:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001e16:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	fa91 f1a1 	rbit	r1, r1
 8001e1e:	61f9      	str	r1, [r7, #28]
  return result;
 8001e20:	69f9      	ldr	r1, [r7, #28]
 8001e22:	fab1 f181 	clz	r1, r1
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	40cb      	lsrs	r3, r1
 8001e2a:	2107      	movs	r1, #7
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001e3a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001e3e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e42:	fa91 f1a1 	rbit	r1, r1
 8001e46:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4a:	fab1 f181 	clz	r1, r1
 8001e4e:	b2c9      	uxtb	r1, r1
 8001e50:	40cb      	lsrs	r3, r1
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001e5e:	bf00      	nop
 8001e60:	3734      	adds	r7, #52	; 0x34
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <LL_DMA_EnableChannel+0x38>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	3a01      	subs	r2, #1
 8001f06:	4906      	ldr	r1, [pc, #24]	; (8001f20 <LL_DMA_EnableChannel+0x38>)
 8001f08:	5c8a      	ldrb	r2, [r1, r2]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	440a      	add	r2, r1
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	08006118 	.word	0x08006118

08001f24 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <LL_DMA_SetDataTransferDirection+0x44>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f44:	f023 0310 	bic.w	r3, r3, #16
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <LL_DMA_SetDataTransferDirection+0x44>)
 8001f4e:	5c8a      	ldrb	r2, [r1, r2]
 8001f50:	4611      	mov	r1, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	440a      	add	r2, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	08006118 	.word	0x08006118

08001f6c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LL_DMA_SetMode+0x40>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0220 	bic.w	r2, r3, #32
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4906      	ldr	r1, [pc, #24]	; (8001fac <LL_DMA_SetMode+0x40>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	4619      	mov	r1, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	440b      	add	r3, r1
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	08006118 	.word	0x08006118

08001fb0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LL_DMA_SetPeriphIncMode+0x40>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <LL_DMA_SetPeriphIncMode+0x40>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	440b      	add	r3, r1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	08006118 	.word	0x08006118

08001ff4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <LL_DMA_SetMemoryIncMode+0x40>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	4906      	ldr	r1, [pc, #24]	; (8002034 <LL_DMA_SetMemoryIncMode+0x40>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	4619      	mov	r1, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	440b      	add	r3, r1
 8002022:	4619      	mov	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	08006118 	.word	0x08006118

08002038 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3b01      	subs	r3, #1
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LL_DMA_SetPeriphSize+0x40>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3b01      	subs	r3, #1
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <LL_DMA_SetPeriphSize+0x40>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	4619      	mov	r1, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	440b      	add	r3, r1
 8002066:	4619      	mov	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	08006118 	.word	0x08006118

0800207c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3b01      	subs	r3, #1
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LL_DMA_SetMemorySize+0x40>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	3b01      	subs	r3, #1
 80020a0:	4906      	ldr	r1, [pc, #24]	; (80020bc <LL_DMA_SetMemorySize+0x40>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	4619      	mov	r1, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	440b      	add	r3, r1
 80020aa:	4619      	mov	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	08006118 	.word	0x08006118

080020c0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4906      	ldr	r1, [pc, #24]	; (8002100 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	4619      	mov	r1, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	440b      	add	r3, r1
 80020ee:	4619      	mov	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
             Priority);
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	08006118 	.word	0x08006118

08002104 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LL_DMA_SetDataLength+0x40>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	3a01      	subs	r2, #1
 8002128:	4906      	ldr	r1, [pc, #24]	; (8002144 <LL_DMA_SetDataLength+0x40>)
 800212a:	5c8a      	ldrb	r2, [r1, r2]
 800212c:	4611      	mov	r1, r2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	440a      	add	r2, r1
 8002132:	4611      	mov	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	08006118 	.word	0x08006118

08002148 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d114      	bne.n	8002186 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <LL_DMA_ConfigAddresses+0x70>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3b01      	subs	r3, #1
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <LL_DMA_ConfigAddresses+0x70>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	461a      	mov	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8002184:	e013      	b.n	80021ae <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LL_DMA_ConfigAddresses+0x70>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <LL_DMA_ConfigAddresses+0x70>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	60d3      	str	r3, [r2, #12]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	08006118 	.word	0x08006118

080021bc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <LL_RCC_HSE_Enable+0x18>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <LL_RCC_HSE_Enable+0x18>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000

080021d8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <LL_RCC_HSE_IsReady+0x20>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000

080021fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <LL_RCC_SetSysClkSource+0x24>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 0203 	bic.w	r2, r3, #3
 800220c:	4904      	ldr	r1, [pc, #16]	; (8002220 <LL_RCC_SetSysClkSource+0x24>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <LL_RCC_GetSysClkSource+0x14>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000

0800223c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <LL_RCC_SetAHBPrescaler+0x24>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	4904      	ldr	r1, [pc, #16]	; (8002260 <LL_RCC_SetAHBPrescaler+0x24>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000

08002264 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <LL_RCC_SetAPB1Prescaler+0x24>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	4904      	ldr	r1, [pc, #16]	; (8002288 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229c:	4904      	ldr	r1, [pc, #16]	; (80022b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <LL_RCC_SetADCClockSource+0x24>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022c4:	4904      	ldr	r1, [pc, #16]	; (80022d8 <LL_RCC_SetADCClockSource+0x24>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <LL_RCC_PLL_Enable+0x18>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <LL_RCC_PLL_Enable+0x18>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000

080022f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <LL_RCC_PLL_IsReady+0x20>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	430b      	orrs	r3, r1
 8002338:	4908      	ldr	r1, [pc, #32]	; (800235c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4903      	ldr	r1, [pc, #12]	; (800235c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800234e:	4313      	orrs	r3, r2
 8002350:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000

08002360 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	605a      	str	r2, [r3, #4]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60da      	str	r2, [r3, #12]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	615a      	str	r2, [r3, #20]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60da      	str	r2, [r3, #12]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	43da      	mvns	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	615a      	str	r2, [r3, #20]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800256a:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002576:	6053      	str	r3, [r2, #4]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40010000 	.word	0x40010000

08002584 <OFF_Itself>:

Key_Pressed_t pressedKey = 0;


void OFF_Itself()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	if (EEpromSaveStatus == 0)
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <OFF_Itself+0x48>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <OFF_Itself+0x22>
	{
		if (BatteryCapacityDischargeCurrent/3600 > 200)
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <OFF_Itself+0x4c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <OFF_Itself+0x50>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d905      	bls.n	80025a6 <OFF_Itself+0x22>
		{
			//SaveData.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
			//EEpromWrite();
			logInfo("Data saved ");
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <OFF_Itself+0x54>)
 800259c:	f002 f9ae 	bl	80048fc <printToBufferWithoutEndUART1>
 80025a0:	480e      	ldr	r0, [pc, #56]	; (80025dc <OFF_Itself+0x58>)
 80025a2:	f002 f91f 	bl	80047e4 <printToBufferUART1>
		}
	}
	EEpromSaveStatus = 1;
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <OFF_Itself+0x48>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	801a      	strh	r2, [r3, #0]
	logInfo("OFF All System");
 80025ac:	480a      	ldr	r0, [pc, #40]	; (80025d8 <OFF_Itself+0x54>)
 80025ae:	f002 f9a5 	bl	80048fc <printToBufferWithoutEndUART1>
 80025b2:	480b      	ldr	r0, [pc, #44]	; (80025e0 <OFF_Itself+0x5c>)
 80025b4:	f002 f916 	bl	80047e4 <printToBufferUART1>
	delay_ms(100);
 80025b8:	2064      	movs	r0, #100	; 0x64
 80025ba:	f7fe ff45 	bl	8001448 <delay_ms>
	GPIOA->BSRR =  GPIO_BSRR_BR11;//OFF CPU
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <OFF_Itself+0x60>)
 80025c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c4:	611a      	str	r2, [r3, #16]

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000b24 	.word	0x20000b24
 80025d0:	20000b98 	.word	0x20000b98
 80025d4:	000b0a8f 	.word	0x000b0a8f
 80025d8:	08005f8c 	.word	0x08005f8c
 80025dc:	08005f94 	.word	0x08005f94
 80025e0:	08005fa0 	.word	0x08005fa0
 80025e4:	40010800 	.word	0x40010800

080025e8 <AllBalansirON>:

void AllBalansirON()
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <AllBalansirON+0x48>)
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <AllBalansirON+0x48>)
 80025f4:	2240      	movs	r2, #64	; 0x40
 80025f6:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <AllBalansirON+0x4c>)
 80025fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025fe:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <AllBalansirON+0x4c>)
 8002602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002606:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <AllBalansirON+0x4c>)
 800260a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260e:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <AllBalansirON+0x4c>)
 8002612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002616:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <AllBalansirON+0x4c>)
 800261a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261e:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <AllBalansirON+0x4c>)
 8002622:	2220      	movs	r2, #32
 8002624:	611a      	str	r2, [r3, #16]

}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40011000 	.word	0x40011000
 8002634:	40010c00 	.word	0x40010c00

08002638 <Balansir_handler>:


#define DEBAUNCE 3  //3 - 30mV
#define DEBAUNCE_FAIL 2 //1 - 10mV
void Balansir_handler()
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
	if(CellsDatabase[0].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <Balansir_handler+0x1fc>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002646:	d302      	bcc.n	800264e <Balansir_handler+0x16>
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <Balansir_handler+0x200>)
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[0].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR7;//Battery 1 Balansir OFF
 800264e:	4b79      	ldr	r3, [pc, #484]	; (8002834 <Balansir_handler+0x1fc>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002656:	d803      	bhi.n	8002660 <Balansir_handler+0x28>
 8002658:	4b77      	ldr	r3, [pc, #476]	; (8002838 <Balansir_handler+0x200>)
 800265a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800265e:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[1].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 8002660:	4b74      	ldr	r3, [pc, #464]	; (8002834 <Balansir_handler+0x1fc>)
 8002662:	8b9b      	ldrh	r3, [r3, #28]
 8002664:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002668:	d302      	bcc.n	8002670 <Balansir_handler+0x38>
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <Balansir_handler+0x200>)
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[1].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR6;//Battery 2 Balansir OFF
 8002670:	4b70      	ldr	r3, [pc, #448]	; (8002834 <Balansir_handler+0x1fc>)
 8002672:	8b9b      	ldrh	r3, [r3, #28]
 8002674:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002678:	d803      	bhi.n	8002682 <Balansir_handler+0x4a>
 800267a:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <Balansir_handler+0x200>)
 800267c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002680:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[2].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 8002682:	4b6c      	ldr	r3, [pc, #432]	; (8002834 <Balansir_handler+0x1fc>)
 8002684:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002686:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800268a:	d303      	bcc.n	8002694 <Balansir_handler+0x5c>
 800268c:	4b6b      	ldr	r3, [pc, #428]	; (800283c <Balansir_handler+0x204>)
 800268e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002692:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[2].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR15;//Battery 3 Balansir OFF
 8002694:	4b67      	ldr	r3, [pc, #412]	; (8002834 <Balansir_handler+0x1fc>)
 8002696:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002698:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 800269c:	d803      	bhi.n	80026a6 <Balansir_handler+0x6e>
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <Balansir_handler+0x204>)
 80026a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026a4:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[3].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <Balansir_handler+0x1fc>)
 80026a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026ac:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 80026b0:	d303      	bcc.n	80026ba <Balansir_handler+0x82>
 80026b2:	4b62      	ldr	r3, [pc, #392]	; (800283c <Balansir_handler+0x204>)
 80026b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b8:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[3].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR14;//Battery 4 Balansir OFF
 80026ba:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <Balansir_handler+0x1fc>)
 80026bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026c0:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 80026c4:	d803      	bhi.n	80026ce <Balansir_handler+0x96>
 80026c6:	4b5d      	ldr	r3, [pc, #372]	; (800283c <Balansir_handler+0x204>)
 80026c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026cc:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[4].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 80026ce:	4b59      	ldr	r3, [pc, #356]	; (8002834 <Balansir_handler+0x1fc>)
 80026d0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80026d4:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 80026d8:	d303      	bcc.n	80026e2 <Balansir_handler+0xaa>
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <Balansir_handler+0x204>)
 80026dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e0:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[4].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR13;//Battery 5 Balansir OFF
 80026e2:	4b54      	ldr	r3, [pc, #336]	; (8002834 <Balansir_handler+0x1fc>)
 80026e4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80026e8:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 80026ec:	d803      	bhi.n	80026f6 <Balansir_handler+0xbe>
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <Balansir_handler+0x204>)
 80026f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026f4:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[5].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 80026f6:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <Balansir_handler+0x1fc>)
 80026f8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80026fc:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002700:	d303      	bcc.n	800270a <Balansir_handler+0xd2>
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <Balansir_handler+0x204>)
 8002704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002708:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[5].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR12;//Battery 6 Balansir OFF
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <Balansir_handler+0x1fc>)
 800270c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002710:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002714:	d803      	bhi.n	800271e <Balansir_handler+0xe6>
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <Balansir_handler+0x204>)
 8002718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271c:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[6].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 800271e:	4b45      	ldr	r3, [pc, #276]	; (8002834 <Balansir_handler+0x1fc>)
 8002720:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002724:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002728:	d303      	bcc.n	8002732 <Balansir_handler+0xfa>
 800272a:	4b44      	ldr	r3, [pc, #272]	; (800283c <Balansir_handler+0x204>)
 800272c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002730:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[6].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR8;//Battery 7 Balansir OFF
 8002732:	4b40      	ldr	r3, [pc, #256]	; (8002834 <Balansir_handler+0x1fc>)
 8002734:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002738:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 800273c:	d803      	bhi.n	8002746 <Balansir_handler+0x10e>
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <Balansir_handler+0x204>)
 8002740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002744:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[7].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <Balansir_handler+0x1fc>)
 8002748:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800274c:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002750:	d302      	bcc.n	8002758 <Balansir_handler+0x120>
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <Balansir_handler+0x204>)
 8002754:	2220      	movs	r2, #32
 8002756:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[7].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR5;//Battery 8 Balansir OFF
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <Balansir_handler+0x1fc>)
 800275a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800275e:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002762:	d803      	bhi.n	800276c <Balansir_handler+0x134>
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <Balansir_handler+0x204>)
 8002766:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800276a:	611a      	str	r2, [r3, #16]





	volatile uint8_t i = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageBeforeUmax  = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002774:	2300      	movs	r3, #0
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	e033      	b.n	80027e2 <Balansir_handler+0x1aa>
	{
		if(CellsDatabase[i].Voltage>(MAX_VOLTAGE+DEBAUNCE+DEBAUNCE_FAIL))
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <Balansir_handler+0x1fc>)
 8002782:	460b      	mov	r3, r1
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	1a5b      	subs	r3, r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8002792:	d30f      	bcc.n	80027b4 <Balansir_handler+0x17c>
		{
			Output_OFF();
 8002794:	f000 ffae 	bl	80036f4 <Output_OFF>
			OverChargeStatus=1;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <Balansir_handler+0x208>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
			logDebugD("OverCharge B",i+1,0);
 800279e:	4829      	ldr	r0, [pc, #164]	; (8002844 <Balansir_handler+0x20c>)
 80027a0:	f002 f8ac 	bl	80048fc <printToBufferWithoutEndUART1>
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	2200      	movs	r2, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	4826      	ldr	r0, [pc, #152]	; (8002848 <Balansir_handler+0x210>)
 80027b0:	f002 f8fc 	bl	80049ac <printToBufferUART1D>
		}
		if(CellsDatabase[i].Voltage <= (MAX_VOLTAGE))
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <Balansir_handler+0x1fc>)
 80027bc:	460b      	mov	r3, r1
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a5b      	subs	r3, r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80027cc:	d804      	bhi.n	80027d8 <Balansir_handler+0x1a0>
		{
			RestoreVoltageBeforeUmax++;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d9c7      	bls.n	800277a <Balansir_handler+0x142>
		}

	}

	if((OverChargeStatus==1)&&(RestoreVoltageBeforeUmax == i)&&(OverDisChargeStatus==0)&&(CurrentShortStatus==0))
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <Balansir_handler+0x208>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d11a      	bne.n	800282a <Balansir_handler+0x1f2>
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d114      	bne.n	800282a <Balansir_handler+0x1f2>
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <Balansir_handler+0x214>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <Balansir_handler+0x1f2>
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <Balansir_handler+0x218>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <Balansir_handler+0x1f2>
	{
		Output_ON();
 8002814:	f000 ff54 	bl	80036c0 <Output_ON>
		OverChargeStatus=0;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <Balansir_handler+0x208>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
		logDebug("No OverCharge - Output_ON");
 800281e:	4809      	ldr	r0, [pc, #36]	; (8002844 <Balansir_handler+0x20c>)
 8002820:	f002 f86c 	bl	80048fc <printToBufferWithoutEndUART1>
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <Balansir_handler+0x21c>)
 8002826:	f001 ffdd 	bl	80047e4 <printToBufferUART1>
	}

}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000c50 	.word	0x20000c50
 8002838:	40011000 	.word	0x40011000
 800283c:	40010c00 	.word	0x40010c00
 8002840:	20000b20 	.word	0x20000b20
 8002844:	08005fb0 	.word	0x08005fb0
 8002848:	08005fb8 	.word	0x08005fb8
 800284c:	20000b21 	.word	0x20000b21
 8002850:	20000b22 	.word	0x20000b22
 8002854:	08005fc8 	.word	0x08005fc8

08002858 <MinVoltage_handler>:
void MinVoltage_handler()
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	volatile uint8_t i = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageonCells = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002866:	2300      	movs	r3, #0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	e087      	b.n	800297c <MinVoltage_handler+0x124>
	{
		//logDebugD("i ",i+1,0);
		//logDebugD("CellsDatabase[i].Voltage ",CellsDatabase[i].Voltage,2);
		//logDebugD("Res ",(RESISTANCE*Module32(Battery.Current))/1000,2);
		//logDebugD("xxx ",(MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000),2);
		if(CellsDatabase[i].Voltage < (MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000))
 800286c:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <MinVoltage_handler+0x188>)
 800286e:	885b      	ldrh	r3, [r3, #2]
 8002870:	b21b      	sxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe ffd0 	bl	8001818 <Module32>
 8002878:	4603      	mov	r3, r0
 800287a:	4a5a      	ldr	r2, [pc, #360]	; (80029e4 <MinVoltage_handler+0x18c>)
 800287c:	fb82 1203 	smull	r1, r2, r2, r3
 8002880:	1152      	asrs	r2, r2, #5
 8002882:	17db      	asrs	r3, r3, #31
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	f203 1217 	addw	r2, r3, #279	; 0x117
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	4955      	ldr	r1, [pc, #340]	; (80029e8 <MinVoltage_handler+0x190>)
 8002892:	4603      	mov	r3, r0
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a1b      	subs	r3, r3, r0
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	db26      	blt.n	80028f0 <MinVoltage_handler+0x98>
		{
			if(CellsDatabase[i].BatVoltLowerMin_Status==0)
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	4a4f      	ldr	r2, [pc, #316]	; (80029e8 <MinVoltage_handler+0x190>)
 80028aa:	460b      	mov	r3, r1
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	1a5b      	subs	r3, r3, r1
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3318      	adds	r3, #24
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12a      	bne.n	8002912 <MinVoltage_handler+0xba>
			{
				CellsDatabase[i].TimeSec = time_sec;
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <MinVoltage_handler+0x194>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4948      	ldr	r1, [pc, #288]	; (80029e8 <MinVoltage_handler+0x190>)
 80028c8:	4603      	mov	r3, r0
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a1b      	subs	r3, r3, r0
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	330c      	adds	r3, #12
 80028d4:	601a      	str	r2, [r3, #0]
				CellsDatabase[i].BatVoltLowerMin_Status=1;
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <MinVoltage_handler+0x190>)
 80028de:	460b      	mov	r3, r1
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a5b      	subs	r3, r3, r1
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3318      	adds	r3, #24
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e010      	b.n	8002912 <MinVoltage_handler+0xba>
			}
		}
		else
		{
			CellsDatabase[i].BatVoltLowerMin_Status=0;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <MinVoltage_handler+0x190>)
 80028f8:	460b      	mov	r3, r1
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a5b      	subs	r3, r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3318      	adds	r3, #24
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
			RestoreVoltageonCells++;
 8002908:	79bb      	ldrb	r3, [r7, #6]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	71bb      	strb	r3, [r7, #6]
		}

		if (CellsDatabase[i].BatVoltLowerMin_Status==1)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4619      	mov	r1, r3
 8002918:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <MinVoltage_handler+0x190>)
 800291a:	460b      	mov	r3, r1
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3318      	adds	r3, #24
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d122      	bne.n	8002972 <MinVoltage_handler+0x11a>
			if((time_sec-CellsDatabase[i].TimeSec)>CELLS_MIN_VOLTAGE_TIMER_OFF_SEC)
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <MinVoltage_handler+0x194>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	492c      	ldr	r1, [pc, #176]	; (80029e8 <MinVoltage_handler+0x190>)
 8002938:	4603      	mov	r3, r0
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a1b      	subs	r3, r3, r0
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	330c      	adds	r3, #12
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b05      	cmp	r3, #5
 800294a:	d912      	bls.n	8002972 <MinVoltage_handler+0x11a>
			{
				OverDisChargeStatus = 1;
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <MinVoltage_handler+0x198>)
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
				Output_OFF();
 8002952:	f000 fecf 	bl	80036f4 <Output_OFF>
				Battery.BatteryLevel = LOW_BATTERY;
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <MinVoltage_handler+0x188>)
 8002958:	2201      	movs	r2, #1
 800295a:	721a      	strb	r2, [r3, #8]
				logDebugD("OFF. Min voltage ",i+1,0);
 800295c:	4825      	ldr	r0, [pc, #148]	; (80029f4 <MinVoltage_handler+0x19c>)
 800295e:	f001 ffcd 	bl	80048fc <printToBufferWithoutEndUART1>
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	2200      	movs	r2, #0
 800296a:	4619      	mov	r1, r3
 800296c:	4822      	ldr	r0, [pc, #136]	; (80029f8 <MinVoltage_handler+0x1a0>)
 800296e:	f002 f81d 	bl	80049ac <printToBufferUART1D>
	for(i=0;i<ID_MAX_COUNT;i++)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	71fb      	strb	r3, [r7, #7]
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b07      	cmp	r3, #7
 8002982:	f67f af73 	bls.w	800286c <MinVoltage_handler+0x14>
			}
	}

	if((OverDisChargeStatus==1)&&(RestoreVoltageonCells==i)&&(OverChargeStatus==0)&&(CurrentShortStatus==0))
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MinVoltage_handler+0x198>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d122      	bne.n	80029d6 <MinVoltage_handler+0x17e>
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	429a      	cmp	r2, r3
 800299a:	d11c      	bne.n	80029d6 <MinVoltage_handler+0x17e>
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <MinVoltage_handler+0x1a4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d117      	bne.n	80029d6 <MinVoltage_handler+0x17e>
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MinVoltage_handler+0x1a8>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <MinVoltage_handler+0x17e>
	{
		Output_ON();
 80029b0:	f000 fe86 	bl	80036c0 <Output_ON>
		OverDisChargeStatus=0;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MinVoltage_handler+0x198>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
		Battery.BatteryLevel = BATTERY_OK;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MinVoltage_handler+0x188>)
 80029bc:	2202      	movs	r2, #2
 80029be:	721a      	strb	r2, [r3, #8]
		logDebugD("ON. B V > min V ",i+1,0);
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <MinVoltage_handler+0x19c>)
 80029c2:	f001 ff9b 	bl	80048fc <printToBufferWithoutEndUART1>
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	2200      	movs	r2, #0
 80029ce:	4619      	mov	r1, r3
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <MinVoltage_handler+0x1ac>)
 80029d2:	f001 ffeb 	bl	80049ac <printToBufferUART1D>
	}
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000d30 	.word	0x20000d30
 80029e4:	51eb851f 	.word	0x51eb851f
 80029e8:	20000c50 	.word	0x20000c50
 80029ec:	20000b7c 	.word	0x20000b7c
 80029f0:	20000b21 	.word	0x20000b21
 80029f4:	08005fb0 	.word	0x08005fb0
 80029f8:	08005fe4 	.word	0x08005fe4
 80029fc:	20000b20 	.word	0x20000b20
 8002a00:	20000b22 	.word	0x20000b22
 8002a04:	08005ff8 	.word	0x08005ff8

08002a08 <OffByTimeOutIfNoAction_handler>:
void OffByTimeOutIfNoAction_handler()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	if(PowerOffTimesec>TIMEOUT_OFF)
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <OffByTimeOutIfNoAction_handler+0x18>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002a14:	d901      	bls.n	8002a1a <OffByTimeOutIfNoAction_handler+0x12>
	{
		OFF_Itself();
 8002a16:	f7ff fdb5 	bl	8002584 <OFF_Itself>
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000b94 	.word	0x20000b94

08002a24 <VoltageLevelByLEDFlash>:

uint8_t flash = 1;
uint32_t FlashVoltage =0 ;
int32_t step;
void VoltageLevelByLEDFlash()
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

   if (Battery.Voltage <= ID_MAX_COUNT*MIN_VOLTAGE) GPIOB->BSRR =  GPIO_BSRR_BR3;//LED OFF always
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <VoltageLevelByLEDFlash+0xb4>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f5b3 6f0c 	cmp.w	r3, #2240	; 0x8c0
 8002a32:	d804      	bhi.n	8002a3e <VoltageLevelByLEDFlash+0x1a>
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <VoltageLevelByLEDFlash+0xb8>)
 8002a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a3a:	611a      	str	r2, [r3, #16]
		}
		FlashVoltage = FlashVoltage+step;
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
   }

}
 8002a3c:	e047      	b.n	8002ace <VoltageLevelByLEDFlash+0xaa>
    	step =(10*ID_MAX_COUNT*(Voltage95Percent - Voltage10Percent))/100;//~30
 8002a3e:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <VoltageLevelByLEDFlash+0xbc>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <VoltageLevelByLEDFlash+0xc0>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <VoltageLevelByLEDFlash+0xc4>)
 8002a58:	fb82 1203 	smull	r1, r2, r2, r3
 8002a5c:	1152      	asrs	r2, r2, #5
 8002a5e:	17db      	asrs	r3, r3, #31
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <VoltageLevelByLEDFlash+0xc8>)
 8002a64:	6013      	str	r3, [r2, #0]
		if (Battery.Voltage*10>FlashVoltage)
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <VoltageLevelByLEDFlash+0xb4>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <VoltageLevelByLEDFlash+0xcc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d903      	bls.n	8002a88 <VoltageLevelByLEDFlash+0x64>
			GPIOB->BSRR =  GPIO_BSRR_BS3;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <VoltageLevelByLEDFlash+0xb8>)
 8002a82:	2208      	movs	r2, #8
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e003      	b.n	8002a90 <VoltageLevelByLEDFlash+0x6c>
			GPIOB->BSRR =  GPIO_BSRR_BR3;
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <VoltageLevelByLEDFlash+0xb8>)
 8002a8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a8e:	611a      	str	r2, [r3, #16]
		FlashVoltage = FlashVoltage+step;
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <VoltageLevelByLEDFlash+0xcc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <VoltageLevelByLEDFlash+0xc8>)
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <VoltageLevelByLEDFlash+0xcc>)
 8002a9c:	6013      	str	r3, [r2, #0]
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <VoltageLevelByLEDFlash+0xbc>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <VoltageLevelByLEDFlash+0xcc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d20a      	bcs.n	8002ace <VoltageLevelByLEDFlash+0xaa>
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <VoltageLevelByLEDFlash+0xc0>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <VoltageLevelByLEDFlash+0xcc>)
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000d30 	.word	0x20000d30
 8002adc:	40010c00 	.word	0x40010c00
 8002ae0:	20000fcc 	.word	0x20000fcc
 8002ae4:	20000f54 	.word	0x20000f54
 8002ae8:	51eb851f 	.word	0x51eb851f
 8002aec:	20000fc4 	.word	0x20000fc4
 8002af0:	20000be4 	.word	0x20000be4

08002af4 <BUT_Debrief>:


int16_t comp = 0;
void BUT_Debrief(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_10))
 8002afa:	491b      	ldr	r1, [pc, #108]	; (8002b68 <BUT_Debrief+0x74>)
 8002afc:	481b      	ldr	r0, [pc, #108]	; (8002b6c <BUT_Debrief+0x78>)
 8002afe:	f7ff fd07 	bl	8002510 <LL_GPIO_IsInputPinSet>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <BUT_Debrief+0x1a>
		key = KEY_ACTION;
 8002b08:	2305      	movs	r3, #5
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	e001      	b.n	8002b12 <BUT_Debrief+0x1e>
	//else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
	//	key = KEY_BACK;

	else
	{
		key = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71fb      	strb	r3, [r7, #7]
	}

	if (key)
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <BUT_Debrief+0x66>
	{
		if (comp > THRESHOLD2)
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b22:	4293      	cmp	r3, r2
 8002b24:	dd07      	ble.n	8002b36 <BUT_Debrief+0x42>
		{
			comp = THRESHOLD2 - 40;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b28:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002b2c:	801a      	strh	r2, [r3, #0]
			pressedKey = key;
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <BUT_Debrief+0x80>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	7013      	strb	r3, [r2, #0]
			return;
 8002b34:	e014      	b.n	8002b60 <BUT_Debrief+0x6c>
		}
		else comp++;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b21a      	sxth	r2, r3
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b46:	801a      	strh	r2, [r3, #0]

		if (comp == THRESHOLD)
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4e:	2b14      	cmp	r3, #20
 8002b50:	d106      	bne.n	8002b60 <BUT_Debrief+0x6c>
			{
			pressedKey = key;
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <BUT_Debrief+0x80>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	7013      	strb	r3, [r2, #0]
			return;
 8002b58:	e002      	b.n	8002b60 <BUT_Debrief+0x6c>
		}
	}
	else comp=0;
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <BUT_Debrief+0x7c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	801a      	strh	r2, [r3, #0]
}
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	04040004 	.word	0x04040004
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	20000be8 	.word	0x20000be8
 8002b74:	20000be2 	.word	0x20000be2

08002b78 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
	if (pressedKey) PowerOffTimesec=0;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <BUT_GetKey+0x2c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BUT_GetKey+0x14>
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <BUT_GetKey+0x30>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
	Key_Pressed_t key = pressedKey;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <BUT_GetKey+0x2c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	71fb      	strb	r3, [r7, #7]
	pressedKey = 0;
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <BUT_GetKey+0x2c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
	return key;
 8002b98:	79fb      	ldrb	r3, [r7, #7]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	20000be2 	.word	0x20000be2
 8002ba8:	20000b94 	.word	0x20000b94

08002bac <SysTick_Callback>:
}



void SysTick_Callback()//1 mc
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	BUT_Debrief();
 8002bb0:	f7ff ffa0 	bl	8002af4 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 8002bb4:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <SysTick_Callback+0x1d0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a70      	ldr	r2, [pc, #448]	; (8002d7c <SysTick_Callback+0x1d0>)
 8002bbc:	6013      	str	r3, [r2, #0]

	//5mc
	if (Count5mSecond >= 5)
 8002bbe:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <SysTick_Callback+0x1d4>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d904      	bls.n	8002bd2 <SysTick_Callback+0x26>
	{
		Count5mSecond = 0;
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <SysTick_Callback+0x1d4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]

		adc_func();
 8002bce:	f000 f8ff 	bl	8002dd0 <adc_func>

	}
	//10mc
	if (Count10mSecond >= 10)
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <SysTick_Callback+0x1d8>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d904      	bls.n	8002be6 <SysTick_Callback+0x3a>
	{
		Count10mSecond = 0;
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <SysTick_Callback+0x1d8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	801a      	strh	r2, [r3, #0]
		VoltageLevelByLEDFlash();
 8002be2:	f7ff ff1f 	bl	8002a24 <VoltageLevelByLEDFlash>

	}
	//100mc
	if (Count100mSecond >= 100)
 8002be6:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <SysTick_Callback+0x1dc>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b63      	cmp	r3, #99	; 0x63
 8002bee:	d913      	bls.n	8002c18 <SysTick_Callback+0x6c>
	{
		Count100mSecond = 0;
 8002bf0:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <SysTick_Callback+0x1dc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]

		if (Module16( Battery.Current) > 0  || OverChargeStatus == 1 )
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <SysTick_Callback+0x1e0>)
 8002bf8:	885b      	ldrh	r3, [r3, #2]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fdeb 	bl	80017d8 <Module16>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	dc04      	bgt.n	8002c12 <SysTick_Callback+0x66>
 8002c08:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <SysTick_Callback+0x1e4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <SysTick_Callback+0x6c>
			PowerOffTimesec = 0;
 8002c12:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <SysTick_Callback+0x1e8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
	}
	//1000mc  1c
	if (Count1000mSecond >= 1000)
 8002c18:	4b5f      	ldr	r3, [pc, #380]	; (8002d98 <SysTick_Callback+0x1ec>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c22:	f0c0 808c 	bcc.w	8002d3e <SysTick_Callback+0x192>
	{
		Count1000mSecond = 0;
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <SysTick_Callback+0x1ec>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	801a      	strh	r2, [r3, #0]

		OffByTimeOutIfNoAction_handler();
 8002c2c:	f7ff feec 	bl	8002a08 <OffByTimeOutIfNoAction_handler>
		PowerOffTimesec++;
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <SysTick_Callback+0x1e8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <SysTick_Callback+0x1e8>)
 8002c38:	6013      	str	r3, [r2, #0]

		if (time_sec < 4)
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <SysTick_Callback+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d802      	bhi.n	8002c48 <SysTick_Callback+0x9c>
			AllBalansirON();
 8002c42:	f7ff fcd1 	bl	80025e8 <AllBalansirON>
 8002c46:	e001      	b.n	8002c4c <SysTick_Callback+0xa0>
		else
			Balansir_handler();
 8002c48:	f7ff fcf6 	bl	8002638 <Balansir_handler>

		MinVoltage_handler();
 8002c4c:	f7ff fe04 	bl	8002858 <MinVoltage_handler>

		if (Current < 2)
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <SysTick_Callback+0x1f4>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	dc0c      	bgt.n	8002c74 <SysTick_Callback+0xc8>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 8002c5a:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <SysTick_Callback+0x1f4>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fdb9 	bl	80017d8 <Module16>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <SysTick_Callback+0x1f8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <SysTick_Callback+0x1f8>)
 8002c72:	6013      	str	r3, [r2, #0]
		if (Current > 2)
 8002c74:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <SysTick_Callback+0x1f4>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	dd0c      	ble.n	8002c98 <SysTick_Callback+0xec>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8002c7e:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <SysTick_Callback+0x1f4>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fda7 	bl	80017d8 <Module16>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <SysTick_Callback+0x1fc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a44      	ldr	r2, [pc, #272]	; (8002da8 <SysTick_Callback+0x1fc>)
 8002c96:	6013      	str	r3, [r2, #0]
		if (ChargeStatusForTimer == 1)
 8002c98:	4b44      	ldr	r3, [pc, #272]	; (8002dac <SysTick_Callback+0x200>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d104      	bne.n	8002cac <SysTick_Callback+0x100>
			ChargeTimeSec++;
 8002ca2:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <SysTick_Callback+0x204>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <SysTick_Callback+0x204>)
 8002caa:	6013      	str	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 8002cac:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <SysTick_Callback+0x208>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d104      	bne.n	8002cc0 <SysTick_Callback+0x114>
			DischargeTimeSec++;
 8002cb6:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <SysTick_Callback+0x20c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <SysTick_Callback+0x20c>)
 8002cbe:	6013      	str	r3, [r2, #0]
		//Global timer
		if (Status_Timer_Sec == 1)
 8002cc0:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <SysTick_Callback+0x210>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d104      	bne.n	8002cd4 <SysTick_Callback+0x128>
			Timer_Sec++;
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <SysTick_Callback+0x214>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <SysTick_Callback+0x214>)
 8002cd2:	6013      	str	r3, [r2, #0]
		time_sec++;
 8002cd4:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <SysTick_Callback+0x1f0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a30      	ldr	r2, [pc, #192]	; (8002d9c <SysTick_Callback+0x1f0>)
 8002cdc:	6013      	str	r3, [r2, #0]

		//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS4;// Battery level
		//else GPIOB->BSRR =  GPIO_BSRR_BR4;

		if (Battery.BatteryLevel == LOW_BATTERY)
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <SysTick_Callback+0x1e0>)
 8002ce0:	7a1b      	ldrb	r3, [r3, #8]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d103      	bne.n	8002cf0 <SysTick_Callback+0x144>
		{
			//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS6;//Fault
			//else GPIOB->BSRR =  GPIO_BSRR_BR6;

			GPIOD->BSRR =  GPIO_BSRR_BS2;//Fault
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <SysTick_Callback+0x218>)
 8002cea:	2204      	movs	r2, #4
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e003      	b.n	8002cf8 <SysTick_Callback+0x14c>
		}
		else
		{
			GPIOD->BSRR =  GPIO_BSRR_BR2;
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <SysTick_Callback+0x218>)
 8002cf2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cf6:	611a      	str	r2, [r3, #16]
		}

		if (OverChargeStatus == 1)
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <SysTick_Callback+0x1e4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d103      	bne.n	8002d0a <SysTick_Callback+0x15e>
		{
			GPIOD->BSRR =  GPIO_BSRR_BS2;//Fault
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <SysTick_Callback+0x218>)
 8002d04:	2204      	movs	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
 8002d08:	e003      	b.n	8002d12 <SysTick_Callback+0x166>
		}else
		{
			GPIOD->BSRR =  GPIO_BSRR_BR2;
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <SysTick_Callback+0x218>)
 8002d0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d10:	611a      	str	r2, [r3, #16]


		//if (time_sec%10==0) Output_ON();
		//if (time_sec%15==0) Output_OFF();

		if (Battery.Current>2)
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <SysTick_Callback+0x1e0>)
 8002d14:	885b      	ldrh	r3, [r3, #2]
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	dd08      	ble.n	8002d2e <SysTick_Callback+0x182>
		{
			Voltage95Percent = VOLTAGE_CHARGE_100_PERCENT;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <SysTick_Callback+0x21c>)
 8002d1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002d22:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_CHARGE_10_PERCENT;
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <SysTick_Callback+0x220>)
 8002d26:	f240 1245 	movw	r2, #325	; 0x145
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e007      	b.n	8002d3e <SysTick_Callback+0x192>
		}
		else
		{
			Voltage95Percent = VOLTAGE_95_PERCENT;
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <SysTick_Callback+0x21c>)
 8002d30:	f240 124f 	movw	r2, #335	; 0x14f
 8002d34:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_10_PERCENT;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <SysTick_Callback+0x220>)
 8002d38:	f240 121d 	movw	r2, #285	; 0x11d
 8002d3c:	801a      	strh	r2, [r3, #0]
		}
	}
	Count5mSecond++;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <SysTick_Callback+0x1d4>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <SysTick_Callback+0x1d4>)
 8002d4a:	801a      	strh	r2, [r3, #0]
	Count10mSecond++;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <SysTick_Callback+0x1d8>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <SysTick_Callback+0x1d8>)
 8002d58:	801a      	strh	r2, [r3, #0]
	Count100mSecond++;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <SysTick_Callback+0x1dc>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <SysTick_Callback+0x1dc>)
 8002d66:	801a      	strh	r2, [r3, #0]
	Count1000mSecond++;
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <SysTick_Callback+0x1ec>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <SysTick_Callback+0x1ec>)
 8002d74:	801a      	strh	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000b84 	.word	0x20000b84
 8002d80:	20000260 	.word	0x20000260
 8002d84:	2000025e 	.word	0x2000025e
 8002d88:	2000025c 	.word	0x2000025c
 8002d8c:	20000d30 	.word	0x20000d30
 8002d90:	20000b20 	.word	0x20000b20
 8002d94:	20000b94 	.word	0x20000b94
 8002d98:	20000262 	.word	0x20000262
 8002d9c:	20000b7c 	.word	0x20000b7c
 8002da0:	20000c4c 	.word	0x20000c4c
 8002da4:	20000b98 	.word	0x20000b98
 8002da8:	20000ba0 	.word	0x20000ba0
 8002dac:	20000be0 	.word	0x20000be0
 8002db0:	20000b8c 	.word	0x20000b8c
 8002db4:	20000be1 	.word	0x20000be1
 8002db8:	20000b90 	.word	0x20000b90
 8002dbc:	20000b88 	.word	0x20000b88
 8002dc0:	20000b80 	.word	0x20000b80
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	20000fcc 	.word	0x20000fcc
 8002dcc:	20000f54 	.word	0x20000f54

08002dd0 <adc_func>:


void adc_func()
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
	//6  [6] I
	//5  [5] I
//	Vref [15]


	volatile int32_t Ut = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
	volatile int32_t It = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
	volatile int32_t Ut_m = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
	volatile int32_t It_m = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[15];// Uref V/10;  1200 * 4096/ChVref
 8002de6:	4b93      	ldr	r3, [pc, #588]	; (8003034 <adc_func+0x264>)
 8002de8:	8bdb      	ldrh	r3, [r3, #30]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 8002df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b8f      	ldr	r3, [pc, #572]	; (8003038 <adc_func+0x268>)
 8002dfa:	801a      	strh	r2, [r3, #0]

	It = (RegularConvData[6] * CalibrationData.CalibrationValueForCurrent1) / RegularConvData[15] ;//  Current
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	; (8003034 <adc_func+0x264>)
 8002dfe:	899b      	ldrh	r3, [r3, #12]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b8d      	ldr	r3, [pc, #564]	; (800303c <adc_func+0x26c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	4a89      	ldr	r2, [pc, #548]	; (8003034 <adc_func+0x264>)
 8002e0e:	8bd2      	ldrh	r2, [r2, #30]
 8002e10:	b292      	uxth	r2, r2
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
	It_m = It;//middle_of_3Imax1(It);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	607b      	str	r3, [r7, #4]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fd14 	bl	800184c <RunningAverageI1>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b86      	ldr	r3, [pc, #536]	; (8003040 <adc_func+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a84      	ldr	r2, [pc, #528]	; (8003040 <adc_func+0x270>)
 8002e2e:	6013      	str	r3, [r2, #0]
	SumI1Counter ++;
 8002e30:	4b84      	ldr	r3, [pc, #528]	; (8003044 <adc_func+0x274>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	4b81      	ldr	r3, [pc, #516]	; (8003044 <adc_func+0x274>)
 8002e40:	801a      	strh	r2, [r3, #0]
	if (SumI1Counter >= NUM_READ)
 8002e42:	4b80      	ldr	r3, [pc, #512]	; (8003044 <adc_func+0x274>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	2b1f      	cmp	r3, #31
 8002e4a:	dd0e      	ble.n	8002e6a <adc_func+0x9a>
	{
		Battery.Current_Load = SumI1/NUM_READ;
 8002e4c:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <adc_func+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da00      	bge.n	8002e56 <adc_func+0x86>
 8002e54:	331f      	adds	r3, #31
 8002e56:	115b      	asrs	r3, r3, #5
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <adc_func+0x278>)
 8002e5c:	80da      	strh	r2, [r3, #6]
		SumI1Counter = 0;
 8002e5e:	4b79      	ldr	r3, [pc, #484]	; (8003044 <adc_func+0x274>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
		SumI1 = 0;
 8002e64:	4b76      	ldr	r3, [pc, #472]	; (8003040 <adc_func+0x270>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
	}

	It= (RegularConvData[5] * CalibrationData.CalibrationValueForCurrent2) / RegularConvData[15] ;//  Current
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <adc_func+0x264>)
 8002e6c:	895b      	ldrh	r3, [r3, #10]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <adc_func+0x26c>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <adc_func+0x264>)
 8002e7c:	8bd2      	ldrh	r2, [r2, #30]
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
	It_m =It;// middle_of_3Imax2(It);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	607b      	str	r3, [r7, #4]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fd07 	bl	80018a0 <RunningAverageI2>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b6d      	ldr	r3, [pc, #436]	; (800304c <adc_func+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a6c      	ldr	r2, [pc, #432]	; (800304c <adc_func+0x27c>)
 8002e9c:	6013      	str	r3, [r2, #0]
	SumI2Counter ++;
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <adc_func+0x280>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b21a      	sxth	r2, r3
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <adc_func+0x280>)
 8002eae:	801a      	strh	r2, [r3, #0]
	if (SumI2Counter >= NUM_READ)
 8002eb0:	4b67      	ldr	r3, [pc, #412]	; (8003050 <adc_func+0x280>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	2b1f      	cmp	r3, #31
 8002eb8:	dd0e      	ble.n	8002ed8 <adc_func+0x108>
	{
		Battery.Current_Charge = SumI2/NUM_READ;
 8002eba:	4b64      	ldr	r3, [pc, #400]	; (800304c <adc_func+0x27c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da00      	bge.n	8002ec4 <adc_func+0xf4>
 8002ec2:	331f      	adds	r3, #31
 8002ec4:	115b      	asrs	r3, r3, #5
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <adc_func+0x278>)
 8002eca:	809a      	strh	r2, [r3, #4]
		SumI2Counter = 0;
 8002ecc:	4b60      	ldr	r3, [pc, #384]	; (8003050 <adc_func+0x280>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	801a      	strh	r2, [r3, #0]
		SumI2 = 0;
 8002ed2:	4b5e      	ldr	r3, [pc, #376]	; (800304c <adc_func+0x27c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
	}

	Ut= (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[15];
 8002ed8:	4b56      	ldr	r3, [pc, #344]	; (8003034 <adc_func+0x264>)
 8002eda:	891b      	ldrh	r3, [r3, #8]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b56      	ldr	r3, [pc, #344]	; (800303c <adc_func+0x26c>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	4a52      	ldr	r2, [pc, #328]	; (8003034 <adc_func+0x264>)
 8002eea:	8bd2      	ldrh	r2, [r2, #30]
 8002eec:	b292      	uxth	r2, r2
 8002eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax1(Ut);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	60bb      	str	r3, [r7, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fcfa 	bl	80018f4 <RunningAverageU1>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <adc_func+0x284>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <adc_func+0x284>)
 8002f0a:	6013      	str	r3, [r2, #0]
	SumU1Counter ++;
 8002f0c:	4b52      	ldr	r3, [pc, #328]	; (8003058 <adc_func+0x288>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <adc_func+0x288>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	if (SumU1Counter >= NUM_READ)
 8002f1e:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <adc_func+0x288>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	2b1f      	cmp	r3, #31
 8002f26:	dd0e      	ble.n	8002f46 <adc_func+0x176>
	{
		CellsDatabase[0].Voltage = SumU1/NUM_READ;
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <adc_func+0x284>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da00      	bge.n	8002f32 <adc_func+0x162>
 8002f30:	331f      	adds	r3, #31
 8002f32:	115b      	asrs	r3, r3, #5
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <adc_func+0x28c>)
 8002f38:	801a      	strh	r2, [r3, #0]
		SumU1Counter = 0;
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <adc_func+0x288>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	801a      	strh	r2, [r3, #0]
		SumU1 = 0;
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <adc_func+0x284>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[15];
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <adc_func+0x264>)
 8002f48:	88db      	ldrh	r3, [r3, #6]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <adc_func+0x26c>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	4a37      	ldr	r2, [pc, #220]	; (8003034 <adc_func+0x264>)
 8002f58:	8bd2      	ldrh	r2, [r2, #30]
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax2(Ut);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	60bb      	str	r3, [r7, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fced 	bl	8001948 <RunningAverageU2>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <adc_func+0x290>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <adc_func+0x290>)
 8002f78:	6013      	str	r3, [r2, #0]
	SumU2Counter ++;
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <adc_func+0x294>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <adc_func+0x294>)
 8002f8a:	801a      	strh	r2, [r3, #0]
	if (SumU2Counter >= NUM_READ)
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <adc_func+0x294>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	2b1f      	cmp	r3, #31
 8002f94:	dd0e      	ble.n	8002fb4 <adc_func+0x1e4>
	{
		CellsDatabase[1].Voltage = SumU2/NUM_READ;
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <adc_func+0x290>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da00      	bge.n	8002fa0 <adc_func+0x1d0>
 8002f9e:	331f      	adds	r3, #31
 8002fa0:	115b      	asrs	r3, r3, #5
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	; (800305c <adc_func+0x28c>)
 8002fa6:	839a      	strh	r2, [r3, #28]
		SumU2Counter = 0;
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <adc_func+0x294>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	801a      	strh	r2, [r3, #0]
		SumU2 = 0;
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <adc_func+0x290>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
	}


	Ut = (RegularConvData[1] * CalibrationData.CalibrationValueForVoltage3) / RegularConvData[15];//
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <adc_func+0x264>)
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <adc_func+0x26c>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <adc_func+0x264>)
 8002fc6:	8bd2      	ldrh	r2, [r2, #30]
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax3(Ut);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	60bb      	str	r3, [r7, #8]
	SumU3 =SumU3 + RunningAverageU3(Ut_m);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fce0 	bl	800199c <RunningAverageU3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <adc_func+0x298>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <adc_func+0x298>)
 8002fe6:	6013      	str	r3, [r2, #0]
	SumU3Counter ++;
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <adc_func+0x29c>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	b21a      	sxth	r2, r3
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <adc_func+0x29c>)
 8002ff8:	801a      	strh	r2, [r3, #0]
	if (SumU3Counter >=NUM_READ)
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <adc_func+0x29c>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	2b1f      	cmp	r3, #31
 8003002:	dd0e      	ble.n	8003022 <adc_func+0x252>
	{
		CellsDatabase[2].Voltage = SumU3/NUM_READ;
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <adc_func+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da00      	bge.n	800300e <adc_func+0x23e>
 800300c:	331f      	adds	r3, #31
 800300e:	115b      	asrs	r3, r3, #5
 8003010:	b29a      	uxth	r2, r3
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <adc_func+0x28c>)
 8003014:	871a      	strh	r2, [r3, #56]	; 0x38
		SumU3Counter = 0;
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <adc_func+0x29c>)
 8003018:	2200      	movs	r2, #0
 800301a:	801a      	strh	r2, [r3, #0]
		SumU3 = 0;
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <adc_func+0x298>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[0] * CalibrationData.CalibrationValueForVoltage4) / RegularConvData[15];
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <adc_func+0x264>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <adc_func+0x26c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	e01d      	b.n	8003070 <adc_func+0x2a0>
 8003034:	20000d48 	.word	0x20000d48
 8003038:	20000d68 	.word	0x20000d68
 800303c:	20000004 	.word	0x20000004
 8003040:	20000ba4 	.word	0x20000ba4
 8003044:	20000bcc 	.word	0x20000bcc
 8003048:	20000d30 	.word	0x20000d30
 800304c:	20000ba8 	.word	0x20000ba8
 8003050:	20000bce 	.word	0x20000bce
 8003054:	20000bac 	.word	0x20000bac
 8003058:	20000bd0 	.word	0x20000bd0
 800305c:	20000c50 	.word	0x20000c50
 8003060:	20000bb0 	.word	0x20000bb0
 8003064:	20000bd2 	.word	0x20000bd2
 8003068:	20000bb4 	.word	0x20000bb4
 800306c:	20000bd4 	.word	0x20000bd4
 8003070:	4a8b      	ldr	r2, [pc, #556]	; (80032a0 <adc_func+0x4d0>)
 8003072:	8bd2      	ldrh	r2, [r2, #30]
 8003074:	b292      	uxth	r2, r2
 8003076:	fbb3 f3f2 	udiv	r3, r3, r2
 800307a:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	60bb      	str	r3, [r7, #8]
	SumU4 =SumU4 + RunningAverageU4(Ut_m);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fcb4 	bl	80019f0 <RunningAverageU4>
 8003088:	4602      	mov	r2, r0
 800308a:	4b86      	ldr	r3, [pc, #536]	; (80032a4 <adc_func+0x4d4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a84      	ldr	r2, [pc, #528]	; (80032a4 <adc_func+0x4d4>)
 8003092:	6013      	str	r3, [r2, #0]
	SumU4Counter ++;
 8003094:	4b84      	ldr	r3, [pc, #528]	; (80032a8 <adc_func+0x4d8>)
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b21b      	sxth	r3, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <adc_func+0x4d8>)
 80030a4:	801a      	strh	r2, [r3, #0]
	if (SumU4Counter >=NUM_READ)
 80030a6:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <adc_func+0x4d8>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	2b1f      	cmp	r3, #31
 80030ae:	dd0f      	ble.n	80030d0 <adc_func+0x300>
	{
		CellsDatabase[3].Voltage = SumU4/NUM_READ;
 80030b0:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <adc_func+0x4d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da00      	bge.n	80030ba <adc_func+0x2ea>
 80030b8:	331f      	adds	r3, #31
 80030ba:	115b      	asrs	r3, r3, #5
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <adc_func+0x4dc>)
 80030c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		SumU4Counter = 0;
 80030c4:	4b78      	ldr	r3, [pc, #480]	; (80032a8 <adc_func+0x4d8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
		SumU4 = 0;
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <adc_func+0x4d4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[13] * CalibrationData.CalibrationValueForVoltage5) / RegularConvData[15];
 80030d0:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <adc_func+0x4d0>)
 80030d2:	8b5b      	ldrh	r3, [r3, #26]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b75      	ldr	r3, [pc, #468]	; (80032b0 <adc_func+0x4e0>)
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <adc_func+0x4d0>)
 80030e2:	8bd2      	ldrh	r2, [r2, #30]
 80030e4:	b292      	uxth	r2, r2
 80030e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	60bb      	str	r3, [r7, #8]
	SumU5 =SumU5 + RunningAverageU5(Ut_m);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fca6 	bl	8001a44 <RunningAverageU5>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <adc_func+0x4e4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <adc_func+0x4e4>)
 8003102:	6013      	str	r3, [r2, #0]
	SumU5Counter ++;
 8003104:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <adc_func+0x4e8>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b21b      	sxth	r3, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	b21a      	sxth	r2, r3
 8003112:	4b69      	ldr	r3, [pc, #420]	; (80032b8 <adc_func+0x4e8>)
 8003114:	801a      	strh	r2, [r3, #0]
	if (SumU5Counter >=NUM_READ)
 8003116:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <adc_func+0x4e8>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b21b      	sxth	r3, r3
 800311c:	2b1f      	cmp	r3, #31
 800311e:	dd0f      	ble.n	8003140 <adc_func+0x370>
	{
		CellsDatabase[4].Voltage = SumU5/NUM_READ;
 8003120:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <adc_func+0x4e4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	da00      	bge.n	800312a <adc_func+0x35a>
 8003128:	331f      	adds	r3, #31
 800312a:	115b      	asrs	r3, r3, #5
 800312c:	b29a      	uxth	r2, r3
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <adc_func+0x4dc>)
 8003130:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		SumU5Counter = 0;
 8003134:	4b60      	ldr	r3, [pc, #384]	; (80032b8 <adc_func+0x4e8>)
 8003136:	2200      	movs	r2, #0
 8003138:	801a      	strh	r2, [r3, #0]
		SumU5 = 0;
 800313a:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <adc_func+0x4e4>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[12] * CalibrationData.CalibrationValueForVoltage6) / RegularConvData[15];//
 8003140:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <adc_func+0x4d0>)
 8003142:	8b1b      	ldrh	r3, [r3, #24]
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <adc_func+0x4e0>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	4a53      	ldr	r2, [pc, #332]	; (80032a0 <adc_func+0x4d0>)
 8003152:	8bd2      	ldrh	r2, [r2, #30]
 8003154:	b292      	uxth	r2, r2
 8003156:	fbb3 f3f2 	udiv	r3, r3, r2
 800315a:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	60bb      	str	r3, [r7, #8]
	SumU6 =SumU6 + RunningAverageU6(Ut_m);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fc98 	bl	8001a98 <RunningAverageU6>
 8003168:	4602      	mov	r2, r0
 800316a:	4b54      	ldr	r3, [pc, #336]	; (80032bc <adc_func+0x4ec>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a52      	ldr	r2, [pc, #328]	; (80032bc <adc_func+0x4ec>)
 8003172:	6013      	str	r3, [r2, #0]
	SumU6Counter ++;
 8003174:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <adc_func+0x4f0>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b21b      	sxth	r3, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	b21a      	sxth	r2, r3
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <adc_func+0x4f0>)
 8003184:	801a      	strh	r2, [r3, #0]
	if (SumU6Counter >=NUM_READ)
 8003186:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <adc_func+0x4f0>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b21b      	sxth	r3, r3
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd0f      	ble.n	80031b0 <adc_func+0x3e0>
	{
		CellsDatabase[5].Voltage = SumU6/NUM_READ;
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <adc_func+0x4ec>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da00      	bge.n	800319a <adc_func+0x3ca>
 8003198:	331f      	adds	r3, #31
 800319a:	115b      	asrs	r3, r3, #5
 800319c:	b29a      	uxth	r2, r3
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <adc_func+0x4dc>)
 80031a0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		SumU6Counter = 0;
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <adc_func+0x4f0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	801a      	strh	r2, [r3, #0]
		SumU6 = 0;
 80031aa:	4b44      	ldr	r3, [pc, #272]	; (80032bc <adc_func+0x4ec>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[11] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <adc_func+0x4d0>)
 80031b2:	8adb      	ldrh	r3, [r3, #22]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <adc_func+0x4e0>)
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <adc_func+0x4d0>)
 80031c2:	8bd2      	ldrh	r2, [r2, #30]
 80031c4:	b292      	uxth	r2, r2
 80031c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	60bb      	str	r3, [r7, #8]
	SumU7 =SumU7 + RunningAverageU7(Ut_m);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fc8a 	bl	8001aec <RunningAverageU7>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <adc_func+0x4f4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <adc_func+0x4f4>)
 80031e2:	6013      	str	r3, [r2, #0]
	SumU7Counter ++;
 80031e4:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <adc_func+0x4f8>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <adc_func+0x4f8>)
 80031f4:	801a      	strh	r2, [r3, #0]
	if (SumU7Counter >=NUM_READ)
 80031f6:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <adc_func+0x4f8>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	2b1f      	cmp	r3, #31
 80031fe:	dd0f      	ble.n	8003220 <adc_func+0x450>
	{
		CellsDatabase[6].Voltage = SumU7/NUM_READ;
 8003200:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <adc_func+0x4f4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da00      	bge.n	800320a <adc_func+0x43a>
 8003208:	331f      	adds	r3, #31
 800320a:	115b      	asrs	r3, r3, #5
 800320c:	b29a      	uxth	r2, r3
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <adc_func+0x4dc>)
 8003210:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		SumU7Counter = 0;
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <adc_func+0x4f8>)
 8003216:	2200      	movs	r2, #0
 8003218:	801a      	strh	r2, [r3, #0]
		SumU7 = 0;
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <adc_func+0x4f4>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[10] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <adc_func+0x4d0>)
 8003222:	8a9b      	ldrh	r3, [r3, #20]
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <adc_func+0x4e0>)
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <adc_func+0x4d0>)
 8003232:	8bd2      	ldrh	r2, [r2, #30]
 8003234:	b292      	uxth	r2, r2
 8003236:	fbb3 f3f2 	udiv	r3, r3, r2
 800323a:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	60bb      	str	r3, [r7, #8]
	SumU8 =SumU8 + RunningAverageU8(Ut_m);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fc7c 	bl	8001b40 <RunningAverageU8>
 8003248:	4602      	mov	r2, r0
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <adc_func+0x4fc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4413      	add	r3, r2
 8003250:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <adc_func+0x4fc>)
 8003252:	6013      	str	r3, [r2, #0]
	SumU8Counter ++;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <adc_func+0x500>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b21b      	sxth	r3, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	b21a      	sxth	r2, r3
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <adc_func+0x500>)
 8003264:	801a      	strh	r2, [r3, #0]
	if (SumU8Counter >=NUM_READ)
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <adc_func+0x500>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b21b      	sxth	r3, r3
 800326c:	2b1f      	cmp	r3, #31
 800326e:	dd0f      	ble.n	8003290 <adc_func+0x4c0>
	{
		CellsDatabase[7].Voltage = SumU8/NUM_READ;
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <adc_func+0x4fc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da00      	bge.n	800327a <adc_func+0x4aa>
 8003278:	331f      	adds	r3, #31
 800327a:	115b      	asrs	r3, r3, #5
 800327c:	b29a      	uxth	r2, r3
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <adc_func+0x4dc>)
 8003280:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		SumU8Counter = 0;
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <adc_func+0x500>)
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
		SumU8 = 0;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <adc_func+0x4fc>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
	}



	uint8_t i = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]
	uint16_t Volt = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
 800329c:	e028      	b.n	80032f0 <adc_func+0x520>
 800329e:	bf00      	nop
 80032a0:	20000d48 	.word	0x20000d48
 80032a4:	20000bb8 	.word	0x20000bb8
 80032a8:	20000bd6 	.word	0x20000bd6
 80032ac:	20000c50 	.word	0x20000c50
 80032b0:	20000004 	.word	0x20000004
 80032b4:	20000bbc 	.word	0x20000bbc
 80032b8:	20000bd8 	.word	0x20000bd8
 80032bc:	20000bc0 	.word	0x20000bc0
 80032c0:	20000bda 	.word	0x20000bda
 80032c4:	20000bc4 	.word	0x20000bc4
 80032c8:	20000bdc 	.word	0x20000bdc
 80032cc:	20000bc8 	.word	0x20000bc8
 80032d0:	20000bde 	.word	0x20000bde
	{
		Volt = Volt + CellsDatabase[i].Voltage;
 80032d4:	7dfa      	ldrb	r2, [r7, #23]
 80032d6:	4930      	ldr	r1, [pc, #192]	; (8003398 <adc_func+0x5c8>)
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	881a      	ldrh	r2, [r3, #0]
 80032e4:	8abb      	ldrh	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	3301      	adds	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d9ee      	bls.n	80032d4 <adc_func+0x504>
	}
	Battery.Voltage = Volt;
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <adc_func+0x5cc>)
 80032f8:	8abb      	ldrh	r3, [r7, #20]
 80032fa:	8013      	strh	r3, [r2, #0]
	Battery.Current = 0;
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <adc_func+0x5cc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Charge > 2) Battery.Current = Battery.Current_Charge;
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <adc_func+0x5cc>)
 8003304:	889b      	ldrh	r3, [r3, #4]
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d905      	bls.n	8003318 <adc_func+0x548>
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <adc_func+0x5cc>)
 800330e:	889b      	ldrh	r3, [r3, #4]
 8003310:	b29b      	uxth	r3, r3
 8003312:	b21a      	sxth	r2, r3
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <adc_func+0x5cc>)
 8003316:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Load > 2) Battery.Current = Battery.Current_Load * (-1);
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <adc_func+0x5cc>)
 800331a:	88db      	ldrh	r3, [r3, #6]
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d907      	bls.n	8003332 <adc_func+0x562>
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <adc_func+0x5cc>)
 8003324:	88db      	ldrh	r3, [r3, #6]
 8003326:	b29b      	uxth	r3, r3
 8003328:	425b      	negs	r3, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	b21a      	sxth	r2, r3
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <adc_func+0x5cc>)
 8003330:	805a      	strh	r2, [r3, #2]

	Battery.BalansirTemperature = RegularConvData[2];
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <adc_func+0x5d0>)
 8003334:	889b      	ldrh	r3, [r3, #4]
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <adc_func+0x5cc>)
 800333a:	819a      	strh	r2, [r3, #12]
	Battery.MosfetsTemperature = RegularConvData[14];
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <adc_func+0x5d0>)
 800333e:	8b9b      	ldrh	r3, [r3, #28]
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <adc_func+0x5cc>)
 8003344:	815a      	strh	r2, [r3, #10]
	Battery.BatteryTemperature = RegularConvData[8];
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <adc_func+0x5d0>)
 8003348:	8a1b      	ldrh	r3, [r3, #16]
 800334a:	b29a      	uxth	r2, r3
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <adc_func+0x5cc>)
 800334e:	81da      	strh	r2, [r3, #14]

	Battery.Gate1Voltage_NearShunt = 1400 * RegularConvData[7]/RegularConvData[15];
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <adc_func+0x5d0>)
 8003352:	89db      	ldrh	r3, [r3, #14]
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <adc_func+0x5d0>)
 8003362:	8bd2      	ldrh	r2, [r2, #30]
 8003364:	b292      	uxth	r2, r2
 8003366:	fb93 f3f2 	sdiv	r3, r3, r2
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <adc_func+0x5cc>)
 800336e:	825a      	strh	r2, [r3, #18]
	Battery.Gate2Voltage_NearOUT = 1400 * RegularConvData[9]/RegularConvData[15];
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <adc_func+0x5d0>)
 8003372:	8a5b      	ldrh	r3, [r3, #18]
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <adc_func+0x5d0>)
 8003382:	8bd2      	ldrh	r2, [r2, #30]
 8003384:	b292      	uxth	r2, r2
 8003386:	fb93 f3f2 	sdiv	r3, r3, r2
 800338a:	b29a      	uxth	r2, r3
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <adc_func+0x5cc>)
 800338e:	829a      	strh	r2, [r3, #20]

	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000c50 	.word	0x20000c50
 800339c:	20000d30 	.word	0x20000d30
 80033a0:	20000d48 	.word	0x20000d48

080033a4 <MainScreenAnswer>:
};
struct RequestFromClientToSrv_struct RequestFromClientToSrv;
struct AnswerFromSrvToClient_struct  AnswerFromSrvToClient;

void MainScreenAnswer()
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
	uint16_t var_16=0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	80fb      	strh	r3, [r7, #6]
	uint8_t *arrayPointer_16 = (uint8_t*) &var_16;
 80033ae:	1dbb      	adds	r3, r7, #6
 80033b0:	60fb      	str	r3, [r7, #12]

	uint16_t var_u16=0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	80bb      	strh	r3, [r7, #4]
	uint8_t *arrayPointer_u16 = (uint8_t*) &var_u16;
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	60bb      	str	r3, [r7, #8]
	arrayPointer_u16 = (uint8_t*) &Battery.Voltage;
 80033ba:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <MainScreenAnswer+0x154>)
 80033bc:	60bb      	str	r3, [r7, #8]
	Master.Package[4]=arrayPointer_u16[0];
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <MainScreenAnswer+0x158>)
 80033c4:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=arrayPointer_u16[1];
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785a      	ldrb	r2, [r3, #1]
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <MainScreenAnswer+0x158>)
 80033cc:	715a      	strb	r2, [r3, #5]

	arrayPointer_16 = (uint8_t*) &Battery.Current;
 80033ce:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <MainScreenAnswer+0x15c>)
 80033d0:	60fb      	str	r3, [r7, #12]
	Master.Package[6]=arrayPointer_16[0];
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	4b49      	ldr	r3, [pc, #292]	; (80034fc <MainScreenAnswer+0x158>)
 80033d8:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=arrayPointer_16[1];
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	785a      	ldrb	r2, [r3, #1]
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <MainScreenAnswer+0x158>)
 80033e0:	71da      	strb	r2, [r3, #7]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[0].Voltage;
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <MainScreenAnswer+0x160>)
 80033e4:	60bb      	str	r3, [r7, #8]
	Master.Package[8]=arrayPointer_u16[0];
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <MainScreenAnswer+0x158>)
 80033ec:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=arrayPointer_u16[1];
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	785a      	ldrb	r2, [r3, #1]
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <MainScreenAnswer+0x158>)
 80033f4:	725a      	strb	r2, [r3, #9]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[1].Voltage;
 80033f6:	4b44      	ldr	r3, [pc, #272]	; (8003508 <MainScreenAnswer+0x164>)
 80033f8:	60bb      	str	r3, [r7, #8]
	Master.Package[10]=arrayPointer_u16[0];
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <MainScreenAnswer+0x158>)
 8003400:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=arrayPointer_u16[1];
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	785a      	ldrb	r2, [r3, #1]
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <MainScreenAnswer+0x158>)
 8003408:	72da      	strb	r2, [r3, #11]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[2].Voltage;
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <MainScreenAnswer+0x168>)
 800340c:	60bb      	str	r3, [r7, #8]
	Master.Package[12]=arrayPointer_u16[0];
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <MainScreenAnswer+0x158>)
 8003414:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=arrayPointer_u16[1];
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	785a      	ldrb	r2, [r3, #1]
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <MainScreenAnswer+0x158>)
 800341c:	735a      	strb	r2, [r3, #13]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[3].Voltage;
 800341e:	4b3c      	ldr	r3, [pc, #240]	; (8003510 <MainScreenAnswer+0x16c>)
 8003420:	60bb      	str	r3, [r7, #8]
	Master.Package[14]=arrayPointer_u16[0];
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <MainScreenAnswer+0x158>)
 8003428:	739a      	strb	r2, [r3, #14]
	Master.Package[15]=arrayPointer_u16[1];
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785a      	ldrb	r2, [r3, #1]
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <MainScreenAnswer+0x158>)
 8003430:	73da      	strb	r2, [r3, #15]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
	}

	if (NUMBER_OF_CELLS == 8)
	{
		arrayPointer_u16 = (uint8_t*) &CellsDatabase[4].Voltage;
 8003432:	4b38      	ldr	r3, [pc, #224]	; (8003514 <MainScreenAnswer+0x170>)
 8003434:	60bb      	str	r3, [r7, #8]
		Master.Package[16]=arrayPointer_u16[0];
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b30      	ldr	r3, [pc, #192]	; (80034fc <MainScreenAnswer+0x158>)
 800343c:	741a      	strb	r2, [r3, #16]
		Master.Package[17]=arrayPointer_u16[1];
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785a      	ldrb	r2, [r3, #1]
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <MainScreenAnswer+0x158>)
 8003444:	745a      	strb	r2, [r3, #17]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[5].Voltage;
 8003446:	4b34      	ldr	r3, [pc, #208]	; (8003518 <MainScreenAnswer+0x174>)
 8003448:	60bb      	str	r3, [r7, #8]
		Master.Package[18]=arrayPointer_u16[0];
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <MainScreenAnswer+0x158>)
 8003450:	749a      	strb	r2, [r3, #18]
		Master.Package[19]=arrayPointer_u16[1];
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	785a      	ldrb	r2, [r3, #1]
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <MainScreenAnswer+0x158>)
 8003458:	74da      	strb	r2, [r3, #19]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[6].Voltage;
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <MainScreenAnswer+0x178>)
 800345c:	60bb      	str	r3, [r7, #8]
		Master.Package[20]=arrayPointer_u16[0];
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <MainScreenAnswer+0x158>)
 8003464:	751a      	strb	r2, [r3, #20]
		Master.Package[21]=arrayPointer_u16[1];
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785a      	ldrb	r2, [r3, #1]
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <MainScreenAnswer+0x158>)
 800346c:	755a      	strb	r2, [r3, #21]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[7].Voltage;
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <MainScreenAnswer+0x17c>)
 8003470:	60bb      	str	r3, [r7, #8]
		Master.Package[22]=arrayPointer_u16[0];
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <MainScreenAnswer+0x158>)
 8003478:	759a      	strb	r2, [r3, #22]
		Master.Package[23]=arrayPointer_u16[1];
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785a      	ldrb	r2, [r3, #1]
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <MainScreenAnswer+0x158>)
 8003480:	75da      	strb	r2, [r3, #23]

		Master.Package[24]=95;
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <MainScreenAnswer+0x158>)
 8003484:	225f      	movs	r2, #95	; 0x5f
 8003486:	761a      	strb	r2, [r3, #24]
		Master.Package[25]=Battery.Power;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MainScreenAnswer+0x154>)
 800348a:	7c1b      	ldrb	r3, [r3, #16]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <MainScreenAnswer+0x158>)
 8003490:	765a      	strb	r2, [r3, #25]
		Master.Data_length = 27-1;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <MainScreenAnswer+0x158>)
 8003494:	221a      	movs	r2, #26
 8003496:	779a      	strb	r2, [r3, #30]

		Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8003498:	4b18      	ldr	r3, [pc, #96]	; (80034fc <MainScreenAnswer+0x158>)
 800349a:	7f9b      	ldrb	r3, [r3, #30]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2200      	movs	r2, #0
 80034a0:	4619      	mov	r1, r3
 80034a2:	4816      	ldr	r0, [pc, #88]	; (80034fc <MainScreenAnswer+0x158>)
 80034a4:	f7fd ffe4 	bl	8001470 <calcCRC>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <MainScreenAnswer+0x158>)
 80034ae:	77da      	strb	r2, [r3, #31]
		Master.Package[26] = Master.DataCRC;
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <MainScreenAnswer+0x158>)
 80034b2:	7fdb      	ldrb	r3, [r3, #31]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <MainScreenAnswer+0x158>)
 80034b8:	769a      	strb	r2, [r3, #26]
		Master.Package[27] = 0x0A;
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <MainScreenAnswer+0x158>)
 80034bc:	220a      	movs	r2, #10
 80034be:	76da      	strb	r2, [r3, #27]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <MainScreenAnswer+0x158>)
 80034c2:	7f9b      	ldrb	r3, [r3, #30]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3302      	adds	r3, #2
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4619      	mov	r1, r3
 80034cc:	480b      	ldr	r0, [pc, #44]	; (80034fc <MainScreenAnswer+0x158>)
 80034ce:	f001 f90b 	bl	80046e8 <putDataInBufferUart2>

	}


	Master.Package[0] = PACKAGE_BEGIN;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <MainScreenAnswer+0x158>)
 80034d4:	22fe      	movs	r2, #254	; 0xfe
 80034d6:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <MainScreenAnswer+0x158>)
 80034da:	7f9b      	ldrb	r3, [r3, #30]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <MainScreenAnswer+0x158>)
 80034e0:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <MainScreenAnswer+0x158>)
 80034e4:	22fa      	movs	r2, #250	; 0xfa
 80034e6:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = MAIN_SCREEN;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <MainScreenAnswer+0x158>)
 80034ea:	2214      	movs	r2, #20
 80034ec:	70da      	strb	r2, [r3, #3]

}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000d30 	.word	0x20000d30
 80034fc:	20000f2c 	.word	0x20000f2c
 8003500:	20000d32 	.word	0x20000d32
 8003504:	20000c50 	.word	0x20000c50
 8003508:	20000c6c 	.word	0x20000c6c
 800350c:	20000c88 	.word	0x20000c88
 8003510:	20000ca4 	.word	0x20000ca4
 8003514:	20000cc0 	.word	0x20000cc0
 8003518:	20000cdc 	.word	0x20000cdc
 800351c:	20000cf8 	.word	0x20000cf8
 8003520:	20000d14 	.word	0x20000d14

08003524 <SystemInfoAnswer>:

void SystemInfoAnswer()
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
	Master.Package[4]=1;//version before point
 8003528:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800352a:	2201      	movs	r2, #1
 800352c:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=0;//version after point
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003530:	2200      	movs	r2, #0
 8003532:	715a      	strb	r2, [r3, #5]
	Master.Package[6]=1;// 1- LIFEPO4, 2 - LIon
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003536:	2201      	movs	r2, #1
 8003538:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=NUMBER_OF_CELLS;//Number of cells
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800353c:	2208      	movs	r2, #8
 800353e:	71da      	strb	r2, [r3, #7]
	Master.Package[8]=0;
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003542:	2200      	movs	r2, #0
 8003544:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=0;
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003548:	2200      	movs	r2, #0
 800354a:	725a      	strb	r2, [r3, #9]
	Master.Package[10]=0;
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800354e:	2200      	movs	r2, #0
 8003550:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=0;
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003554:	2200      	movs	r2, #0
 8003556:	72da      	strb	r2, [r3, #11]
	Master.Package[12]=0;
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800355a:	2200      	movs	r2, #0
 800355c:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=0;
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003560:	2200      	movs	r2, #0
 8003562:	735a      	strb	r2, [r3, #13]

	Master.Data_length = 15-1;
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003566:	220e      	movs	r2, #14
 8003568:	779a      	strb	r2, [r3, #30]

	Master.Package[0] = PACKAGE_BEGIN;
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800356c:	22fe      	movs	r2, #254	; 0xfe
 800356e:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003572:	7f9b      	ldrb	r3, [r3, #30]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003578:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800357c:	22fa      	movs	r2, #250	; 0xfa
 800357e:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = SYSTEM_INFO;
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003582:	2208      	movs	r2, #8
 8003584:	70da      	strb	r2, [r3, #3]
	Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003588:	7f9b      	ldrb	r3, [r3, #30]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2200      	movs	r2, #0
 800358e:	4619      	mov	r1, r3
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <SystemInfoAnswer+0xa0>)
 8003592:	f7fd ff6d 	bl	8001470 <calcCRC>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <SystemInfoAnswer+0xa0>)
 800359c:	77da      	strb	r2, [r3, #31]
	Master.Package[14] = Master.DataCRC;
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <SystemInfoAnswer+0xa0>)
 80035a0:	7fdb      	ldrb	r3, [r3, #31]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <SystemInfoAnswer+0xa0>)
 80035a6:	739a      	strb	r2, [r3, #14]
	Master.Package[15] = 0x0A;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <SystemInfoAnswer+0xa0>)
 80035aa:	220a      	movs	r2, #10
 80035ac:	73da      	strb	r2, [r3, #15]
	putDataInBufferUart2(Master.Package,Master.Data_length+2);
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SystemInfoAnswer+0xa0>)
 80035b0:	7f9b      	ldrb	r3, [r3, #30]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3302      	adds	r3, #2
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	4802      	ldr	r0, [pc, #8]	; (80035c4 <SystemInfoAnswer+0xa0>)
 80035bc:	f001 f894 	bl	80046e8 <putDataInBufferUart2>
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000f2c 	.word	0x20000f2c

080035c8 <TIM7_Callback>:

void TIM7_Callback()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0

	//logDebugD("l=",bufferUart1.rx_counter,0);
	//logDebugD("Le=",ParsingData.IsPassedPackageLengthFlag,0);
	//logDebugD("PB=",ParsingData.IsPassedPackageBeginFlag,0);
	//logDebugD("RE=",ParsingData.IsDataReadyReadFromBuffer,0)
	if (ParsingData.IsDataReadyReadFromBuffer == 1)
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <TIM7_Callback+0xe8>)
 80035d0:	789b      	ldrb	r3, [r3, #2]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d166      	bne.n	80036a6 <TIM7_Callback+0xde>
	{
		if ( (getCharFromBufferUART2() == PACKAGE_BEGIN) )
 80035d8:	f001 f8c0 	bl	800475c <getCharFromBufferUART2>
 80035dc:	4603      	mov	r3, r0
 80035de:	2bfe      	cmp	r3, #254	; 0xfe
 80035e0:	d161      	bne.n	80036a6 <TIM7_Callback+0xde>
		{
			ParsingData.IsDataReadyReadFromBuffer = 0;
 80035e2:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <TIM7_Callback+0xe8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	709a      	strb	r2, [r3, #2]
			//logDebug("PACKAGE_BEGIN");
			//logDebugD("l=",bufferUart1.rx_counter,0);

			Slave.Data_length = getCharFromBufferUART2();
 80035e8:	f001 f8b8 	bl	800475c <getCharFromBufferUART2>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <TIM7_Callback+0xec>)
 80035f2:	779a      	strb	r2, [r3, #30]
			Slave.Package[0] = PACKAGE_BEGIN;
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <TIM7_Callback+0xec>)
 80035f6:	22fe      	movs	r2, #254	; 0xfe
 80035f8:	701a      	strb	r2, [r3, #0]
			Slave.Package[1] = Slave.Data_length;
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <TIM7_Callback+0xec>)
 80035fc:	7f9b      	ldrb	r3, [r3, #30]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <TIM7_Callback+0xec>)
 8003602:	705a      	strb	r2, [r3, #1]
			//logDebugD("Slave.Data_length  ",Slave.Data_length,0);
			if (Slave.Data_length <= DATALENGTH_MAX)
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <TIM7_Callback+0xec>)
 8003606:	7f9b      	ldrb	r3, [r3, #30]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b1e      	cmp	r3, #30
 800360c:	d84b      	bhi.n	80036a6 <TIM7_Callback+0xde>
			{
				uint8_t i=0;
 800360e:	2300      	movs	r3, #0
 8003610:	71fb      	strb	r3, [r7, #7]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8003612:	2302      	movs	r3, #2
 8003614:	71fb      	strb	r3, [r7, #7]
 8003616:	e009      	b.n	800362c <TIM7_Callback+0x64>
				{
					Slave.Package[i] = getCharFromBufferUART2();
 8003618:	f001 f8a0 	bl	800475c <getCharFromBufferUART2>
 800361c:	4602      	mov	r2, r0
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	b2d1      	uxtb	r1, r2
 8003622:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <TIM7_Callback+0xec>)
 8003624:	54d1      	strb	r1, [r2, r3]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	3301      	adds	r3, #1
 800362a:	71fb      	strb	r3, [r7, #7]
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <TIM7_Callback+0xec>)
 8003630:	7f9b      	ldrb	r3, [r3, #30]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	429a      	cmp	r2, r3
 8003638:	ddee      	ble.n	8003618 <TIM7_Callback+0x50>
					//logDebugD("pack ",Slave.Package[i],0)
				}
				Slave.DataCRC = Slave.Package[i-2];
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	3b02      	subs	r3, #2
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM7_Callback+0xec>)
 8003640:	5cd3      	ldrb	r3, [r2, r3]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <TIM7_Callback+0xec>)
 8003646:	77da      	strb	r2, [r3, #31]
				//logDebugD("CRC1",Slave.Package[i-2],0);
				//logDebugD("CRC2",Slave.Package[i-1],0);
				Slave.DataCRC_Calc = calcCRC(Slave.Package, Slave.Data_length, 0);
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <TIM7_Callback+0xec>)
 800364a:	7f9b      	ldrb	r3, [r3, #30]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2200      	movs	r2, #0
 8003650:	4619      	mov	r1, r3
 8003652:	4818      	ldr	r0, [pc, #96]	; (80036b4 <TIM7_Callback+0xec>)
 8003654:	f7fd ff0c 	bl	8001470 <calcCRC>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <TIM7_Callback+0xec>)
 800365e:	f883 2020 	strb.w	r2, [r3, #32]
				if (Slave.DataCRC_Calc == Slave.DataCRC)
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <TIM7_Callback+0xec>)
 8003664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <TIM7_Callback+0xec>)
 800366c:	7fdb      	ldrb	r3, [r3, #31]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	429a      	cmp	r2, r3
 8003672:	d118      	bne.n	80036a6 <TIM7_Callback+0xde>
				{
					//logDebug("CRC OK");
					if (Slave.Package[2] == READ_DATA)
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <TIM7_Callback+0xec>)
 8003676:	789b      	ldrb	r3, [r3, #2]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2bfa      	cmp	r3, #250	; 0xfa
 800367c:	d113      	bne.n	80036a6 <TIM7_Callback+0xde>
					{
						//logDebug("READ Command");
						if(Slave.Package[3] == MAIN_SCREEN)
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <TIM7_Callback+0xec>)
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b14      	cmp	r3, #20
 8003686:	d101      	bne.n	800368c <TIM7_Callback+0xc4>
						{
							//logDebug("MAIN_SCREEN");
							MainScreenAnswer();
 8003688:	f7ff fe8c 	bl	80033a4 <MainScreenAnswer>
						}
						if(Slave.Package[3] == SYSTEM_INFO)
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <TIM7_Callback+0xec>)
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b08      	cmp	r3, #8
 8003694:	d107      	bne.n	80036a6 <TIM7_Callback+0xde>
						{
							logDebug("SYSTEM_INFO");
 8003696:	4808      	ldr	r0, [pc, #32]	; (80036b8 <TIM7_Callback+0xf0>)
 8003698:	f001 f930 	bl	80048fc <printToBufferWithoutEndUART1>
 800369c:	4807      	ldr	r0, [pc, #28]	; (80036bc <TIM7_Callback+0xf4>)
 800369e:	f001 f8a1 	bl	80047e4 <printToBufferUART1>
							SystemInfoAnswer();
 80036a2:	f7ff ff3f 	bl	8003524 <SystemInfoAnswer>
					}
				}//CRC
			}//DATALENGTH_MAX
		}//PACKAGE_BEGIN
	}//ParsingData.IsDataReadyReadFromBuffer
}//f
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000b28 	.word	0x20000b28
 80036b4:	20000f58 	.word	0x20000f58
 80036b8:	08005fb0 	.word	0x08005fb0
 80036bc:	0800600c 	.word	0x0800600c

080036c0 <Output_ON>:

void Output_ON()
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BS8;//ON OUT
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <Output_ON+0x24>)
 80036c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ca:	611a      	str	r2, [r3, #16]
    logDebug("out on");
 80036cc:	4806      	ldr	r0, [pc, #24]	; (80036e8 <Output_ON+0x28>)
 80036ce:	f001 f915 	bl	80048fc <printToBufferWithoutEndUART1>
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <Output_ON+0x2c>)
 80036d4:	f001 f886 	bl	80047e4 <printToBufferUART1>
    Battery.Power = ON;
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <Output_ON+0x30>)
 80036da:	2201      	movs	r2, #1
 80036dc:	741a      	strb	r2, [r3, #16]
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40010800 	.word	0x40010800
 80036e8:	08005fb0 	.word	0x08005fb0
 80036ec:	08006018 	.word	0x08006018
 80036f0:	20000d30 	.word	0x20000d30

080036f4 <Output_OFF>:
void Output_OFF()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BR8;//ON OUT
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <Output_OFF+0x24>)
 80036fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036fe:	611a      	str	r2, [r3, #16]
    logDebug("out off");
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <Output_OFF+0x28>)
 8003702:	f001 f8fb 	bl	80048fc <printToBufferWithoutEndUART1>
 8003706:	4806      	ldr	r0, [pc, #24]	; (8003720 <Output_OFF+0x2c>)
 8003708:	f001 f86c 	bl	80047e4 <printToBufferUART1>
    Battery.Power = OFF;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <Output_OFF+0x30>)
 800370e:	2202      	movs	r2, #2
 8003710:	741a      	strb	r2, [r3, #16]
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40010800 	.word	0x40010800
 800371c:	08005fb0 	.word	0x08005fb0
 8003720:	08006020 	.word	0x08006020
 8003724:	20000d30 	.word	0x20000d30

08003728 <InverseOUT>:
void InverseOUT()
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
	if (Battery.Power == OFF)
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <InverseOUT+0x1c>)
 800372e:	7c1b      	ldrb	r3, [r3, #16]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d102      	bne.n	800373c <InverseOUT+0x14>
	{
		Output_ON();
 8003736:	f7ff ffc3 	bl	80036c0 <Output_ON>
	}
	else
	{
		Output_OFF();
	}
}
 800373a:	e001      	b.n	8003740 <InverseOUT+0x18>
		Output_OFF();
 800373c:	f7ff ffda 	bl	80036f4 <Output_OFF>
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000d30 	.word	0x20000d30

08003748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800374e:	2001      	movs	r0, #1
 8003750:	f7fe fe36 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003754:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003758:	f7fe fe1a 	bl	8002390 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f7fe fa19 	bl	8001b94 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003762:	f7fe fa3b 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8003766:	4603      	mov	r3, r0
 8003768:	2200      	movs	r2, #0
 800376a:	210f      	movs	r1, #15
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fa89 	bl	8001c84 <NVIC_EncodePriority>
 8003772:	4603      	mov	r3, r0
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 30ff 	mov.w	r0, #4294967295
 800377a:	f7fe fa59 	bl	8001c30 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800377e:	f7fe feed 	bl	800255c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003782:	f000 f967 	bl	8003a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003786:	f000 fc5d 	bl	8004044 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 800378a:	f000 fb69 	bl	8003e60 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800378e:	f000 fc41 	bl	8004014 <MX_DMA_Init>
  MX_ADC1_Init();
 8003792:	f000 f997 	bl	8003ac4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8003796:	f000 fbcf 	bl	8003f38 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800379a:	f000 fb21 	bl	8003de0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  SystemCoreClockUpdate();
 800379e:	f000 fead 	bl	80044fc <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 80037a2:	4b89      	ldr	r3, [pc, #548]	; (80039c8 <main+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a89      	ldr	r2, [pc, #548]	; (80039cc <main+0x284>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fa9a 	bl	8001ce8 <SysTick_Config>

	LoggingData.RecordsQuantity= 0;
 80037b4:	4b86      	ldr	r3, [pc, #536]	; (80039d0 <main+0x288>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
	uint8_t EEpromReadStatus;

	delay_ms(100);
 80037ba:	2064      	movs	r0, #100	; 0x64
 80037bc:	f7fd fe44 	bl	8001448 <delay_ms>
   GPIOA->BSRR =  GPIO_BSRR_BS11;//ON CPU
 80037c0:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <main+0x28c>)
 80037c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c6:	611a      	str	r2, [r3, #16]
   GPIOA->BSRR =  GPIO_BSRR_BS12;//12 V for
 80037c8:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <main+0x28c>)
 80037ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ce:	611a      	str	r2, [r3, #16]
   GPIOB->BSRR =  GPIO_BSRR_BS4;//12 V for
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <main+0x290>)
 80037d2:	2210      	movs	r2, #16
 80037d4:	611a      	str	r2, [r3, #16]
   Battery.BatteryLevel = BATTERY_OK;
 80037d6:	4b81      	ldr	r3, [pc, #516]	; (80039dc <main+0x294>)
 80037d8:	2202      	movs	r2, #2
 80037da:	721a      	strb	r2, [r3, #8]
   Battery.Power = OFF;
 80037dc:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <main+0x294>)
 80037de:	2202      	movs	r2, #2
 80037e0:	741a      	strb	r2, [r3, #16]
   logDebug("System ON");
 80037e2:	487f      	ldr	r0, [pc, #508]	; (80039e0 <main+0x298>)
 80037e4:	f001 f88a 	bl	80048fc <printToBufferWithoutEndUART1>
 80037e8:	487e      	ldr	r0, [pc, #504]	; (80039e4 <main+0x29c>)
 80037ea:	f000 fffb 	bl	80047e4 <printToBufferUART1>
	FlashVoltage = Voltage10Percent*ID_MAX_COUNT*10;
 80037ee:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <main+0x2a0>)
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	461a      	mov	r2, r3
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <main+0x2a4>)
 8003802:	601a      	str	r2, [r3, #0]

  FactoryWriteToFlash_CRC();
 8003804:	f7fc fe70 	bl	80004e8 <FactoryWriteToFlash_CRC>
	delay_ms(1000);
 8003808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800380c:	f7fd fe1c 	bl	8001448 <delay_ms>

	flash_read_block();
 8003810:	f7fc fdfc 	bl	800040c <flash_read_block>



	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8003814:	4b6e      	ldr	r3, [pc, #440]	; (80039d0 <main+0x288>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b17      	cmp	r3, #23
 800381a:	d902      	bls.n	8003822 <main+0xda>
 800381c:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <main+0x288>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
	EEpromReadStatus = ReadFromFlash();
 8003822:	f7fd fa97 	bl	8000d54 <ReadFromFlash>
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
	if (EEpromReadStatus==0)
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <main+0x104>
	{
		delay_ms(1000);
 8003830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003834:	f7fd fe08 	bl	8001448 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8003838:	f7fd fa8c 	bl	8000d54 <ReadFromFlash>
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
		logInfo("Read from EEprom - FAIL");
 8003840:	486b      	ldr	r0, [pc, #428]	; (80039f0 <main+0x2a8>)
 8003842:	f001 f85b 	bl	80048fc <printToBufferWithoutEndUART1>
 8003846:	486b      	ldr	r0, [pc, #428]	; (80039f4 <main+0x2ac>)
 8003848:	f000 ffcc 	bl	80047e4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 0)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <main+0x124>
	{

		delay_ms(4000);
 8003852:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003856:	f7fd fdf7 	bl	8001448 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 800385a:	4867      	ldr	r0, [pc, #412]	; (80039f8 <main+0x2b0>)
 800385c:	f7fd fb24 	bl	8000ea8 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8003860:	4863      	ldr	r0, [pc, #396]	; (80039f0 <main+0x2a8>)
 8003862:	f001 f84b 	bl	80048fc <printToBufferWithoutEndUART1>
 8003866:	4863      	ldr	r0, [pc, #396]	; (80039f4 <main+0x2ac>)
 8003868:	f000 ffbc 	bl	80047e4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 1)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <main+0x136>
		logInfo("Read from EEprom - SUCCESS");
 8003872:	485f      	ldr	r0, [pc, #380]	; (80039f0 <main+0x2a8>)
 8003874:	f001 f842 	bl	80048fc <printToBufferWithoutEndUART1>
 8003878:	4860      	ldr	r0, [pc, #384]	; (80039fc <main+0x2b4>)
 800387a:	f000 ffb3 	bl	80047e4 <printToBufferUART1>



  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800387e:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <main+0x2b8>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	4a60      	ldr	r2, [pc, #384]	; (8003a04 <main+0x2bc>)
 8003884:	6013      	str	r3, [r2, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8003886:	4b60      	ldr	r3, [pc, #384]	; (8003a08 <main+0x2c0>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <main+0x2c4>)
 8003894:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8003896:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <main+0x2c0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <main+0x2c8>)
 800389c:	6013      	str	r3, [r2, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 800389e:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <main+0x2c0>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a5c      	ldr	r2, [pc, #368]	; (8003a14 <main+0x2cc>)
 80038a4:	6013      	str	r3, [r2, #0]
 // Generation_Coefficients_R_A_B();
  InfoToUARTBeforeStart();
 80038a6:	f7fd fc4d 	bl	8001144 <InfoToUARTBeforeStart>
  logInfo(Version);
 80038aa:	4851      	ldr	r0, [pc, #324]	; (80039f0 <main+0x2a8>)
 80038ac:	f001 f826 	bl	80048fc <printToBufferWithoutEndUART1>
 80038b0:	4859      	ldr	r0, [pc, #356]	; (8003a18 <main+0x2d0>)
 80038b2:	f000 ff97 	bl	80047e4 <printToBufferUART1>
  delay_ms(1000);
 80038b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ba:	f7fd fdc5 	bl	8001448 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Key = BUT_GetKey();
 80038be:	f7ff f95b 	bl	8002b78 <BUT_GetKey>
 80038c2:	4603      	mov	r3, r0
 80038c4:	71bb      	strb	r3, [r7, #6]
	  if (Key == KEY_ACTION)
 80038c6:	79bb      	ldrb	r3, [r7, #6]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d101      	bne.n	80038d0 <main+0x188>
		  InverseOUT();
 80038cc:	f7ff ff2c 	bl	8003728 <InverseOUT>
		//6  [6] I
		//5  [5] I
	//	Vref [15]


	  logDebugD("sec ",time_sec,0);
 80038d0:	4843      	ldr	r0, [pc, #268]	; (80039e0 <main+0x298>)
 80038d2:	f001 f813 	bl	80048fc <printToBufferWithoutEndUART1>
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <main+0x2d4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	4619      	mov	r1, r3
 80038de:	4850      	ldr	r0, [pc, #320]	; (8003a20 <main+0x2d8>)
 80038e0:	f001 f864 	bl	80049ac <printToBufferUART1D>
	  logDebugD("PowerOffTimesec ",PowerOffTimesec,0);
 80038e4:	483e      	ldr	r0, [pc, #248]	; (80039e0 <main+0x298>)
 80038e6:	f001 f809 	bl	80048fc <printToBufferWithoutEndUART1>
 80038ea:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <main+0x2dc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	4619      	mov	r1, r3
 80038f2:	484d      	ldr	r0, [pc, #308]	; (8003a28 <main+0x2e0>)
 80038f4:	f001 f85a 	bl	80049ac <printToBufferUART1D>
	  logDebugD("[6] ", RegularConvData[6],0);
 80038f8:	4839      	ldr	r0, [pc, #228]	; (80039e0 <main+0x298>)
 80038fa:	f000 ffff 	bl	80048fc <printToBufferWithoutEndUART1>
 80038fe:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <main+0x2e4>)
 8003900:	899b      	ldrh	r3, [r3, #12]
 8003902:	b29b      	uxth	r3, r3
 8003904:	2200      	movs	r2, #0
 8003906:	4619      	mov	r1, r3
 8003908:	4849      	ldr	r0, [pc, #292]	; (8003a30 <main+0x2e8>)
 800390a:	f001 f84f 	bl	80049ac <printToBufferUART1D>
	  logDebugD("I charge ", Battery.Current_Load,2);
 800390e:	4834      	ldr	r0, [pc, #208]	; (80039e0 <main+0x298>)
 8003910:	f000 fff4 	bl	80048fc <printToBufferWithoutEndUART1>
 8003914:	4b31      	ldr	r3, [pc, #196]	; (80039dc <main+0x294>)
 8003916:	88db      	ldrh	r3, [r3, #6]
 8003918:	b29b      	uxth	r3, r3
 800391a:	2202      	movs	r2, #2
 800391c:	4619      	mov	r1, r3
 800391e:	4845      	ldr	r0, [pc, #276]	; (8003a34 <main+0x2ec>)
 8003920:	f001 f844 	bl	80049ac <printToBufferUART1D>
	  logDebugD("[5] ", RegularConvData[5],0);
 8003924:	482e      	ldr	r0, [pc, #184]	; (80039e0 <main+0x298>)
 8003926:	f000 ffe9 	bl	80048fc <printToBufferWithoutEndUART1>
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <main+0x2e4>)
 800392c:	895b      	ldrh	r3, [r3, #10]
 800392e:	b29b      	uxth	r3, r3
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	4840      	ldr	r0, [pc, #256]	; (8003a38 <main+0x2f0>)
 8003936:	f001 f839 	bl	80049ac <printToBufferUART1D>
	  logDebugD("I Discharge ", Battery.Current_Charge,2);
 800393a:	4829      	ldr	r0, [pc, #164]	; (80039e0 <main+0x298>)
 800393c:	f000 ffde 	bl	80048fc <printToBufferWithoutEndUART1>
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <main+0x294>)
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	b29b      	uxth	r3, r3
 8003946:	2202      	movs	r2, #2
 8003948:	4619      	mov	r1, r3
 800394a:	483c      	ldr	r0, [pc, #240]	; (8003a3c <main+0x2f4>)
 800394c:	f001 f82e 	bl	80049ac <printToBufferUART1D>
	  logDebugD("Ref ", RegularConvData[15],0);
	  logDebugD("Ucontroller:", U_Controller,2);
	  logDebugD("Battery.Voltage:", Battery.Voltage,2);

*/
	  logDebugD("T Mosfet: ",Battery.MosfetsTemperature,0);
 8003950:	4823      	ldr	r0, [pc, #140]	; (80039e0 <main+0x298>)
 8003952:	f000 ffd3 	bl	80048fc <printToBufferWithoutEndUART1>
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <main+0x294>)
 8003958:	895b      	ldrh	r3, [r3, #10]
 800395a:	b29b      	uxth	r3, r3
 800395c:	2200      	movs	r2, #0
 800395e:	4619      	mov	r1, r3
 8003960:	4837      	ldr	r0, [pc, #220]	; (8003a40 <main+0x2f8>)
 8003962:	f001 f823 	bl	80049ac <printToBufferUART1D>
	  logDebugD("T Balans: ",Battery.BalansirTemperature,0);
 8003966:	481e      	ldr	r0, [pc, #120]	; (80039e0 <main+0x298>)
 8003968:	f000 ffc8 	bl	80048fc <printToBufferWithoutEndUART1>
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <main+0x294>)
 800396e:	899b      	ldrh	r3, [r3, #12]
 8003970:	b29b      	uxth	r3, r3
 8003972:	2200      	movs	r2, #0
 8003974:	4619      	mov	r1, r3
 8003976:	4833      	ldr	r0, [pc, #204]	; (8003a44 <main+0x2fc>)
 8003978:	f001 f818 	bl	80049ac <printToBufferUART1D>
	  logDebugD("T Battery: ",Battery.BatteryTemperature,0);
 800397c:	4818      	ldr	r0, [pc, #96]	; (80039e0 <main+0x298>)
 800397e:	f000 ffbd 	bl	80048fc <printToBufferWithoutEndUART1>
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <main+0x294>)
 8003984:	89db      	ldrh	r3, [r3, #14]
 8003986:	b29b      	uxth	r3, r3
 8003988:	2200      	movs	r2, #0
 800398a:	4619      	mov	r1, r3
 800398c:	482e      	ldr	r0, [pc, #184]	; (8003a48 <main+0x300>)
 800398e:	f001 f80d 	bl	80049ac <printToBufferUART1D>
	  logDebugD("Gate1Voltage_NearShunt: ",Battery.Gate1Voltage_NearShunt,2);
 8003992:	4813      	ldr	r0, [pc, #76]	; (80039e0 <main+0x298>)
 8003994:	f000 ffb2 	bl	80048fc <printToBufferWithoutEndUART1>
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <main+0x294>)
 800399a:	8a5b      	ldrh	r3, [r3, #18]
 800399c:	b29b      	uxth	r3, r3
 800399e:	2202      	movs	r2, #2
 80039a0:	4619      	mov	r1, r3
 80039a2:	482a      	ldr	r0, [pc, #168]	; (8003a4c <main+0x304>)
 80039a4:	f001 f802 	bl	80049ac <printToBufferUART1D>
	  logDebugD("Gate2Voltage_NearOUT: ",Battery.Gate2Voltage_NearOUT,2);
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <main+0x298>)
 80039aa:	f000 ffa7 	bl	80048fc <printToBufferWithoutEndUART1>
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <main+0x294>)
 80039b0:	8a9b      	ldrh	r3, [r3, #20]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2202      	movs	r2, #2
 80039b6:	4619      	mov	r1, r3
 80039b8:	4825      	ldr	r0, [pc, #148]	; (8003a50 <main+0x308>)
 80039ba:	f000 fff7 	bl	80049ac <printToBufferUART1D>
	 // logDebugD("PowerOffTimesec = ",PowerOffTimesec, 0);




	  delay_ms(1000);
 80039be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c2:	f7fd fd41 	bl	8001448 <delay_ms>
	  Key = BUT_GetKey();
 80039c6:	e77a      	b.n	80038be <main+0x176>
 80039c8:	2000023c 	.word	0x2000023c
 80039cc:	10624dd3 	.word	0x10624dd3
 80039d0:	20000d6c 	.word	0x20000d6c
 80039d4:	40010800 	.word	0x40010800
 80039d8:	40010c00 	.word	0x40010c00
 80039dc:	20000d30 	.word	0x20000d30
 80039e0:	08005fb0 	.word	0x08005fb0
 80039e4:	08006028 	.word	0x08006028
 80039e8:	20000f54 	.word	0x20000f54
 80039ec:	20000be4 	.word	0x20000be4
 80039f0:	08005f8c 	.word	0x08005f8c
 80039f4:	08006034 	.word	0x08006034
 80039f8:	0800604c 	.word	0x0800604c
 80039fc:	0800605c 	.word	0x0800605c
 8003a00:	200001cc 	.word	0x200001cc
 8003a04:	20000b9c 	.word	0x20000b9c
 8003a08:	200000f4 	.word	0x200000f4
 8003a0c:	20000fc0 	.word	0x20000fc0
 8003a10:	20000fc8 	.word	0x20000fc8
 8003a14:	20000f50 	.word	0x20000f50
 8003a18:	2000022c 	.word	0x2000022c
 8003a1c:	20000b7c 	.word	0x20000b7c
 8003a20:	08006078 	.word	0x08006078
 8003a24:	20000b94 	.word	0x20000b94
 8003a28:	08006080 	.word	0x08006080
 8003a2c:	20000d48 	.word	0x20000d48
 8003a30:	08006094 	.word	0x08006094
 8003a34:	0800609c 	.word	0x0800609c
 8003a38:	080060a8 	.word	0x080060a8
 8003a3c:	080060b0 	.word	0x080060b0
 8003a40:	080060c0 	.word	0x080060c0
 8003a44:	080060cc 	.word	0x080060cc
 8003a48:	080060d8 	.word	0x080060d8
 8003a4c:	080060e4 	.word	0x080060e4
 8003a50:	08006100 	.word	0x08006100

08003a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 8003a58:	f7fe fbb0 	bl	80021bc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003a5c:	bf00      	nop
 8003a5e:	f7fe fbbb 	bl	80021d8 <LL_RCC_HSE_IsReady>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d1fa      	bne.n	8003a5e <SystemClock_Config+0xa>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 8003a68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003a6c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003a70:	f7fe fc54 	bl	800231c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003a74:	f7fe fc32 	bl	80022dc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003a78:	bf00      	nop
 8003a7a:	f7fe fc3d 	bl	80022f8 <LL_RCC_PLL_IsReady>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d1fa      	bne.n	8003a7a <SystemClock_Config+0x26>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fe fbd9 	bl	800223c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fe fbea 	bl	8002264 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fe fbfb 	bl	800228c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7fe fbb0 	bl	80021fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003a9c:	bf00      	nop
 8003a9e:	f7fe fbc1 	bl	8002224 <LL_RCC_GetSysClkSource>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d1fa      	bne.n	8003a9e <SystemClock_Config+0x4a>
  {

  }
  LL_Init1msTick(24000000);
 8003aa8:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <SystemClock_Config+0x6c>)
 8003aaa:	f001 fd8b 	bl	80055c4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8003aae:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <SystemClock_Config+0x6c>)
 8003ab0:	f001 fd96 	bl	80055e0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fe fbfd 	bl	80022b4 <LL_RCC_SetADCClockSource>
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	016e3600 	.word	0x016e3600

08003ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003af2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003af6:	f7fe fc63 	bl	80023c0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003afa:	2010      	movs	r0, #16
 8003afc:	f7fe fc60 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003b00:	2004      	movs	r0, #4
 8003b02:	f7fe fc5d 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003b06:	2008      	movs	r0, #8
 8003b08:	f7fe fc5a 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  PA7   ------> ADC1_IN7
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8003b0c:	f642 732f 	movw	r3, #12079	; 0x2f2f
 8003b10:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	463b      	mov	r3, r7
 8003b18:	4619      	mov	r1, r3
 8003b1a:	489d      	ldr	r0, [pc, #628]	; (8003d90 <MX_ADC1_Init+0x2cc>)
 8003b1c:	f001 f990 	bl	8004e40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8003b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b24:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4899      	ldr	r0, [pc, #612]	; (8003d94 <MX_ADC1_Init+0x2d0>)
 8003b30:	f001 f986 	bl	8004e40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8003b34:	f240 3303 	movw	r3, #771	; 0x303
 8003b38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3e:	463b      	mov	r3, r7
 8003b40:	4619      	mov	r1, r3
 8003b42:	4895      	ldr	r0, [pc, #596]	; (8003d98 <MX_ADC1_Init+0x2d4>)
 8003b44:	f001 f97c 	bl	8004e40 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4893      	ldr	r0, [pc, #588]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b4e:	f7fe f9e9 	bl	8001f24 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2101      	movs	r1, #1
 8003b56:	4891      	ldr	r0, [pc, #580]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b58:	f7fe fab2 	bl	80020c0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	2101      	movs	r1, #1
 8003b60:	488e      	ldr	r0, [pc, #568]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b62:	f7fe fa03 	bl	8001f6c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	488c      	ldr	r0, [pc, #560]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b6c:	f7fe fa20 	bl	8001fb0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	2101      	movs	r1, #1
 8003b74:	4889      	ldr	r0, [pc, #548]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b76:	f7fe fa3d 	bl	8001ff4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8003b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4886      	ldr	r0, [pc, #536]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b82:	f7fe fa59 	bl	8002038 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8003b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4883      	ldr	r0, [pc, #524]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003b8e:	f7fe fa75 	bl	800207c <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_ConfigAddresses(DMA1,
 8003b92:	2100      	movs	r1, #0
 8003b94:	4882      	ldr	r0, [pc, #520]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003b96:	f7fe f8c9 	bl	8001d2c <LL_ADC_DMA_GetRegAddr>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4981      	ldr	r1, [pc, #516]	; (8003da4 <MX_ADC1_Init+0x2e0>)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	487d      	ldr	r0, [pc, #500]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003ba8:	f7fe face 	bl	8002148 <LL_DMA_ConfigAddresses>
                           (uint32_t)RegularConvData,
                           LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

   //LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,LL_ADC_DMA_GetRegAddr(ADC1,LL_ADC_DMA_REG_REGULAR_DATA));
   //LL_DMA_SetMemoryAddress(DMA1,LL_DMA_CHANNEL_1,RegularConvData);
   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, NUMBER_OF_CHANNELS);
 8003bac:	2210      	movs	r2, #16
 8003bae:	2101      	movs	r1, #1
 8003bb0:	487a      	ldr	r0, [pc, #488]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003bb2:	f7fe faa7 	bl	8002104 <LL_DMA_SetDataLength>
   //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
   //LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4878      	ldr	r0, [pc, #480]	; (8003d9c <MX_ADC1_Init+0x2d8>)
 8003bba:	f7fe f995 	bl	8001ee8 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4874      	ldr	r0, [pc, #464]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003bd0:	f001 f811 	bl	8004bf6 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003bd4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8003bd8:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS;
 8003bda:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8003bde:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	486a      	ldr	r0, [pc, #424]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003bf6:	f001 f825 	bl	8004c44 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8003bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c02:	4867      	ldr	r0, [pc, #412]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c04:	f7fe f8b0 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c08:	2207      	movs	r2, #7
 8003c0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c0e:	4864      	ldr	r0, [pc, #400]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c10:	f7fe f8df 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8003c14:	4a64      	ldr	r2, [pc, #400]	; (8003da8 <MX_ADC1_Init+0x2e4>)
 8003c16:	f240 2105 	movw	r1, #517	; 0x205
 8003c1a:	4861      	ldr	r0, [pc, #388]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c1c:	f7fe f8a4 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c20:	2207      	movs	r2, #7
 8003c22:	4961      	ldr	r1, [pc, #388]	; (8003da8 <MX_ADC1_Init+0x2e4>)
 8003c24:	485e      	ldr	r0, [pc, #376]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c26:	f7fe f8d4 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8003c2a:	4a60      	ldr	r2, [pc, #384]	; (8003dac <MX_ADC1_Init+0x2e8>)
 8003c2c:	f240 210a 	movw	r1, #522	; 0x20a
 8003c30:	485b      	ldr	r0, [pc, #364]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c32:	f7fe f899 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c36:	2207      	movs	r2, #7
 8003c38:	495c      	ldr	r1, [pc, #368]	; (8003dac <MX_ADC1_Init+0x2e8>)
 8003c3a:	4859      	ldr	r0, [pc, #356]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c3c:	f7fe f8c9 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8003c40:	4a5b      	ldr	r2, [pc, #364]	; (8003db0 <MX_ADC1_Init+0x2ec>)
 8003c42:	f240 210f 	movw	r1, #527	; 0x20f
 8003c46:	4856      	ldr	r0, [pc, #344]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c48:	f7fe f88e 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	4958      	ldr	r1, [pc, #352]	; (8003db0 <MX_ADC1_Init+0x2ec>)
 8003c50:	4853      	ldr	r0, [pc, #332]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c52:	f7fe f8be 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8003c56:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <MX_ADC1_Init+0x2f0>)
 8003c58:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003c5c:	4850      	ldr	r0, [pc, #320]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c5e:	f7fe f883 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c62:	2207      	movs	r2, #7
 8003c64:	4953      	ldr	r1, [pc, #332]	; (8003db4 <MX_ADC1_Init+0x2f0>)
 8003c66:	484e      	ldr	r0, [pc, #312]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c68:	f7fe f8b3 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <MX_ADC1_Init+0x2f4>)
 8003c6e:	f240 2119 	movw	r1, #537	; 0x219
 8003c72:	484b      	ldr	r0, [pc, #300]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c74:	f7fe f878 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c78:	2207      	movs	r2, #7
 8003c7a:	494f      	ldr	r1, [pc, #316]	; (8003db8 <MX_ADC1_Init+0x2f4>)
 8003c7c:	4848      	ldr	r0, [pc, #288]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c7e:	f7fe f8a8 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8003c82:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <MX_ADC1_Init+0x2f8>)
 8003c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c88:	4845      	ldr	r0, [pc, #276]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c8a:	f7fe f86d 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003c8e:	2207      	movs	r2, #7
 8003c90:	494a      	ldr	r1, [pc, #296]	; (8003dbc <MX_ADC1_Init+0x2f8>)
 8003c92:	4843      	ldr	r0, [pc, #268]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003c94:	f7fe f89d 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8003c98:	4a49      	ldr	r2, [pc, #292]	; (8003dc0 <MX_ADC1_Init+0x2fc>)
 8003c9a:	f240 1105 	movw	r1, #261	; 0x105
 8003c9e:	4840      	ldr	r0, [pc, #256]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003ca0:	f7fe f862 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	4946      	ldr	r1, [pc, #280]	; (8003dc0 <MX_ADC1_Init+0x2fc>)
 8003ca8:	483d      	ldr	r0, [pc, #244]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003caa:	f7fe f892 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_8);
 8003cae:	4a45      	ldr	r2, [pc, #276]	; (8003dc4 <MX_ADC1_Init+0x300>)
 8003cb0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003cb4:	483a      	ldr	r0, [pc, #232]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003cb6:	f7fe f857 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003cba:	2207      	movs	r2, #7
 8003cbc:	4941      	ldr	r1, [pc, #260]	; (8003dc4 <MX_ADC1_Init+0x300>)
 8003cbe:	4838      	ldr	r0, [pc, #224]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003cc0:	f7fe f887 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_9);
 8003cc4:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <MX_ADC1_Init+0x304>)
 8003cc6:	f240 110f 	movw	r1, #271	; 0x10f
 8003cca:	4835      	ldr	r0, [pc, #212]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003ccc:	f7fe f84c 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	493d      	ldr	r1, [pc, #244]	; (8003dc8 <MX_ADC1_Init+0x304>)
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003cd6:	f7fe f87c 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_10);
 8003cda:	220a      	movs	r2, #10
 8003cdc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003ce0:	482f      	ldr	r0, [pc, #188]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003ce2:	f7fe f841 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003ce6:	2207      	movs	r2, #7
 8003ce8:	210a      	movs	r1, #10
 8003cea:	482d      	ldr	r0, [pc, #180]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003cec:	f7fe f871 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_11);
 8003cf0:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <MX_ADC1_Init+0x308>)
 8003cf2:	f240 1119 	movw	r1, #281	; 0x119
 8003cf6:	482a      	ldr	r0, [pc, #168]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003cf8:	f7fe f836 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	4933      	ldr	r1, [pc, #204]	; (8003dcc <MX_ADC1_Init+0x308>)
 8003d00:	4827      	ldr	r0, [pc, #156]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d02:	f7fe f866 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_12);
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <MX_ADC1_Init+0x30c>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4825      	ldr	r0, [pc, #148]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d0c:	f7fe f82c 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d10:	2207      	movs	r2, #7
 8003d12:	492f      	ldr	r1, [pc, #188]	; (8003dd0 <MX_ADC1_Init+0x30c>)
 8003d14:	4822      	ldr	r0, [pc, #136]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d16:	f7fe f85c 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_13);
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <MX_ADC1_Init+0x310>)
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	4820      	ldr	r0, [pc, #128]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d20:	f7fe f822 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d24:	2207      	movs	r2, #7
 8003d26:	492b      	ldr	r1, [pc, #172]	; (8003dd4 <MX_ADC1_Init+0x310>)
 8003d28:	481d      	ldr	r0, [pc, #116]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d2a:	f7fe f852 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_15);
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <MX_ADC1_Init+0x314>)
 8003d30:	210a      	movs	r1, #10
 8003d32:	481b      	ldr	r0, [pc, #108]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d34:	f7fe f818 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d38:	2207      	movs	r2, #7
 8003d3a:	4927      	ldr	r1, [pc, #156]	; (8003dd8 <MX_ADC1_Init+0x314>)
 8003d3c:	4818      	ldr	r0, [pc, #96]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d3e:	f7fe f848 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_16, LL_ADC_CHANNEL_VREFINT);
 8003d42:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <MX_ADC1_Init+0x318>)
 8003d44:	210f      	movs	r1, #15
 8003d46:	4816      	ldr	r0, [pc, #88]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d48:	f7fe f80e 	bl	8001d68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	4923      	ldr	r1, [pc, #140]	; (8003ddc <MX_ADC1_Init+0x318>)
 8003d50:	4813      	ldr	r0, [pc, #76]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d52:	f7fe f83e 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8003d56:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003d5a:	4811      	ldr	r0, [pc, #68]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d5c:	f7fd fff2 	bl	8001d44 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */
	 LL_ADC_Enable(ADC1);
 8003d60:	480f      	ldr	r0, [pc, #60]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d62:	f7fe f881 	bl	8001e68 <LL_ADC_Enable>
	  delay_ms(100);
 8003d66:	2064      	movs	r0, #100	; 0x64
 8003d68:	f7fd fb6e 	bl	8001448 <delay_ms>
	  LL_ADC_StartCalibration(ADC1);
 8003d6c:	480c      	ldr	r0, [pc, #48]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d6e:	f7fe f88a 	bl	8001e86 <LL_ADC_StartCalibration>
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8003d72:	bf00      	nop
 8003d74:	480a      	ldr	r0, [pc, #40]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d76:	f7fe f895 	bl	8001ea4 <LL_ADC_IsCalibrationOnGoing>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f9      	bne.n	8003d74 <MX_ADC1_Init+0x2b0>
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8003d80:	4807      	ldr	r0, [pc, #28]	; (8003da0 <MX_ADC1_Init+0x2dc>)
 8003d82:	f7fe f8a1 	bl	8001ec8 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8003d86:	bf00      	nop
 8003d88:	3730      	adds	r7, #48	; 0x30
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40010800 	.word	0x40010800
 8003d98:	40010c00 	.word	0x40010c00
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40012400 	.word	0x40012400
 8003da4:	20000d48 	.word	0x20000d48
 8003da8:	02300001 	.word	0x02300001
 8003dac:	02600002 	.word	0x02600002
 8003db0:	02900003 	.word	0x02900003
 8003db4:	02c00004 	.word	0x02c00004
 8003db8:	02f00005 	.word	0x02f00005
 8003dbc:	03200006 	.word	0x03200006
 8003dc0:	03500007 	.word	0x03500007
 8003dc4:	03800008 	.word	0x03800008
 8003dc8:	03b00009 	.word	0x03b00009
 8003dcc:	0030000b 	.word	0x0030000b
 8003dd0:	0060000c 	.word	0x0060000c
 8003dd4:	0090000d 	.word	0x0090000d
 8003dd8:	00f0000f 	.word	0x00f0000f
 8003ddc:	81500011 	.word	0x81500011

08003de0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8003df4:	2020      	movs	r0, #32
 8003df6:	f7fe facb 	bl	8002390 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003dfa:	f7fd feef 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2200      	movs	r2, #0
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd ff3d 	bl	8001c84 <NVIC_EncodePriority>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	2037      	movs	r0, #55	; 0x37
 8003e10:	f7fd ff0e 	bl	8001c30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8003e14:	2037      	movs	r0, #55	; 0x37
 8003e16:	f7fd feef 	bl	8001bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 24000;
 8003e1a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8003e1e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 8003e24:	230a      	movs	r3, #10
 8003e26:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480b      	ldr	r0, [pc, #44]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e2e:	f001 f9b3 	bl	8005198 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8003e32:	480a      	ldr	r0, [pc, #40]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e34:	f7fe faeb 	bl	800240e <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
 8003e38:	2120      	movs	r1, #32
 8003e3a:	4808      	ldr	r0, [pc, #32]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e3c:	f7fe faf6 	bl	800242c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8003e40:	4806      	ldr	r0, [pc, #24]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e42:	f7fe fb05 	bl	8002450 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
  LL_TIM_EnableCounter(TIM7);
 8003e46:	4805      	ldr	r0, [pc, #20]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e48:	f7fe fad2 	bl	80023f0 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <MX_TIM7_Init+0x7c>)
 8003e4e:	f7fe fb0e 	bl	800246e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM7_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40001400 	.word	0x40001400

08003e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08c      	sub	sp, #48	; 0x30
 8003e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	615a      	str	r2, [r3, #20]
 8003e78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003e88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e8c:	f7fe fa98 	bl	80023c0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003e90:	2004      	movs	r0, #4
 8003e92:	f7fe fa95 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <MX_USART1_UART_Init+0xc8>)
 8003e98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e9a:	2309      	movs	r3, #9
 8003e9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4820      	ldr	r0, [pc, #128]	; (8003f2c <MX_USART1_UART_Init+0xcc>)
 8003eac:	f000 ffc8 	bl	8004e40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <MX_USART1_UART_Init+0xd0>)
 8003eb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4619      	mov	r1, r3
 8003ebc:	481b      	ldr	r0, [pc, #108]	; (8003f2c <MX_USART1_UART_Init+0xcc>)
 8003ebe:	f000 ffbf 	bl	8004e40 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003ec2:	f7fd fe8b 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd fed9 	bl	8001c84 <NVIC_EncodePriority>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	2025      	movs	r0, #37	; 0x25
 8003ed8:	f7fd feaa 	bl	8001c30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003edc:	2025      	movs	r0, #37	; 0x25
 8003ede:	f7fd fe8b 	bl	8001bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8003ee2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003ee6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003ef4:	230c      	movs	r3, #12
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	480b      	ldr	r0, [pc, #44]	; (8003f34 <MX_USART1_UART_Init+0xd4>)
 8003f08:	f001 facc 	bl	80054a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003f0c:	4809      	ldr	r0, [pc, #36]	; (8003f34 <MX_USART1_UART_Init+0xd4>)
 8003f0e:	f7fe facc 	bl	80024aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003f12:	4808      	ldr	r0, [pc, #32]	; (8003f34 <MX_USART1_UART_Init+0xd4>)
 8003f14:	f7fe faba 	bl	800248c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableIT_TXE(USART1);
 8003f18:	4806      	ldr	r0, [pc, #24]	; (8003f34 <MX_USART1_UART_Init+0xd4>)
 8003f1a:	f7fe faea 	bl	80024f2 <LL_USART_EnableIT_TXE>
  // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END USART1_Init 2 */

}
 8003f1e:	bf00      	nop
 8003f20:	3730      	adds	r7, #48	; 0x30
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	04020002 	.word	0x04020002
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	04040004 	.word	0x04040004
 8003f34:	40013800 	.word	0x40013800

08003f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	615a      	str	r2, [r3, #20]
 8003f50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f52:	463b      	mov	r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003f60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003f64:	f7fe fa14 	bl	8002390 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003f68:	2008      	movs	r0, #8
 8003f6a:	f7fe fa29 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <MX_USART3_UART_Init+0xcc>)
 8003f70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f72:	2309      	movs	r3, #9
 8003f74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4619      	mov	r1, r3
 8003f82:	4821      	ldr	r0, [pc, #132]	; (8004008 <MX_USART3_UART_Init+0xd0>)
 8003f84:	f000 ff5c 	bl	8004e40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <MX_USART3_UART_Init+0xd4>)
 8003f8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f90:	463b      	mov	r3, r7
 8003f92:	4619      	mov	r1, r3
 8003f94:	481c      	ldr	r0, [pc, #112]	; (8004008 <MX_USART3_UART_Init+0xd0>)
 8003f96:	f000 ff53 	bl	8004e40 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003f9a:	f7fd fe1f 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fe6d 	bl	8001c84 <NVIC_EncodePriority>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	2027      	movs	r0, #39	; 0x27
 8003fb0:	f7fd fe3e 	bl	8001c30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003fb4:	2027      	movs	r0, #39	; 0x27
 8003fb6:	f7fd fe1f 	bl	8001bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8003fba:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003fbe:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003fcc:	230c      	movs	r3, #12
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4619      	mov	r1, r3
 8003fde:	480c      	ldr	r0, [pc, #48]	; (8004010 <MX_USART3_UART_Init+0xd8>)
 8003fe0:	f001 fa60 	bl	80054a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003fe4:	480a      	ldr	r0, [pc, #40]	; (8004010 <MX_USART3_UART_Init+0xd8>)
 8003fe6:	f7fe fa60 	bl	80024aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003fea:	4809      	ldr	r0, [pc, #36]	; (8004010 <MX_USART3_UART_Init+0xd8>)
 8003fec:	f7fe fa4e 	bl	800248c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  //LL_USART_EnableIT_TXE(USART3);


  LL_USART_EnableIT_TXE(USART3);
 8003ff0:	4807      	ldr	r0, [pc, #28]	; (8004010 <MX_USART3_UART_Init+0xd8>)
 8003ff2:	f7fe fa7e 	bl	80024f2 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(USART3);
 8003ff6:	4806      	ldr	r0, [pc, #24]	; (8004010 <MX_USART3_UART_Init+0xd8>)
 8003ff8:	f7fe fa6c 	bl	80024d4 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART3_Init 2 */

}
 8003ffc:	bf00      	nop
 8003ffe:	3730      	adds	r7, #48	; 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	04040004 	.word	0x04040004
 8004008:	40010c00 	.word	0x40010c00
 800400c:	04080008 	.word	0x04080008
 8004010:	40004800 	.word	0x40004800

08004014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8004018:	2001      	movs	r0, #1
 800401a:	f7fe f9a1 	bl	8002360 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800401e:	f7fd fddd 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8004022:	4603      	mov	r3, r0
 8004024:	2200      	movs	r2, #0
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd fe2b 	bl	8001c84 <NVIC_EncodePriority>
 800402e:	4603      	mov	r3, r0
 8004030:	4619      	mov	r1, r3
 8004032:	200b      	movs	r0, #11
 8004034:	f7fd fdfc 	bl	8001c30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004038:	200b      	movs	r0, #11
 800403a:	f7fd fddd 	bl	8001bf8 <__NVIC_EnableIRQ>

}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004058:	2020      	movs	r0, #32
 800405a:	f7fe f9b1 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800405e:	2010      	movs	r0, #16
 8004060:	f7fe f9ae 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004064:	2004      	movs	r0, #4
 8004066:	f7fe f9ab 	bl	80023c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800406a:	2008      	movs	r0, #8
 800406c:	f7fe f9a8 	bl	80023c0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8004070:	492e      	ldr	r1, [pc, #184]	; (800412c <MX_GPIO_Init+0xe8>)
 8004072:	482f      	ldr	r0, [pc, #188]	; (8004130 <MX_GPIO_Init+0xec>)
 8004074:	f7fe fa62 	bl	800253c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8004078:	492e      	ldr	r1, [pc, #184]	; (8004134 <MX_GPIO_Init+0xf0>)
 800407a:	482f      	ldr	r0, [pc, #188]	; (8004138 <MX_GPIO_Init+0xf4>)
 800407c:	f7fe fa5e 	bl	800253c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8004080:	492e      	ldr	r1, [pc, #184]	; (800413c <MX_GPIO_Init+0xf8>)
 8004082:	482f      	ldr	r0, [pc, #188]	; (8004140 <MX_GPIO_Init+0xfc>)
 8004084:	f7fe fa5a 	bl	800253c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8004088:	f240 4104 	movw	r1, #1028	; 0x404
 800408c:	482d      	ldr	r0, [pc, #180]	; (8004144 <MX_GPIO_Init+0x100>)
 800408e:	f7fe fa55 	bl	800253c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <MX_GPIO_Init+0xe8>)
 8004094:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004096:	2301      	movs	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800409a:	2302      	movs	r3, #2
 800409c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4822      	ldr	r0, [pc, #136]	; (8004130 <MX_GPIO_Init+0xec>)
 80040a8:	f000 feca 	bl	8004e40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <MX_GPIO_Init+0xf0>)
 80040ae:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040b0:	2301      	movs	r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040b4:	2302      	movs	r3, #2
 80040b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040bc:	1d3b      	adds	r3, r7, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	481d      	ldr	r0, [pc, #116]	; (8004138 <MX_GPIO_Init+0xf4>)
 80040c2:	f000 febd 	bl	8004e40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <MX_GPIO_Init+0x104>)
 80040c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80040ca:	2304      	movs	r3, #4
 80040cc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4819      	ldr	r0, [pc, #100]	; (8004138 <MX_GPIO_Init+0xf4>)
 80040d4:	f000 feb4 	bl	8004e40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <MX_GPIO_Init+0xf8>)
 80040da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040dc:	2301      	movs	r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040e0:	2302      	movs	r3, #2
 80040e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4814      	ldr	r0, [pc, #80]	; (8004140 <MX_GPIO_Init+0xfc>)
 80040ee:	f000 fea7 	bl	8004e40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <MX_GPIO_Init+0x108>)
 80040f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80040f6:	2308      	movs	r3, #8
 80040f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80040fa:	2301      	movs	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	4619      	mov	r1, r3
 8004102:	480d      	ldr	r0, [pc, #52]	; (8004138 <MX_GPIO_Init+0xf4>)
 8004104:	f000 fe9c 	bl	8004e40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004108:	f240 4304 	movw	r3, #1028	; 0x404
 800410c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800410e:	2301      	movs	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004112:	2302      	movs	r3, #2
 8004114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4809      	ldr	r0, [pc, #36]	; (8004144 <MX_GPIO_Init+0x100>)
 8004120:	f000 fe8e 	bl	8004e40 <LL_GPIO_Init>

}
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	04f138f9 	.word	0x04f138f9
 8004130:	40010c00 	.word	0x40010c00
 8004134:	041ac0da 	.word	0x041ac0da
 8004138:	40011000 	.word	0x40011000
 800413c:	04190019 	.word	0x04190019
 8004140:	40010800 	.word	0x40010800
 8004144:	40011400 	.word	0x40011400
 8004148:	04010001 	.word	0x04010001
 800414c:	04040004 	.word	0x04040004

08004150 <LL_TIM_ClearFlag_UPDATE>:
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f06f 0201 	mvn.w	r2, #1
 800415e:	611a      	str	r2, [r3, #16]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <LL_TIM_IsActiveFlag_UPDATE>:
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <LL_USART_IsActiveFlag_RXNE>:
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041b6:	e7fe      	b.n	80041b6 <NMI_Handler+0x4>

080041b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041bc:	e7fe      	b.n	80041bc <HardFault_Handler+0x4>

080041be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c2:	e7fe      	b.n	80041c2 <MemManage_Handler+0x4>

080041c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c8:	e7fe      	b.n	80041c8 <BusFault_Handler+0x4>

080041ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041ce:	e7fe      	b.n	80041ce <UsageFault_Handler+0x4>

080041d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_Callback();
 80041f8:	f7fe fcd8 	bl	8002bac <SysTick_Callback>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}

08004200 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART2)) //прерывание по передачи
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <USART1_IRQHandler+0x7c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d031      	beq.n	8004280 <USART1_IRQHandler+0x74>
	{
		if (bufferUart1.tx_counter > 0) //е�?ли е�?ть что передать
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <USART1_IRQHandler+0x80>)
 800421e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d025      	beq.n	8004274 <USART1_IRQHandler+0x68>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количе�?тво не переданных данных
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <USART1_IRQHandler+0x80>)
 800422a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <USART1_IRQHandler+0x80>)
 8004236:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART3,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <USART1_IRQHandler+0x80>)
 800423c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8004240:	b29b      	uxth	r3, r3
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	b291      	uxth	r1, r2
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <USART1_IRQHandler+0x80>)
 8004248:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 800424c:	461a      	mov	r2, r3
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <USART1_IRQHandler+0x80>)
 8004250:	4413      	add	r3, r2
 8004252:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004256:	b2da      	uxtb	r2, r3
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <USART1_IRQHandler+0x7c>)
 800425a:	605a      	str	r2, [r3, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <USART1_IRQHandler+0x80>)
 800425e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8004262:	b29b      	uxth	r3, r3
 8004264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004268:	d10a      	bne.n	8004280 <USART1_IRQHandler+0x74>
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <USART1_IRQHandler+0x80>)
 800426c:	2200      	movs	r2, #0
 800426e:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
	    	//LL_USART_DisableIT_TXE(USART2);
	    }
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8004272:	e005      	b.n	8004280 <USART1_IRQHandler+0x74>
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <USART1_IRQHandler+0x7c>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a03      	ldr	r2, [pc, #12]	; (8004288 <USART1_IRQHandler+0x7c>)
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	60d3      	str	r3, [r2, #12]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40013800 	.word	0x40013800
 800428c:	20000268 	.word	0x20000268

08004290 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//if ( (USART1->SR & USART_SR_RXNE) !=0 ) //Ждем по�?туплени�? данных от компьютера
	volatile uint8_t data;
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8004296:	4889      	ldr	r0, [pc, #548]	; (80044bc <USART3_IRQHandler+0x22c>)
 8004298:	f7ff ff79 	bl	800418e <LL_USART_IsActiveFlag_RXNE>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80cb 	beq.w	800443a <USART3_IRQHandler+0x1aa>
	{
	  data = (uint8_t) (USART3->DR & 0xFF);
 80042a4:	4b85      	ldr	r3, [pc, #532]	; (80044bc <USART3_IRQHandler+0x22c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	71fb      	strb	r3, [r7, #7]

	  if ( (ParsingData.IsPassedPackageLengthFlag == 1)  )
 80042ac:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <USART3_IRQHandler+0x230>)
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d149      	bne.n	800434a <USART3_IRQHandler+0xba>
	  {
		  //logDebug("PD");
		  //logDebugD("i=",ParsingData.i,0);
		  //logDebugD("Le=",ParsingData.Length,0)
		  //logDebugD("Data=",data,0);
		  if (ParsingData.i < ParsingData.Length-2)
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <USART3_IRQHandler+0x230>)
 80042b8:	88db      	ldrh	r3, [r3, #6]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	4b80      	ldr	r3, [pc, #512]	; (80044c0 <USART3_IRQHandler+0x230>)
 80042c0:	889b      	ldrh	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b02      	subs	r3, #2
 80042c6:	429a      	cmp	r2, r3
 80042c8:	da33      	bge.n	8004332 <USART3_IRQHandler+0xa2>
		  {
			  ParsingData.i++;
 80042ca:	4b7d      	ldr	r3, [pc, #500]	; (80044c0 <USART3_IRQHandler+0x230>)
 80042cc:	88db      	ldrh	r3, [r3, #6]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	4b7a      	ldr	r3, [pc, #488]	; (80044c0 <USART3_IRQHandler+0x230>)
 80042d6:	80da      	strh	r2, [r3, #6]
			  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 80042d8:	4b7a      	ldr	r3, [pc, #488]	; (80044c4 <USART3_IRQHandler+0x234>)
 80042da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80042de:	b29b      	uxth	r3, r3
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	b291      	uxth	r1, r2
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <USART3_IRQHandler+0x234>)
 80042e6:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	b2d9      	uxtb	r1, r3
 80042f0:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <USART3_IRQHandler+0x234>)
 80042f2:	5499      	strb	r1, [r3, r2]

			  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 80042f4:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <USART3_IRQHandler+0x234>)
 80042f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b64      	cmp	r3, #100	; 0x64
 80042fe:	d103      	bne.n	8004308 <USART3_IRQHandler+0x78>
 8004300:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004302:	2200      	movs	r2, #0
 8004304:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8004308:	4b6e      	ldr	r3, [pc, #440]	; (80044c4 <USART3_IRQHandler+0x234>)
 800430a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800430e:	b29b      	uxth	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	4a6b      	ldr	r2, [pc, #428]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004316:	4619      	mov	r1, r3
 8004318:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d114      	bne.n	800434a <USART3_IRQHandler+0xba>
			  {
				  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8004320:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <USART3_IRQHandler+0x234>)
 800432a:	2201      	movs	r2, #1
 800432c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004330:	e00b      	b.n	800434a <USART3_IRQHandler+0xba>
			  }
		  }
		  else
		  {
			  //logDebug("else");
			  ParsingData.i = 0;
 8004332:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <USART3_IRQHandler+0x230>)
 8004334:	2200      	movs	r2, #0
 8004336:	80da      	strh	r2, [r3, #6]
			  ParsingData.IsPassedPackageLengthFlag = 0;
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <USART3_IRQHandler+0x230>)
 800433a:	2200      	movs	r2, #0
 800433c:	705a      	strb	r2, [r3, #1]
			  ParsingData.IsPassedPackageBeginFlag = 0;
 800433e:	4b60      	ldr	r3, [pc, #384]	; (80044c0 <USART3_IRQHandler+0x230>)
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
			  ParsingData.IsDataReadyReadFromBuffer = 1;
 8004344:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <USART3_IRQHandler+0x230>)
 8004346:	2201      	movs	r2, #1
 8004348:	709a      	strb	r2, [r3, #2]
		  }
	  }
	  //
	  if ( (ParsingData.IsPassedPackageBeginFlag == 1) && (ParsingData.IsPassedPackageLengthFlag == 0) )
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <USART3_IRQHandler+0x230>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d13a      	bne.n	80043ca <USART3_IRQHandler+0x13a>
 8004354:	4b5a      	ldr	r3, [pc, #360]	; (80044c0 <USART3_IRQHandler+0x230>)
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d135      	bne.n	80043ca <USART3_IRQHandler+0x13a>
	  {
		  //logDebug("Length");
		  ParsingData.IsPassedPackageLengthFlag = 1;
 800435e:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <USART3_IRQHandler+0x230>)
 8004360:	2201      	movs	r2, #1
 8004362:	705a      	strb	r2, [r3, #1]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8004364:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004366:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800436a:	b29b      	uxth	r3, r3
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	b291      	uxth	r1, r2
 8004370:	4a54      	ldr	r2, [pc, #336]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004372:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8004376:	461a      	mov	r2, r3
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	b2d9      	uxtb	r1, r3
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <USART3_IRQHandler+0x234>)
 800437e:	5499      	strb	r1, [r3, r2]
		  ParsingData.Length = data+1+1;
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	b29b      	uxth	r3, r3
 8004386:	3302      	adds	r3, #2
 8004388:	b29a      	uxth	r2, r3
 800438a:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <USART3_IRQHandler+0x230>)
 800438c:	809a      	strh	r2, [r3, #4]

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 800438e:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004390:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d103      	bne.n	80043a2 <USART3_IRQHandler+0x112>
 800439a:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <USART3_IRQHandler+0x234>)
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 80043a2:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043b0:	4619      	mov	r1, r3
 80043b2:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d107      	bne.n	80043ca <USART3_IRQHandler+0x13a>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 80043ba:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043bc:	2200      	movs	r2, #0
 80043be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 80043c2:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }
	  //
	  if ( (data == PACKAGE_BEGIN) && (ParsingData.IsPassedPackageBeginFlag == 0) )
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2bfe      	cmp	r3, #254	; 0xfe
 80043d0:	d133      	bne.n	800443a <USART3_IRQHandler+0x1aa>
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <USART3_IRQHandler+0x230>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d12e      	bne.n	800443a <USART3_IRQHandler+0x1aa>
	  {
		  //logDebug("PB");
		  ParsingData.IsPassedPackageBeginFlag = 1;
 80043dc:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <USART3_IRQHandler+0x230>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	b291      	uxth	r1, r2
 80043ee:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043f0:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	b2d9      	uxtb	r1, r3
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <USART3_IRQHandler+0x234>)
 80043fc:	5499      	strb	r1, [r3, r2]
		  //bufferUart2.rx_buffer[bufferUart1.rx_wr_index++] = data; //BUG STUCK

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 80043fe:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004400:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d103      	bne.n	8004412 <USART3_IRQHandler+0x182>
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <USART3_IRQHandler+0x234>)
 800440c:	2200      	movs	r2, #0
 800440e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004414:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004418:	b29b      	uxth	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004420:	4619      	mov	r1, r3
 8004422:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d107      	bne.n	800443a <USART3_IRQHandler+0x1aa>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <USART3_IRQHandler+0x234>)
 800442c:	2200      	movs	r2, #0
 800442e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004434:	2201      	movs	r2, #1
 8004436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }

	}

	if ( (USART3->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <USART3_IRQHandler+0x22c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d036      	beq.n	80044b4 <USART3_IRQHandler+0x224>
	{
		vard2++;
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <USART3_IRQHandler+0x238>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <USART3_IRQHandler+0x238>)
 800444e:	6013      	str	r3, [r2, #0]
		if (bufferUart2.tx_counter > 0) //е�?ли е�?ть что передать
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004452:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d025      	beq.n	80044a8 <USART3_IRQHandler+0x218>
	    {
	      --bufferUart2.tx_counter; // уменьшаем количе�?тво не переданных данных
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <USART3_IRQHandler+0x234>)
 800445e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <USART3_IRQHandler+0x234>)
 800446a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART3->DR = bufferUart2.tx_buffer[bufferUart2.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004470:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8004474:	b29b      	uxth	r3, r3
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	b291      	uxth	r1, r2
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <USART3_IRQHandler+0x234>)
 800447c:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8004480:	461a      	mov	r2, r3
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004484:	4413      	add	r3, r2
 8004486:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800448a:	b2da      	uxtb	r2, r3
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <USART3_IRQHandler+0x22c>)
 800448e:	605a      	str	r2, [r3, #4]
	      if (bufferUart2.tx_rd_index == TX_BUFFER_SIZE) bufferUart2.tx_rd_index=0; //идем по кругу
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <USART3_IRQHandler+0x234>)
 8004492:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8004496:	b29b      	uxth	r3, r3
 8004498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800449c:	d10a      	bne.n	80044b4 <USART3_IRQHandler+0x224>
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <USART3_IRQHandler+0x234>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044a6:	e005      	b.n	80044b4 <USART3_IRQHandler+0x224>
	    	USART3->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <USART3_IRQHandler+0x22c>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a03      	ldr	r2, [pc, #12]	; (80044bc <USART3_IRQHandler+0x22c>)
 80044ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b2:	60d3      	str	r3, [r2, #12]
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40004800 	.word	0x40004800
 80044c0:	20000b28 	.word	0x20000b28
 80044c4:	200006c4 	.word	0x200006c4
 80044c8:	20000264 	.word	0x20000264

080044cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 80044d0:	4806      	ldr	r0, [pc, #24]	; (80044ec <TIM7_IRQHandler+0x20>)
 80044d2:	f7ff fe4a 	bl	800416a <LL_TIM_IsActiveFlag_UPDATE>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <TIM7_IRQHandler+0x1a>
	  {
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80044dc:	4803      	ldr	r0, [pc, #12]	; (80044ec <TIM7_IRQHandler+0x20>)
 80044de:	f7ff fe37 	bl	8004150 <LL_TIM_ClearFlag_UPDATE>
		TIM7_Callback();
 80044e2:	f7ff f871 	bl	80035c8 <TIM7_Callback>
	  }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40001400 	.word	0x40001400

080044f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
#endif /* STM32F105xC */

#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	603b      	str	r3, [r7, #0]
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <SystemCoreClockUpdate+0xcc>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d011      	beq.n	8004546 <SystemCoreClockUpdate+0x4a>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d836      	bhi.n	8004596 <SystemCoreClockUpdate+0x9a>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <SystemCoreClockUpdate+0x3a>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d004      	beq.n	800453e <SystemCoreClockUpdate+0x42>
 8004534:	e02f      	b.n	8004596 <SystemCoreClockUpdate+0x9a>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 8004538:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <SystemCoreClockUpdate+0xd4>)
 800453a:	601a      	str	r2, [r3, #0]
      break;
 800453c:	e02f      	b.n	800459e <SystemCoreClockUpdate+0xa2>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <SystemCoreClockUpdate+0xd4>)
 8004542:	601a      	str	r2, [r3, #0]
      break;
 8004544:	e02b      	b.n	800459e <SystemCoreClockUpdate+0xa2>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <SystemCoreClockUpdate+0xcc>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800454e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <SystemCoreClockUpdate+0xcc>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004558:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	0c9b      	lsrs	r3, r3, #18
 800455e:	3302      	adds	r3, #2
 8004560:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <SystemCoreClockUpdate+0xd8>)
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 8004572:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8004574:	e013      	b.n	800459e <SystemCoreClockUpdate+0xa2>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <SystemCoreClockUpdate+0xcc>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3301      	adds	r3, #1
 8004580:	603b      	str	r3, [r7, #0]
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <SystemCoreClockUpdate+0xd4>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 8004592:	6013      	str	r3, [r2, #0]
      break;
 8004594:	e003      	b.n	800459e <SystemCoreClockUpdate+0xa2>

    default:
      SystemCoreClock = HSI_VALUE;
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 8004598:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <SystemCoreClockUpdate+0xd4>)
 800459a:	601a      	str	r2, [r3, #0]
      break;
 800459c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <SystemCoreClockUpdate+0xcc>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <SystemCoreClockUpdate+0xdc>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <SystemCoreClockUpdate+0xd0>)
 80045ba:	6013      	str	r3, [r2, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	2000023c 	.word	0x2000023c
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	003d0900 	.word	0x003d0900
 80045d8:	08006120 	.word	0x08006120

080045dc <LL_USART_IsActiveFlag_TXE>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b80      	cmp	r3, #128	; 0x80
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <LL_USART_EnableIT_TXE>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60da      	str	r2, [r3, #12]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	605a      	str	r2, [r3, #4]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <putCharInBufferUart2>:
#endif
}


void putCharInBufferUart2(uint8_t c) //вывод данных
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	//while (bufferUart2.tx_counter >= TX_BUFFER_SIZE); //если буфер переполнен, ждем
	LL_USART_DisableIT_TXE(USART3); //запрещаем прерывание, чтобы оно не мешало менять переменную
 8004662:	481f      	ldr	r0, [pc, #124]	; (80046e0 <putCharInBufferUart2+0x88>)
 8004664:	f7ff ffdb 	bl	800461e <LL_USART_DisableIT_TXE>
	bufferUart2.tx_buffer[bufferUart2.tx_wr_index++]=c; //то кладем данные в буфер
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <putCharInBufferUart2+0x8c>)
 800466a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800466e:	b29b      	uxth	r3, r3
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	b291      	uxth	r1, r2
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <putCharInBufferUart2+0x8c>)
 8004676:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 800467a:	461a      	mov	r2, r3
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <putCharInBufferUart2+0x8c>)
 800467e:	4413      	add	r3, r2
 8004680:	79fa      	ldrb	r2, [r7, #7]
 8004682:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart2.tx_wr_index == TX_BUFFER_SIZE)
 8004686:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <putCharInBufferUart2+0x8c>)
 8004688:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800468c:	b29b      	uxth	r3, r3
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004692:	d103      	bne.n	800469c <putCharInBufferUart2+0x44>
		bufferUart2.tx_wr_index=0; //идем по кругу
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <putCharInBufferUart2+0x8c>)
 8004696:	2200      	movs	r2, #0
 8004698:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart2.tx_counter; //увеличиваем счетчик количества данных в буфере
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <putCharInBufferUart2+0x8c>)
 800469e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <putCharInBufferUart2+0x8c>)
 80046aa:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart2.tx_buffer_overflow < bufferUart2.tx_counter)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <putCharInBufferUart2+0x8c>)
 80046b0:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <putCharInBufferUart2+0x8c>)
 80046b8:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80046bc:	b29b      	uxth	r3, r3
 80046be:	429a      	cmp	r2, r3
 80046c0:	d206      	bcs.n	80046d0 <putCharInBufferUart2+0x78>
			bufferUart2.tx_buffer_overflow = bufferUart2.tx_counter;
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <putCharInBufferUart2+0x8c>)
 80046c4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <putCharInBufferUart2+0x8c>)
 80046cc:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	LL_USART_EnableIT_TXE(USART3); //разрешаем прерывание
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <putCharInBufferUart2+0x88>)
 80046d2:	f7ff ff95 	bl	8004600 <LL_USART_EnableIT_TXE>

}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40004800 	.word	0x40004800
 80046e4:	200006c4 	.word	0x200006c4

080046e8 <putDataInBufferUart2>:
  while (*s != 0)
	  putCharInBufferUart2(*s++);
}

void putDataInBufferUart2(volatile char *s, uint8_t lenght)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
    for (i = 0; i < lenght; i++ )
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e00a      	b.n	8004710 <putDataInBufferUart2+0x28>
    {
	   putCharInBufferUart2(s[i]);
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ffa7 	bl	8004658 <putCharInBufferUart2>
    for (i = 0; i < lenght; i++ )
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	3301      	adds	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3f0      	bcc.n	80046fa <putDataInBufferUart2+0x12>
    }
    putCharInBufferUart2('\n');
 8004718:	200a      	movs	r0, #10
 800471a:	f7ff ff9d 	bl	8004658 <putCharInBufferUart2>
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <putCharDirectToUart2>:



void putCharDirectToUart2(uint8_t c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3));
 8004732:	bf00      	nop
 8004734:	4808      	ldr	r0, [pc, #32]	; (8004758 <putCharDirectToUart2+0x30>)
 8004736:	f7ff ff51 	bl	80045dc <LL_USART_IsActiveFlag_TXE>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f9      	beq.n	8004734 <putCharDirectToUart2+0xc>
	LL_USART_TransmitData8(USART3, c);
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	4619      	mov	r1, r3
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <putCharDirectToUart2+0x30>)
 8004746:	f7ff ff79 	bl	800463c <LL_USART_TransmitData8>
	c++;
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	3301      	adds	r3, #1
 800474e:	71fb      	strb	r3, [r7, #7]
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40004800 	.word	0x40004800

0800475c <getCharFromBufferUART2>:
  while (*s != 0)
	  putCharDirectToUart2(*s++);
}

uint8_t getCharFromBufferUART2(void) //прием данных
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
	uint8_t data; //переменная для данных
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 8004762:	bf00      	nop
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <getCharFromBufferUART2+0x80>)
 8004766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02d      	beq.n	80047cc <getCharFromBufferUART2+0x70>
	data=bufferUart2.rx_buffer[bufferUart2.rx_rd_index++]; //берем данные из буфера
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <getCharFromBufferUART2+0x80>)
 8004772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004776:	b29b      	uxth	r3, r3
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	b291      	uxth	r1, r2
 800477c:	4a17      	ldr	r2, [pc, #92]	; (80047dc <getCharFromBufferUART2+0x80>)
 800477e:	f8a2 1066 	strh.w	r1, [r2, #102]	; 0x66
 8004782:	461a      	mov	r2, r3
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <getCharFromBufferUART2+0x80>)
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	71fb      	strb	r3, [r7, #7]
	if (bufferUart2.rx_rd_index == RX_BUFFER_SIZE) bufferUart2.rx_rd_index=0; //идем по кругу
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <getCharFromBufferUART2+0x80>)
 800478c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d103      	bne.n	800479e <getCharFromBufferUART2+0x42>
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <getCharFromBufferUART2+0x80>)
 8004798:	2200      	movs	r2, #0
 800479a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	USART3->CR1 &= ~USART_CR1_RXNEIE;  // Interrupt Disable
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <getCharFromBufferUART2+0x84>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <getCharFromBufferUART2+0x84>)
 80047a4:	f023 0320 	bic.w	r3, r3, #32
 80047a8:	60d3      	str	r3, [r2, #12]
	--bufferUart2.rx_counter; //чтобы оно не помешало изменить переменную
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <getCharFromBufferUART2+0x80>)
 80047ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <getCharFromBufferUART2+0x80>)
 80047b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	USART3->CR1 |= USART_CR1_RXNEIE;// Interrupt enable
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <getCharFromBufferUART2+0x84>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <getCharFromBufferUART2+0x84>)
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	60d3      	str	r3, [r2, #12]
	return data;
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	e001      	b.n	80047d0 <getCharFromBufferUART2+0x74>
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop

}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200006c4 	.word	0x200006c4
 80047e0:	40004800 	.word	0x40004800

080047e4 <printToBufferUART1>:

//UART3===========================================================


void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <printToBufferUART1+0x110>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a40      	ldr	r2, [pc, #256]	; (80048f4 <printToBufferUART1+0x110>)
 80047f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f6:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80047f8:	e037      	b.n	800486a <printToBufferUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	4a3d      	ldr	r2, [pc, #244]	; (80048f8 <printToBufferUART1+0x114>)
 8004802:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8004806:	b292      	uxth	r2, r2
 8004808:	1c51      	adds	r1, r2, #1
 800480a:	b288      	uxth	r0, r1
 800480c:	493a      	ldr	r1, [pc, #232]	; (80048f8 <printToBufferUART1+0x114>)
 800480e:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8004812:	4611      	mov	r1, r2
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <printToBufferUART1+0x114>)
 800481a:	440b      	add	r3, r1
 800481c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <printToBufferUART1+0x114>)
 8004822:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004826:	b29b      	uxth	r3, r3
 8004828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800482c:	d103      	bne.n	8004836 <printToBufferUART1+0x52>
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <printToBufferUART1+0x114>)
 8004830:	2200      	movs	r2, #0
 8004832:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <printToBufferUART1+0x114>)
 8004838:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800483c:	b29b      	uxth	r3, r3
 800483e:	3301      	adds	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <printToBufferUART1+0x114>)
 8004844:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004848:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <printToBufferUART1+0x114>)
 800484a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800484e:	b29a      	uxth	r2, r3
 8004850:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <printToBufferUART1+0x114>)
 8004852:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004856:	b29b      	uxth	r3, r3
 8004858:	429a      	cmp	r2, r3
 800485a:	d206      	bcs.n	800486a <printToBufferUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800485c:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <printToBufferUART1+0x114>)
 800485e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004862:	b29a      	uxth	r2, r3
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <printToBufferUART1+0x114>)
 8004866:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1c2      	bne.n	80047fa <printToBufferUART1+0x16>
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <printToBufferUART1+0x114>)
 8004876:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800487a:	b29b      	uxth	r3, r3
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	b291      	uxth	r1, r2
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <printToBufferUART1+0x114>)
 8004882:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8004886:	461a      	mov	r2, r3
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <printToBufferUART1+0x114>)
 800488a:	4413      	add	r3, r2
 800488c:	220a      	movs	r2, #10
 800488e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <printToBufferUART1+0x114>)
 8004894:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004898:	b29b      	uxth	r3, r3
 800489a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800489e:	d103      	bne.n	80048a8 <printToBufferUART1+0xc4>
 80048a0:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <printToBufferUART1+0x114>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <printToBufferUART1+0x114>)
 80048aa:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <printToBufferUART1+0x114>)
 80048b6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <printToBufferUART1+0x114>)
 80048bc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <printToBufferUART1+0x114>)
 80048c4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d206      	bcs.n	80048dc <printToBufferUART1+0xf8>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <printToBufferUART1+0x114>)
 80048d0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <printToBufferUART1+0x114>)
 80048d8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <printToBufferUART1+0x110>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <printToBufferUART1+0x110>)
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	60d3      	str	r3, [r2, #12]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40013800 	.word	0x40013800
 80048f8:	20000268 	.word	0x20000268

080048fc <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <printToBufferWithoutEndUART1+0xa8>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <printToBufferWithoutEndUART1+0xa8>)
 800490a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490e:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 8004910:	e037      	b.n	8004982 <printToBufferWithoutEndUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 800491a:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 800491e:	b292      	uxth	r2, r2
 8004920:	1c51      	adds	r1, r2, #1
 8004922:	b288      	uxth	r0, r1
 8004924:	4920      	ldr	r1, [pc, #128]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004926:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 800492a:	4611      	mov	r1, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004932:	440b      	add	r3, r1
 8004934:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 800493a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800493e:	b29b      	uxth	r3, r3
 8004940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004944:	d103      	bne.n	800494e <printToBufferWithoutEndUART1+0x52>
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004948:	2200      	movs	r2, #0
 800494a:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004950:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004954:	b29b      	uxth	r3, r3
 8004956:	3301      	adds	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 800495c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004962:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004966:	b29a      	uxth	r2, r3
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 800496a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800496e:	b29b      	uxth	r3, r3
 8004970:	429a      	cmp	r2, r3
 8004972:	d206      	bcs.n	8004982 <printToBufferWithoutEndUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 8004976:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800497a:	b29a      	uxth	r2, r3
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <printToBufferWithoutEndUART1+0xac>)
 800497e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1c2      	bne.n	8004912 <printToBufferWithoutEndUART1+0x16>
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <printToBufferWithoutEndUART1+0xa8>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <printToBufferWithoutEndUART1+0xa8>)
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	60d3      	str	r3, [r2, #12]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40013800 	.word	0x40013800
 80049a8:	20000268 	.word	0x20000268

080049ac <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	71fb      	strb	r3, [r7, #7]
	char *str1;
	if (koma == 0)
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <printToBufferUART1D+0x22>
		str1 = itoa(value);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc fdb1 	bl	800152c <itoa>
 80049ca:	6178      	str	r0, [r7, #20]
 80049cc:	e007      	b.n	80049de <printToBufferUART1D+0x32>
	else
		str1 = itoa_koma(value,koma);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	79fa      	ldrb	r2, [r7, #7]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc fe1e 	bl	8001618 <itoa_koma>
 80049dc:	6178      	str	r0, [r7, #20]

	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <printToBufferUART1D+0x1b0>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a5e      	ldr	r2, [pc, #376]	; (8004b5c <printToBufferUART1D+0x1b0>)
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80049ea:	e037      	b.n	8004a5c <printToBufferUART1D+0xb0>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	60fa      	str	r2, [r7, #12]
 80049f2:	4a5b      	ldr	r2, [pc, #364]	; (8004b60 <printToBufferUART1D+0x1b4>)
 80049f4:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80049f8:	b292      	uxth	r2, r2
 80049fa:	1c51      	adds	r1, r2, #1
 80049fc:	b288      	uxth	r0, r1
 80049fe:	4958      	ldr	r1, [pc, #352]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a00:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8004a04:	4611      	mov	r1, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b55      	ldr	r3, [pc, #340]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004a12:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a14:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1e:	d103      	bne.n	8004a28 <printToBufferUART1D+0x7c>
 8004a20:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004a28:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a2a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a36:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004a3a:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a3c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a44:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d206      	bcs.n	8004a5c <printToBufferUART1D+0xb0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a50:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	4b42      	ldr	r3, [pc, #264]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a58:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1c2      	bne.n	80049ec <printToBufferUART1D+0x40>
		#endif

	}

	while (*str1 != 0)
 8004a66:	e036      	b.n	8004ad6 <printToBufferUART1D+0x12a>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	617a      	str	r2, [r7, #20]
 8004a6e:	4a3c      	ldr	r2, [pc, #240]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a70:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8004a74:	b292      	uxth	r2, r2
 8004a76:	1c51      	adds	r1, r2, #1
 8004a78:	b288      	uxth	r0, r1
 8004a7a:	4939      	ldr	r1, [pc, #228]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a7c:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8004a80:	4611      	mov	r1, r2
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a86:	440b      	add	r3, r1
 8004a88:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a8e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a98:	d103      	bne.n	8004aa2 <printToBufferUART1D+0xf6>
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004aa4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	4b2c      	ldr	r3, [pc, #176]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004ab0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004ab6:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004abe:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d206      	bcs.n	8004ad6 <printToBufferUART1D+0x12a>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004aca:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004ad2:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str1 != 0)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1c4      	bne.n	8004a68 <printToBufferUART1D+0xbc>
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004ae0:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	b291      	uxth	r1, r2
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004aec:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004af4:	4413      	add	r3, r2
 8004af6:	220a      	movs	r2, #10
 8004af8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004afe:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	d103      	bne.n	8004b12 <printToBufferUART1D+0x166>
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004b12:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b14:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b20:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b26:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b2e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d206      	bcs.n	8004b46 <printToBufferUART1D+0x19a>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b3a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <printToBufferUART1D+0x1b4>)
 8004b42:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <printToBufferUART1D+0x1b0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <printToBufferUART1D+0x1b0>)
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b50:	60d3      	str	r3, [r2, #12]
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	20000268 	.word	0x20000268

08004b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b66:	490d      	ldr	r1, [pc, #52]	; (8004b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b6c:	e002      	b.n	8004b74 <LoopCopyDataInit>

08004b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b72:	3304      	adds	r3, #4

08004b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b78:	d3f9      	bcc.n	8004b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b80:	e001      	b.n	8004b86 <LoopFillZerobss>

08004b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b84:	3204      	adds	r2, #4

08004b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b88:	d3fb      	bcc.n	8004b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b8a:	f7ff fcb1 	bl	80044f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b8e:	f000 fd35 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b92:	f7fe fdd9 	bl	8003748 <main>
  bx lr
 8004b96:	4770      	bx	lr
  ldr r0, =_sdata
 8004b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b9c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004ba0:	08006140 	.word	0x08006140
  ldr r2, =_sbss
 8004ba4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004ba8:	20000fd0 	.word	0x20000fd0

08004bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bac:	e7fe      	b.n	8004bac <ADC1_IRQHandler>

08004bae <LL_ADC_REG_SetSequencerLength>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_IsEnabled>:
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ffe4 	bl	8004bd2 <LL_ADC_IsEnabled>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d112      	bne.n	8004c36 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	e001      	b.n	8004c3a <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ffbd 	bl	8004bd2 <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d131      	bne.n	8004cc2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	430b      	orrs	r3, r1
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e008      	b.n	8004c92 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004c9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	6811      	ldr	r1, [r2, #0]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	6912      	ldr	r2, [r2, #16]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff77 	bl	8004bae <LL_ADC_REG_SetSequencerLength>
 8004cc0:	e001      	b.n	8004cc6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <LL_GPIO_SetPinMode>:
{
 8004cd0:	b490      	push	{r4, r7}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0e1b      	lsrs	r3, r3, #24
 8004ce4:	4413      	add	r3, r2
 8004ce6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	613b      	str	r3, [r7, #16]
  return result;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	210f      	movs	r1, #15
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	401a      	ands	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	61bb      	str	r3, [r7, #24]
  return result;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	6023      	str	r3, [r4, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc90      	pop	{r4, r7}
 8004d32:	4770      	bx	lr

08004d34 <LL_GPIO_SetPinSpeed>:
{
 8004d34:	b490      	push	{r4, r7}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	0e1b      	lsrs	r3, r3, #24
 8004d48:	4413      	add	r3, r2
 8004d4a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	613b      	str	r3, [r7, #16]
  return result;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	2103      	movs	r1, #3
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	401a      	ands	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	61bb      	str	r3, [r7, #24]
  return result;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	6023      	str	r3, [r4, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc90      	pop	{r4, r7}
 8004d96:	4770      	bx	lr

08004d98 <LL_GPIO_SetPinOutputType>:
{
 8004d98:	b490      	push	{r4, r7}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	4413      	add	r3, r2
 8004dae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	fa93 f3a3 	rbit	r3, r3
 8004dbc:	613b      	str	r3, [r7, #16]
  return result;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	2104      	movs	r1, #4
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	61bb      	str	r3, [r7, #24]
  return result;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	6023      	str	r3, [r4, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc90      	pop	{r4, r7}
 8004dfa:	4770      	bx	lr

08004dfc <LL_GPIO_SetPinPull>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	613b      	str	r3, [r7, #16]
  return result;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	408b      	lsls	r3, r1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	60da      	str	r2, [r3, #12]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	60fb      	str	r3, [r7, #12]
  return result;
 8004e60:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004e6a:	e044      	b.n	8004ef6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	409a      	lsls	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d03a      	beq.n	8004ef0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	d806      	bhi.n	8004e8e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004e80:	f240 1201 	movw	r2, #257	; 0x101
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e008      	b.n	8004ea0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3b08      	subs	r3, #8
 8004e92:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e9e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d106      	bne.n	8004eb6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	461a      	mov	r2, r3
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ffa3 	bl	8004dfc <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff ff06 	bl	8004cd0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <LL_GPIO_Init+0x94>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d10d      	bne.n	8004ef0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff29 	bl	8004d34 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff54 	bl	8004d98 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1b4      	bne.n	8004e6c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <LL_RCC_GetSysClkSource>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <LL_RCC_GetSysClkSource+0x14>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	40021000 	.word	0x40021000

08004f24 <LL_RCC_GetAHBPrescaler>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <LL_RCC_GetAHBPrescaler+0x14>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40021000 	.word	0x40021000

08004f3c <LL_RCC_GetAPB1Prescaler>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000

08004f54 <LL_RCC_GetAPB2Prescaler>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <LL_RCC_GetAPB2Prescaler+0x14>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40021000 	.word	0x40021000

08004f6c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <LL_RCC_PLL_GetMainSource+0x14>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40021000 	.word	0x40021000

08004f84 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	40021000 	.word	0x40021000

08004f9c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <LL_RCC_PLL_GetPrediv+0x14>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004fbc:	f000 f820 	bl	8005000 <RCC_GetSystemClockFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f83e 	bl	800504c <RCC_GetHCLKClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f84c 	bl	8005078 <RCC_GetPCLK1ClockFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f858 	bl	80050a0 <RCC_GetPCLK2ClockFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800500a:	f7ff ff7f 	bl	8004f0c <LL_RCC_GetSysClkSource>
 800500e:	4603      	mov	r3, r0
 8005010:	2b08      	cmp	r3, #8
 8005012:	d00c      	beq.n	800502e <RCC_GetSystemClockFreq+0x2e>
 8005014:	2b08      	cmp	r3, #8
 8005016:	d80e      	bhi.n	8005036 <RCC_GetSystemClockFreq+0x36>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <RCC_GetSystemClockFreq+0x22>
 800501c:	2b04      	cmp	r3, #4
 800501e:	d003      	beq.n	8005028 <RCC_GetSystemClockFreq+0x28>
 8005020:	e009      	b.n	8005036 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <RCC_GetSystemClockFreq+0x48>)
 8005024:	607b      	str	r3, [r7, #4]
      break;
 8005026:	e009      	b.n	800503c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <RCC_GetSystemClockFreq+0x48>)
 800502a:	607b      	str	r3, [r7, #4]
      break;
 800502c:	e006      	b.n	800503c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800502e:	f000 f84b 	bl	80050c8 <RCC_PLL_GetFreqDomain_SYS>
 8005032:	6078      	str	r0, [r7, #4]
      break;
 8005034:	e002      	b.n	800503c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <RCC_GetSystemClockFreq+0x48>)
 8005038:	607b      	str	r3, [r7, #4]
      break;
 800503a:	bf00      	nop
  }

  return frequency;
 800503c:	687b      	ldr	r3, [r7, #4]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	007a1200 	.word	0x007a1200

0800504c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005054:	f7ff ff66 	bl	8004f24 <LL_RCC_GetAHBPrescaler>
 8005058:	4603      	mov	r3, r0
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <RCC_GetHCLKClockFreq+0x28>)
 8005062:	5cd3      	ldrb	r3, [r2, r3]
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	40d3      	lsrs	r3, r2
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	08006120 	.word	0x08006120

08005078 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005080:	f7ff ff5c 	bl	8004f3c <LL_RCC_GetAPB1Prescaler>
 8005084:	4603      	mov	r3, r0
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	4a04      	ldr	r2, [pc, #16]	; (800509c <RCC_GetPCLK1ClockFreq+0x24>)
 800508a:	5cd3      	ldrb	r3, [r2, r3]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	40d3      	lsrs	r3, r2
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	08006130 	.word	0x08006130

080050a0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80050a8:	f7ff ff54 	bl	8004f54 <LL_RCC_GetAPB2Prescaler>
 80050ac:	4603      	mov	r3, r0
 80050ae:	0adb      	lsrs	r3, r3, #11
 80050b0:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <RCC_GetPCLK2ClockFreq+0x24>)
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	40d3      	lsrs	r3, r2
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	08006130 	.word	0x08006130

080050c8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	2300      	movs	r3, #0
 80050d4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80050d6:	f7ff ff49 	bl	8004f6c <LL_RCC_PLL_GetMainSource>
 80050da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <RCC_PLL_GetFreqDomain_SYS+0x24>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d003      	beq.n	80050f2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80050ea:	e00b      	b.n	8005104 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80050ee:	607b      	str	r3, [r7, #4]
      break;
 80050f0:	e00b      	b.n	800510a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80050f2:	f7ff ff53 	bl	8004f9c <LL_RCC_PLL_GetPrediv>
 80050f6:	4603      	mov	r3, r0
 80050f8:	3301      	adds	r3, #1
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	607b      	str	r3, [r7, #4]
      break;
 8005102:	e002      	b.n	800510a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005106:	607b      	str	r3, [r7, #4]
      break;
 8005108:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800510a:	f7ff ff3b 	bl	8004f84 <LL_RCC_PLL_GetMultiplicator>
 800510e:	4603      	mov	r3, r0
 8005110:	0c9b      	lsrs	r3, r3, #18
 8005112:	3302      	adds	r3, #2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	fb02 f303 	mul.w	r3, r2, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	003d0900 	.word	0x003d0900
 8005128:	007a1200 	.word	0x007a1200

0800512c <LL_TIM_SetPrescaler>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <LL_TIM_SetAutoReload>:
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <LL_TIM_SetRepetitionCounter>:
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	615a      	str	r2, [r3, #20]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <LL_TIM_Init+0x108>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <LL_TIM_Init+0x38>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d00b      	beq.n	80051d0 <LL_TIM_Init+0x38>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <LL_TIM_Init+0x10c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <LL_TIM_Init+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a39      	ldr	r2, [pc, #228]	; (80052a8 <LL_TIM_Init+0x110>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <LL_TIM_Init+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a38      	ldr	r2, [pc, #224]	; (80052ac <LL_TIM_Init+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d106      	bne.n	80051de <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <LL_TIM_Init+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d027      	beq.n	8005236 <LL_TIM_Init+0x9e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d023      	beq.n	8005236 <LL_TIM_Init+0x9e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <LL_TIM_Init+0x10c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01f      	beq.n	8005236 <LL_TIM_Init+0x9e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <LL_TIM_Init+0x110>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01b      	beq.n	8005236 <LL_TIM_Init+0x9e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <LL_TIM_Init+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d017      	beq.n	8005236 <LL_TIM_Init+0x9e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <LL_TIM_Init+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <LL_TIM_Init+0x9e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a28      	ldr	r2, [pc, #160]	; (80052b4 <LL_TIM_Init+0x11c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00f      	beq.n	8005236 <LL_TIM_Init+0x9e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a27      	ldr	r2, [pc, #156]	; (80052b8 <LL_TIM_Init+0x120>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00b      	beq.n	8005236 <LL_TIM_Init+0x9e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a26      	ldr	r2, [pc, #152]	; (80052bc <LL_TIM_Init+0x124>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <LL_TIM_Init+0x9e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <LL_TIM_Init+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <LL_TIM_Init+0x9e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <LL_TIM_Init+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d106      	bne.n	8005244 <LL_TIM_Init+0xac>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff78 	bl	8005146 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff65 	bl	800512c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <LL_TIM_Init+0x108>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <LL_TIM_Init+0xea>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <LL_TIM_Init+0x124>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <LL_TIM_Init+0xea>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <LL_TIM_Init+0x128>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <LL_TIM_Init+0xea>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <LL_TIM_Init+0x12c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d105      	bne.n	800528e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ff69 	bl	8005160 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ff73 	bl	800517a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40001800 	.word	0x40001800
 80052b4:	40001c00 	.word	0x40001c00
 80052b8:	40002000 	.word	0x40002000
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <LL_USART_IsEnabled>:
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_USART_SetStopBitsLength>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <LL_USART_SetHWFlowCtrl>:
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	615a      	str	r2, [r3, #20]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
	...

08005338 <LL_USART_SetBaudRate>:
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534c:	d152      	bne.n	80053f4 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009a      	lsls	r2, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	4a4f      	ldr	r2, [pc, #316]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	b29b      	uxth	r3, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	b299      	uxth	r1, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009a      	lsls	r2, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 8005386:	fba3 0302 	umull	r0, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	3332      	adds	r3, #50	; 0x32
 8005398:	4a41      	ldr	r2, [pc, #260]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	440b      	add	r3, r1
 80053ae:	b299      	uxth	r1, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009a      	lsls	r2, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	; 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a31      	ldr	r2, [pc, #196]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	440b      	add	r3, r1
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	609a      	str	r2, [r3, #8]
}
 80053f2:	e04f      	b.n	8005494 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	b29b      	uxth	r3, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	b299      	uxth	r1, r3
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009a      	lsls	r2, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	fbb2 f2f3 	udiv	r2, r2, r3
 800542a:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 800542c:	fba3 0302 	umull	r0, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	2064      	movs	r0, #100	; 0x64
 8005434:	fb00 f303 	mul.w	r3, r0, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	3332      	adds	r3, #50	; 0x32
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	b29b      	uxth	r3, r3
 8005448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800544c:	b29b      	uxth	r3, r3
 800544e:	440b      	add	r3, r1
 8005450:	b299      	uxth	r1, r3
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009a      	lsls	r2, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	fbb2 f2f3 	udiv	r2, r2, r3
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 8005468:	fba3 0302 	umull	r0, r3, r3, r2
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	2064      	movs	r0, #100	; 0x64
 8005470:	fb00 f303 	mul.w	r3, r0, r3
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	3332      	adds	r3, #50	; 0x32
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <LL_USART_SetBaudRate+0x168>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	b29b      	uxth	r3, r3
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	b29b      	uxth	r3, r3
 800548a:	440b      	add	r3, r1
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	51eb851f 	.word	0x51eb851f

080054a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ff06 	bl	80052c8 <LL_USART_IsEnabled>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d157      	bne.n	8005572 <LL_USART_Init+0xce>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054ca:	f023 030c 	bic.w	r3, r3, #12
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	6851      	ldr	r1, [r2, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	68d2      	ldr	r2, [r2, #12]
 80054d6:	4311      	orrs	r1, r2
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	6912      	ldr	r2, [r2, #16]
 80054dc:	4311      	orrs	r1, r2
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	6992      	ldr	r2, [r2, #24]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fefc 	bl	80052ee <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff08 	bl	8005312 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005502:	f107 0308 	add.w	r3, r7, #8
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fd54 	bl	8004fb4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1b      	ldr	r2, [pc, #108]	; (800557c <LL_USART_Init+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d102      	bne.n	800551a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e01a      	b.n	8005550 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <LL_USART_Init+0xdc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d102      	bne.n	8005528 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e013      	b.n	8005550 <LL_USART_Init+0xac>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <LL_USART_Init+0xe0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d102      	bne.n	8005536 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e00c      	b.n	8005550 <LL_USART_Init+0xac>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a13      	ldr	r2, [pc, #76]	; (8005588 <LL_USART_Init+0xe4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d102      	bne.n	8005544 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e005      	b.n	8005550 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a11      	ldr	r2, [pc, #68]	; (800558c <LL_USART_Init+0xe8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fee3 	bl	8005338 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005572:	7ffb      	ldrb	r3, [r7, #31]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40013800 	.word	0x40013800
 8005580:	40004400 	.word	0x40004400
 8005584:	40004800 	.word	0x40004800
 8005588:	40004c00 	.word	0x40004c00
 800558c:	40005000 	.word	0x40005000

08005590 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <LL_InitTick+0x30>)
 80055a4:	3b01      	subs	r3, #1
 80055a6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <LL_InitTick+0x30>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ae:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <LL_InitTick+0x30>)
 80055b0:	2205      	movs	r2, #5
 80055b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000e010 	.word	0xe000e010

080055c4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80055cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ffdd 	bl	8005590 <LL_InitTick>
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <LL_SetSystemCoreClock+0x18>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	2000023c 	.word	0x2000023c

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	2600      	movs	r6, #0
 8005600:	4d0c      	ldr	r5, [pc, #48]	; (8005634 <__libc_init_array+0x38>)
 8005602:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	f000 f828 	bl	8005660 <_init>
 8005610:	2600      	movs	r6, #0
 8005612:	4d0a      	ldr	r5, [pc, #40]	; (800563c <__libc_init_array+0x40>)
 8005614:	4c0a      	ldr	r4, [pc, #40]	; (8005640 <__libc_init_array+0x44>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	08006138 	.word	0x08006138
 8005638:	08006138 	.word	0x08006138
 800563c:	08006138 	.word	0x08006138
 8005640:	0800613c 	.word	0x0800613c

08005644 <memcpy>:
 8005644:	440a      	add	r2, r1
 8005646:	4291      	cmp	r1, r2
 8005648:	f100 33ff 	add.w	r3, r0, #4294967295
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	4770      	bx	lr
 8005650:	b510      	push	{r4, lr}
 8005652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005656:	4291      	cmp	r1, r2
 8005658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565c:	d1f9      	bne.n	8005652 <memcpy+0xe>
 800565e:	bd10      	pop	{r4, pc}

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
