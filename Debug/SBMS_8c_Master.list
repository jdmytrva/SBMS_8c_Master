
SBMS_8c_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b24  08005b24  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005b24  08005b24  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b24  08005b24  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  200000d0  08005bfc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  08005bfc  00020e54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a21b  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e65  00000000  00000000  0002a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d680  00000000  00000000  0002d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ac3  00000000  00000000  0003ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c422  00000000  00000000  000437cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008fbed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  0008fc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000d0 	.word	0x200000d0
 8000200:	00000000 	.word	0x00000000
 8000204:	08005020 	.word	0x08005020

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000d4 	.word	0x200000d4
 8000220:	08005020 	.word	0x08005020

08000224 <flash_erase_page>:
{
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	while (FLASH->SR & FLASH_SR_BSY);
 800022c:	bf00      	nop
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <flash_erase_page+0x70>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <flash_erase_page+0xa>

		if (FLASH->SR & FLASH_SR_EOP) {
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <flash_erase_page+0x70>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <flash_erase_page+0x28>
			FLASH->SR = FLASH_SR_EOP;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <flash_erase_page+0x70>)
 8000248:	2220      	movs	r2, #32
 800024a:	60da      	str	r2, [r3, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <flash_erase_page+0x70>)
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <flash_erase_page+0x70>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6113      	str	r3, [r2, #16]
		FLASH->AR = address;
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <flash_erase_page+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <flash_erase_page+0x70>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <flash_erase_page+0x70>)
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6113      	str	r3, [r2, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 800026a:	bf00      	nop
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <flash_erase_page+0x70>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <flash_erase_page+0x48>
		FLASH->SR = FLASH_SR_EOP;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <flash_erase_page+0x70>)
 800027a:	2220      	movs	r2, #32
 800027c:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <flash_erase_page+0x70>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4a04      	ldr	r2, [pc, #16]	; (8000294 <flash_erase_page+0x70>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6113      	str	r3, [r2, #16]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40022000 	.word	0x40022000

08000298 <flash_unlock>:


void flash_unlock(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY_1;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <flash_unlock+0x18>)
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <flash_unlock+0x1c>)
 80002a0:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY_2;
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <flash_unlock+0x18>)
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <flash_unlock+0x20>)
 80002a6:	605a      	str	r2, [r3, #4]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40022000 	.word	0x40022000
 80002b4:	45670123 	.word	0x45670123
 80002b8:	cdef89ab 	.word	0xcdef89ab

080002bc <flash_lock>:

void flash_lock()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <flash_lock+0x18>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <flash_lock+0x18>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6113      	str	r3, [r2, #16]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40022000 	.word	0x40022000

080002d8 <flash_write>:



void flash_write(uint32_t address,uint32_t data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]


	while (FLASH->SR & FLASH_SR_BSY);
 80002e2:	bf00      	nop
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <flash_write+0x90>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <flash_write+0xc>
	if (FLASH->SR & FLASH_SR_EOP) {
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <flash_write+0x90>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <flash_write+0x2a>
		FLASH->SR = FLASH_SR_EOP;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <flash_write+0x90>)
 80002fe:	2220      	movs	r2, #32
 8000300:	60da      	str	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <flash_write+0x90>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <flash_write+0x90>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	b292      	uxth	r2, r2
 8000314:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000316:	bf00      	nop
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <flash_write+0x90>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <flash_write+0x40>
    		FLASH->SR = FLASH_SR_EOP;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <flash_write+0x90>)
 8000326:	2220      	movs	r2, #32
 8000328:	60da      	str	r2, [r3, #12]


	address+=2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3302      	adds	r3, #2
 800032e:	607b      	str	r3, [r7, #4]
	data>>=16;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	603b      	str	r3, [r7, #0]
    *(__IO uint16_t*)address = (uint16_t)data;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	b292      	uxth	r2, r2
 800033c:	801a      	strh	r2, [r3, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800033e:	bf00      	nop
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <flash_write+0x90>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <flash_write+0x68>
    		FLASH->SR = FLASH_SR_EOP;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <flash_write+0x90>)
 800034e:	2220      	movs	r2, #32
 8000350:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <flash_write+0x90>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <flash_write+0x90>)
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	6113      	str	r3, [r2, #16]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000

0800036c <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
uint8_t flash_write_block()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
	__disable_irq();
	flash_unlock();
 8000376:	f7ff ff8f 	bl	8000298 <flash_unlock>
	uint32_t i=0;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <flash_write_block+0x8c>)
 8000380:	60bb      	str	r3, [r7, #8]
	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000382:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8000386:	607b      	str	r3, [r7, #4]
	uint32_t *source_adr = (void *)&LoggingData;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <flash_write_block+0x90>)
 800038a:	603b      	str	r3, [r7, #0]

	logDebugD("size: ",size,0);
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <flash_write_block+0x94>)
 800038e:	f003 ff95 	bl	80042bc <printToBufferWithoutEndUART1>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <flash_write_block+0x98>)
 800039a:	f003 ffe7 	bl	800436c <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <flash_write_block+0x94>)
 80003a0:	f003 ff8c 	bl	80042bc <printToBufferWithoutEndUART1>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <flash_write_block+0x9c>)
 80003ae:	f003 ffdd 	bl	800436c <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80003b2:	68b8      	ldr	r0, [r7, #8]
 80003b4:	f7ff ff36 	bl	8000224 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e00e      	b.n	80003dc <flash_write_block+0x70>
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	009a      	lsls	r2, r3, #2
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	18d0      	adds	r0, r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f7ff ff81 	bl	80002d8 <flash_write>
	for (i = 0; i < size/4; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d3eb      	bcc.n	80003be <flash_write_block+0x52>
    }

	flash_lock();
 80003e6:	f7ff ff69 	bl	80002bc <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ea:	b662      	cpsie	i
}
 80003ec:	bf00      	nop
	__enable_irq();
	return 1;
 80003ee:	2301      	movs	r3, #1
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	0801e400 	.word	0x0801e400
 80003fc:	20000bf0 	.word	0x20000bf0
 8000400:	08005038 	.word	0x08005038
 8000404:	08005040 	.word	0x08005040
 8000408:	08005048 	.word	0x08005048

0800040c <flash_read_block>:
uint8_t flash_read_block()
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]


	uint32_t size =  (uint32_t)sizeof(LoggingData);
 8000416:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800041a:	60bb      	str	r3, [r7, #8]
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <flash_read_block+0x50>)
 800041e:	607b      	str	r3, [r7, #4]
	uint32_t *dest_adr = (void *)&LoggingData;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <flash_read_block+0x54>)
 8000422:	603b      	str	r3, [r7, #0]

	for (i=0; i < size/4; ++i)
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	e00c      	b.n	8000444 <flash_read_block+0x38>
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	6839      	ldr	r1, [r7, #0]
 8000438:	440b      	add	r3, r1
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	601a      	str	r2, [r3, #0]
	for (i=0; i < size/4; ++i)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ed      	bcc.n	800042a <flash_read_block+0x1e>
	}

	return 1;
 800044e:	2301      	movs	r3, #1

}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	0801e400 	.word	0x0801e400
 8000460:	20000bf0 	.word	0x20000bf0

08000464 <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	617b      	str	r3, [r7, #20]
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d305      	bcc.n	800048a <flash_read+0x26>
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d801      	bhi.n	800048a <flash_read+0x26>
	{
		return EEpromValue;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	e01d      	b.n	80004c6 <flash_read+0x62>
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <flash_read+0x6c>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <flash_read+0x70>)
 8000492:	f003 ff13 	bl	80042bc <printToBufferWithoutEndUART1>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <flash_read+0x74>)
 800049e:	f003 ff65 	bl	800436c <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <flash_read+0x70>)
 80004a4:	f003 ff0a 	bl	80042bc <printToBufferWithoutEndUART1>
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <flash_read+0x78>)
 80004b0:	f003 ff5c 	bl	800436c <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <flash_read+0x70>)
 80004b6:	f003 ff01 	bl	80042bc <printToBufferWithoutEndUART1>
 80004ba:	2200      	movs	r2, #0
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <flash_read+0x7c>)
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <flash_read+0x80>)
 80004c0:	f003 ff54 	bl	800436c <printToBufferUART1D>
		return MinValue;
 80004c4:	68bb      	ldr	r3, [r7, #8]
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	08005038 	.word	0x08005038
 80004d8:	08005050 	.word	0x08005050
 80004dc:	08005068 	.word	0x08005068
 80004e0:	0801ec00 	.word	0x0801ec00
 80004e4:	0800507c 	.word	0x0800507c

080004e8 <CalibrationReadFromFlash>:
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage6_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage6);
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage7_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage7);
	logDebug("CalibrationFactoryWriteToFlash ");
}
void CalibrationReadFromFlash(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ec:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffb4 	bl	8000464 <flash_read>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a36      	ldr	r2, [pc, #216]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000500:	6013      	str	r3, [r2, #0]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,1,1000);
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffa9 	bl	8000464 <flash_read>
 8000512:	4603      	mov	r3, r0
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000516:	6093      	str	r3, [r2, #8]
	CalibrationData.CalibrationValueForCurrent2 = flash_read(CalibrationData.CalibrationValueForCurrent2_AddresInEEprom,1,1000);
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff9e 	bl	8000464 <flash_read>
 8000528:	4603      	mov	r3, r0
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800052c:	6113      	str	r3, [r2, #16]
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,1,1000);
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff93 	bl	8000464 <flash_read>
 800053e:	4603      	mov	r3, r0
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000542:	6193      	str	r3, [r2, #24]
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,1,1000);
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff88 	bl	8000464 <flash_read>
 8000554:	4603      	mov	r3, r0
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000558:	6213      	str	r3, [r2, #32]
	CalibrationData.CalibrationValueForVoltage3 = flash_read(CalibrationData.CalibrationValueForVoltage3_AddresInEEprom,1,1000);
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff7d 	bl	8000464 <flash_read>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800056e:	6293      	str	r3, [r2, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage4 = flash_read(CalibrationData.CalibrationValueForVoltage4_AddresInEEprom,1,1000);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff72 	bl	8000464 <flash_read>
 8000580:	4603      	mov	r3, r0
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage5 = flash_read(CalibrationData.CalibrationValueForVoltage5_AddresInEEprom,1,1000);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 8000588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff67 	bl	8000464 <flash_read>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059a:	6393      	str	r3, [r2, #56]	; 0x38
	CalibrationData.CalibrationValueForVoltage6 = flash_read(CalibrationData.CalibrationValueForVoltage6_AddresInEEprom,1,1000);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff5c 	bl	8000464 <flash_read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
	CalibrationData.CalibrationValueForVoltage7 = flash_read(CalibrationData.CalibrationValueForVoltage7_AddresInEEprom,1,1000);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff51 	bl	8000464 <flash_read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <CalibrationReadFromFlash+0xf0>)
 80005c6:	6493      	str	r3, [r2, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <CalibrationReadFromFlash+0xf4>)
 80005ca:	f003 fe77 	bl	80042bc <printToBufferWithoutEndUART1>
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <CalibrationReadFromFlash+0xf8>)
 80005d0:	f003 fde8 	bl	80041a4 <printToBufferUART1>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000004 	.word	0x20000004
 80005dc:	08005038 	.word	0x08005038
 80005e0:	08005338 	.word	0x08005338

080005e4 <SettingsReadFromFlash>:
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
	logDebug("SettingsFactoryWriteToFlash ");
}
void SettingsReadFromFlash(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff36 	bl	8000464 <flash_read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80005fc:	6013      	str	r3, [r2, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	220a      	movs	r2, #10
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff2c 	bl	8000464 <flash_read>
 800060c:	4603      	mov	r3, r0
 800060e:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000610:	6093      	str	r3, [r2, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff21 	bl	8000464 <flash_read>
 8000622:	4603      	mov	r3, r0
 8000624:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000626:	6113      	str	r3, [r2, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff16 	bl	8000464 <flash_read>
 8000638:	4603      	mov	r3, r0
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800063c:	6193      	str	r3, [r2, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff0b 	bl	8000464 <flash_read>
 800064e:	4603      	mov	r3, r0
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000652:	6213      	str	r3, [r2, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000658:	f242 7210 	movw	r2, #10000	; 0x2710
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff00 	bl	8000464 <flash_read>
 8000664:	4603      	mov	r3, r0
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000668:	6293      	str	r3, [r2, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fef5 	bl	8000464 <flash_read>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff feeb 	bl	8000464 <flash_read>
 800068e:	4603      	mov	r3, r0
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000692:	6393      	str	r3, [r2, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	2203      	movs	r2, #3
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fee1 	bl	8000464 <flash_read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <SettingsReadFromFlash+0xd4>)
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <SettingsReadFromFlash+0xd8>)
 80006aa:	f003 fe07 	bl	80042bc <printToBufferWithoutEndUART1>
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsReadFromFlash+0xdc>)
 80006b0:	f003 fd78 	bl	80041a4 <printToBufferUART1>

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000054 	.word	0x20000054
 80006bc:	08005038 	.word	0x08005038
 80006c0:	080053b0 	.word	0x080053b0

080006c4 <DataWhenPowerOffReadFromFlash>:
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
}
void DataWhenPowerOffReadFromFlash(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fec6 	bl	8000464 <flash_read>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006dc:	6013      	str	r3, [r2, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff febc 	bl	8000464 <flash_read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f0:	6093      	str	r3, [r2, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <DataWhenPowerOffReadFromFlash+0x6c>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff feb2 	bl	8000464 <flash_read>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000704:	6113      	str	r3, [r2, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	2201      	movs	r2, #1
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fea8 	bl	8000464 <flash_read>
 8000714:	4603      	mov	r3, r0
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <DataWhenPowerOffReadFromFlash+0x68>)
 8000718:	6193      	str	r3, [r2, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <DataWhenPowerOffReadFromFlash+0x70>)
 800071c:	f003 fdce 	bl	80042bc <printToBufferWithoutEndUART1>
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <DataWhenPowerOffReadFromFlash+0x74>)
 8000722:	f003 fd3f 	bl	80041a4 <printToBufferUART1>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c
 8000730:	ee6b2800 	.word	0xee6b2800
 8000734:	08005038 	.word	0x08005038
 8000738:	08005440 	.word	0x08005440

0800073c <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		EEpromReadStatus = 1;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <ReadFromFlash+0x84>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	 	logDebug("y1");
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <ReadFromFlash+0x88>)
 8000748:	f003 fdb8 	bl	80042bc <printToBufferWithoutEndUART1>
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <ReadFromFlash+0x8c>)
 800074e:	f003 fd29 	bl	80041a4 <printToBufferUART1>
	 	delay_ms(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fb0e 	bl	8000d74 <delay_ms>
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
	    __disable_irq();
	    putCharDirectToUart2('A');
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f003 fcc3 	bl	80040e8 <putCharDirectToUart2>
	    DataWhenPowerOffReadFromFlash();
 8000762:	f7ff ffaf 	bl	80006c4 <DataWhenPowerOffReadFromFlash>
	    putCharDirectToUart2('B');
 8000766:	2042      	movs	r0, #66	; 0x42
 8000768:	f003 fcbe 	bl	80040e8 <putCharDirectToUart2>
	    SettingsReadFromFlash();
 800076c:	f7ff ff3a 	bl	80005e4 <SettingsReadFromFlash>
	    putCharDirectToUart2('C');
 8000770:	2043      	movs	r0, #67	; 0x43
 8000772:	f003 fcb9 	bl	80040e8 <putCharDirectToUart2>
	    CalibrationReadFromFlash();
 8000776:	f7ff feb7 	bl	80004e8 <CalibrationReadFromFlash>
	    putCharDirectToUart2('D');
 800077a:	2044      	movs	r0, #68	; 0x44
 800077c:	f003 fcb4 	bl	80040e8 <putCharDirectToUart2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000780:	b662      	cpsie	i
}
 8000782:	bf00      	nop


		__enable_irq();
		putCharDirectToUart2('X');
 8000784:	2058      	movs	r0, #88	; 0x58
 8000786:	f003 fcaf 	bl	80040e8 <putCharDirectToUart2>
		if (EEpromReadStatus == 0)
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <ReadFromFlash+0x84>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <ReadFromFlash+0x6c>
		{
			logDebug("Read from EEprom - FAIL ");
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <ReadFromFlash+0x88>)
 8000794:	f003 fd92 	bl	80042bc <printToBufferWithoutEndUART1>
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ReadFromFlash+0x90>)
 800079a:	f003 fd03 	bl	80041a4 <printToBufferUART1>
			EEpromReadStatus = 1;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <ReadFromFlash+0x84>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
			return 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e009      	b.n	80007bc <ReadFromFlash+0x80>
		}
		else
		{
			logDebug("Read from EEprom - SUCCESS");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ReadFromFlash+0x88>)
 80007aa:	f003 fd87 	bl	80042bc <printToBufferWithoutEndUART1>
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <ReadFromFlash+0x94>)
 80007b0:	f003 fcf8 	bl	80041a4 <printToBufferUART1>
			EEpromReadStatus = 1;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <ReadFromFlash+0x84>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
			return 1;
 80007ba:	2301      	movs	r3, #1
		}
}
 80007bc:	4618      	mov	r0, r3
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08005038 	.word	0x08005038
 80007c8:	08005488 	.word	0x08005488
 80007cc:	0800548c 	.word	0x0800548c
 80007d0:	080054a8 	.word	0x080054a8

080007d4 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 80007dc:	4ba0      	ldr	r3, [pc, #640]	; (8000a60 <WriteInLOG+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb15 	bl	8000e10 <itoa>
 80007e6:	60b8      	str	r0, [r7, #8]


	for(i=0;number[i]!='\0';i++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e012      	b.n	8000814 <WriteInLOG+0x40>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <WriteInLOG+0x28c>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	7bf9      	ldrb	r1, [r7, #15]
 80007fa:	781c      	ldrb	r4, [r3, #0]
 80007fc:	4898      	ldr	r0, [pc, #608]	; (8000a60 <WriteInLOG+0x28c>)
 80007fe:	4613      	mov	r3, r2
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4413      	add	r3, r2
 8000804:	4403      	add	r3, r0
 8000806:	440b      	add	r3, r1
 8000808:	3304      	adds	r3, #4
 800080a:	4622      	mov	r2, r4
 800080c:	701a      	strb	r2, [r3, #0]
	for(i=0;number[i]!='\0';i++)
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e6      	bne.n	80007ee <WriteInLOG+0x1a>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000820:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <WriteInLOG+0x28c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	7bf9      	ldrb	r1, [r7, #15]
 8000826:	488e      	ldr	r0, [pc, #568]	; (8000a60 <WriteInLOG+0x28c>)
 8000828:	4613      	mov	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	4413      	add	r3, r2
 800082e:	4403      	add	r3, r0
 8000830:	440b      	add	r3, r1
 8000832:	3304      	adds	r3, #4
 8000834:	223a      	movs	r2, #58	; 0x3a
 8000836:	701a      	strb	r2, [r3, #0]
	i++;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]

	for(j=0;str[j]!='\0';i++,j++)
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	e026      	b.n	8000892 <WriteInLOG+0xbe>
	{
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d810      	bhi.n	800086c <WriteInLOG+0x98>
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	4a83      	ldr	r2, [pc, #524]	; (8000a60 <WriteInLOG+0x28c>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	7bf9      	ldrb	r1, [r7, #15]
 8000856:	781c      	ldrb	r4, [r3, #0]
 8000858:	4881      	ldr	r0, [pc, #516]	; (8000a60 <WriteInLOG+0x28c>)
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	4403      	add	r3, r0
 8000862:	440b      	add	r3, r1
 8000864:	3304      	adds	r3, #4
 8000866:	4622      	mov	r2, r4
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e00c      	b.n	8000886 <WriteInLOG+0xb2>
		else
		{
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 800086c:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <WriteInLOG+0x28c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	7bf9      	ldrb	r1, [r7, #15]
 8000872:	487b      	ldr	r0, [pc, #492]	; (8000a60 <WriteInLOG+0x28c>)
 8000874:	4613      	mov	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	4403      	add	r3, r0
 800087c:	440b      	add	r3, r1
 800087e:	3304      	adds	r3, #4
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
			break;
 8000884:	e00b      	b.n	800089e <WriteInLOG+0xca>
	for(j=0;str[j]!='\0';i++,j++)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	3301      	adds	r3, #1
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1d2      	bne.n	8000844 <WriteInLOG+0x70>
		}
	}
	for (;i<16;i++)
 800089e:	e00e      	b.n	80008be <WriteInLOG+0xea>
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 80008a0:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <WriteInLOG+0x28c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	7bf9      	ldrb	r1, [r7, #15]
 80008a6:	486e      	ldr	r0, [pc, #440]	; (8000a60 <WriteInLOG+0x28c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	4403      	add	r3, r0
 80008b0:	440b      	add	r3, r1
 80008b2:	3304      	adds	r3, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	701a      	strb	r2, [r3, #0]
	for (;i<16;i++)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d9ed      	bls.n	80008a0 <WriteInLOG+0xcc>
	}
	logDebugD("ii: ",i,0);
 80008c4:	4867      	ldr	r0, [pc, #412]	; (8000a64 <WriteInLOG+0x290>)
 80008c6:	f003 fcf9 	bl	80042bc <printToBufferWithoutEndUART1>
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4865      	ldr	r0, [pc, #404]	; (8000a68 <WriteInLOG+0x294>)
 80008d2:	f003 fd4b 	bl	800436c <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <WriteInLOG+0x28c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	7bf9      	ldrb	r1, [r7, #15]
 80008dc:	4860      	ldr	r0, [pc, #384]	; (8000a60 <WriteInLOG+0x28c>)
 80008de:	4613      	mov	r3, r2
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4413      	add	r3, r2
 80008e4:	4403      	add	r3, r0
 80008e6:	440b      	add	r3, r1
 80008e8:	3304      	adds	r3, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]

	LoggingData.RecordsQuantity++;
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <WriteInLOG+0x28c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <WriteInLOG+0x28c>)
 80008f6:	6013      	str	r3, [r2, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <WriteInLOG+0x28c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b17      	cmp	r3, #23
 80008fe:	f240 809e 	bls.w	8000a3e <WriteInLOG+0x26a>
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e093      	b.n	8000a30 <WriteInLOG+0x25c>
		{
			number = itoa(i);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fa80 	bl	8000e10 <itoa>
 8000910:	60b8      	str	r0, [r7, #8]
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000912:	2300      	movs	r3, #0
 8000914:	737b      	strb	r3, [r7, #13]
 8000916:	e011      	b.n	800093c <WriteInLOG+0x168>
			{
				LoggingData.Records[i][k] = number[k];
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	7b79      	ldrb	r1, [r7, #13]
 8000922:	781c      	ldrb	r4, [r3, #0]
 8000924:	484e      	ldr	r0, [pc, #312]	; (8000a60 <WriteInLOG+0x28c>)
 8000926:	4613      	mov	r3, r2
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	4413      	add	r3, r2
 800092c:	4403      	add	r3, r0
 800092e:	440b      	add	r3, r1
 8000930:	3304      	adds	r3, #4
 8000932:	4622      	mov	r2, r4
 8000934:	701a      	strb	r2, [r3, #0]
			for(k=0;number[k]!='\0';k++)
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	3301      	adds	r3, #1
 800093a:	737b      	strb	r3, [r7, #13]
 800093c:	7b7b      	ldrb	r3, [r7, #13]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1e7      	bne.n	8000918 <WriteInLOG+0x144>
			}
			LoggingData.Records[i][k] = ':';
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	7b79      	ldrb	r1, [r7, #13]
 800094c:	4844      	ldr	r0, [pc, #272]	; (8000a60 <WriteInLOG+0x28c>)
 800094e:	4613      	mov	r3, r2
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	4413      	add	r3, r2
 8000954:	4403      	add	r3, r0
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	223a      	movs	r2, #58	; 0x3a
 800095c:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	3301      	adds	r3, #1
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	e035      	b.n	80009d2 <WriteInLOG+0x1fe>
			{
				if (i>=10)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b09      	cmp	r3, #9
 800096a:	d917      	bls.n	800099c <WriteInLOG+0x1c8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f103 010a 	add.w	r1, r3, #10
 8000972:	7bbc      	ldrb	r4, [r7, #14]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	7bb8      	ldrb	r0, [r7, #14]
 8000978:	4d39      	ldr	r5, [pc, #228]	; (8000a60 <WriteInLOG+0x28c>)
 800097a:	460b      	mov	r3, r1
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	440b      	add	r3, r1
 8000980:	442b      	add	r3, r5
 8000982:	4423      	add	r3, r4
 8000984:	3304      	adds	r3, #4
 8000986:	781c      	ldrb	r4, [r3, #0]
 8000988:	4935      	ldr	r1, [pc, #212]	; (8000a60 <WriteInLOG+0x28c>)
 800098a:	4613      	mov	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4413      	add	r3, r2
 8000990:	440b      	add	r3, r1
 8000992:	4403      	add	r3, r0
 8000994:	3304      	adds	r3, #4
 8000996:	4622      	mov	r2, r4
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e017      	b.n	80009cc <WriteInLOG+0x1f8>
				else
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f103 010a 	add.w	r1, r3, #10
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	1c5c      	adds	r4, r3, #1
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	7bb8      	ldrb	r0, [r7, #14]
 80009aa:	4d2d      	ldr	r5, [pc, #180]	; (8000a60 <WriteInLOG+0x28c>)
 80009ac:	460b      	mov	r3, r1
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	440b      	add	r3, r1
 80009b2:	442b      	add	r3, r5
 80009b4:	4423      	add	r3, r4
 80009b6:	3304      	adds	r3, #4
 80009b8:	781c      	ldrb	r4, [r3, #0]
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <WriteInLOG+0x28c>)
 80009bc:	4613      	mov	r3, r2
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4413      	add	r3, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	4403      	add	r3, r0
 80009c6:	3304      	adds	r3, #4
 80009c8:	4622      	mov	r2, r4
 80009ca:	701a      	strb	r2, [r3, #0]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73bb      	strb	r3, [r7, #14]
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	7bb9      	ldrb	r1, [r7, #14]
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <WriteInLOG+0x28c>)
 80009d8:	4613      	mov	r3, r2
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	4403      	add	r3, r0
 80009e0:	440b      	add	r3, r1
 80009e2:	3304      	adds	r3, #4
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1bd      	bne.n	8000966 <WriteInLOG+0x192>
			}
			j--;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	73bb      	strb	r3, [r7, #14]
			for (;j<16;j++)
 80009f0:	e00d      	b.n	8000a0e <WriteInLOG+0x23a>
			{
				LoggingData.Records[i][j] = ' ';
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	7bb9      	ldrb	r1, [r7, #14]
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <WriteInLOG+0x28c>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	4413      	add	r3, r2
 80009fe:	4403      	add	r3, r0
 8000a00:	440b      	add	r3, r1
 8000a02:	3304      	adds	r3, #4
 8000a04:	2220      	movs	r2, #32
 8000a06:	701a      	strb	r2, [r3, #0]
			for (;j<16;j++)
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d9ee      	bls.n	80009f2 <WriteInLOG+0x21e>
			}
			LoggingData.Records[i][j] = '\0';
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	7bb9      	ldrb	r1, [r7, #14]
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <WriteInLOG+0x28c>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	4413      	add	r3, r2
 8000a20:	4403      	add	r3, r0
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b0d      	cmp	r3, #13
 8000a34:	f67f af68 	bls.w	8000908 <WriteInLOG+0x134>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <WriteInLOG+0x28c>)
 8000a3a:	220e      	movs	r2, #14
 8000a3c:	601a      	str	r2, [r3, #0]
	}
	flash_write_block();
 8000a3e:	f7ff fc95 	bl	800036c <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <WriteInLOG+0x290>)
 8000a44:	f003 fc3a 	bl	80042bc <printToBufferWithoutEndUART1>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <WriteInLOG+0x28c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <WriteInLOG+0x298>)
 8000a52:	f003 fc8b 	bl	800436c <printToBufferUART1D>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000bf0 	.word	0x20000bf0
 8000a64:	080055c4 	.word	0x080055c4
 8000a68:	080055cc 	.word	0x080055cc
 8000a6c:	080055d4 	.word	0x080055d4

08000a70 <InfoToUARTBeforeStart>:
}



void InfoToUARTBeforeStart(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000a74:	487d      	ldr	r0, [pc, #500]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a76:	f003 fc21 	bl	80042bc <printToBufferWithoutEndUART1>
 8000a7a:	4b7d      	ldr	r3, [pc, #500]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	487c      	ldr	r0, [pc, #496]	; (8000c74 <InfoToUARTBeforeStart+0x204>)
 8000a84:	f003 fc72 	bl	800436c <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.CalibrationValueForCurrent1 ,0);
 8000a88:	4878      	ldr	r0, [pc, #480]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a8a:	f003 fc17 	bl	80042bc <printToBufferWithoutEndUART1>
 8000a8e:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4878      	ldr	r0, [pc, #480]	; (8000c78 <InfoToUARTBeforeStart+0x208>)
 8000a98:	f003 fc68 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent2 ,0);
 8000a9c:	4873      	ldr	r0, [pc, #460]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000a9e:	f003 fc0d 	bl	80042bc <printToBufferWithoutEndUART1>
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4874      	ldr	r0, [pc, #464]	; (8000c7c <InfoToUARTBeforeStart+0x20c>)
 8000aac:	f003 fc5e 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent2 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ab2:	f003 fc03 	bl	80042bc <printToBufferWithoutEndUART1>
 8000ab6:	4b6e      	ldr	r3, [pc, #440]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4870      	ldr	r0, [pc, #448]	; (8000c80 <InfoToUARTBeforeStart+0x210>)
 8000ac0:	f003 fc54 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent3 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8000ac4:	4869      	ldr	r0, [pc, #420]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ac6:	f003 fbf9 	bl	80042bc <printToBufferWithoutEndUART1>
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	486c      	ldr	r0, [pc, #432]	; (8000c84 <InfoToUARTBeforeStart+0x214>)
 8000ad4:	f003 fc4a 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage3 ,0);
 8000ad8:	4864      	ldr	r0, [pc, #400]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ada:	f003 fbef 	bl	80042bc <printToBufferWithoutEndUART1>
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4868      	ldr	r0, [pc, #416]	; (8000c88 <InfoToUARTBeforeStart+0x218>)
 8000ae8:	f003 fc40 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage4 ,0);
 8000aec:	485f      	ldr	r0, [pc, #380]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000aee:	f003 fbe5 	bl	80042bc <printToBufferWithoutEndUART1>
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4864      	ldr	r0, [pc, #400]	; (8000c8c <InfoToUARTBeforeStart+0x21c>)
 8000afc:	f003 fc36 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage3 =",CalibrationData.CalibrationValueForVoltage5 ,0);
 8000b00:	485a      	ldr	r0, [pc, #360]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b02:	f003 fbdb 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b06:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4860      	ldr	r0, [pc, #384]	; (8000c90 <InfoToUARTBeforeStart+0x220>)
 8000b10:	f003 fc2c 	bl	800436c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage4 =",CalibrationData.CalibrationValueForVoltage6 ,0) ;
 8000b14:	4855      	ldr	r0, [pc, #340]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b16:	f003 fbd1 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <InfoToUARTBeforeStart+0x224>)
 8000b24:	f003 fc22 	bl	800436c <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.CalibrationValueForVoltage7 ,0) ;
 8000b28:	4850      	ldr	r0, [pc, #320]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b2a:	f003 fbc7 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <InfoToUARTBeforeStart+0x200>)
 8000b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4858      	ldr	r0, [pc, #352]	; (8000c98 <InfoToUARTBeforeStart+0x228>)
 8000b38:	f003 fc18 	bl	800436c <printToBufferUART1D>
	delay_ms(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f000 f919 	bl	8000d74 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8000b42:	484a      	ldr	r0, [pc, #296]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b44:	f003 fbba 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <InfoToUARTBeforeStart+0x230>)
 8000b52:	f003 fc0b 	bl	800436c <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 8000b56:	4845      	ldr	r0, [pc, #276]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b58:	f003 fbb0 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <InfoToUARTBeforeStart+0x234>)
 8000b66:	f003 fc01 	bl	800436c <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 8000b6a:	4840      	ldr	r0, [pc, #256]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b6c:	f003 fba6 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <InfoToUARTBeforeStart+0x238>)
 8000b7a:	f003 fbf7 	bl	800436c <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 8000b7e:	483b      	ldr	r0, [pc, #236]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b80:	f003 fb9c 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4847      	ldr	r0, [pc, #284]	; (8000cac <InfoToUARTBeforeStart+0x23c>)
 8000b8e:	f003 fbed 	bl	800436c <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000b94:	f003 fb92 	bl	80042bc <printToBufferWithoutEndUART1>
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4843      	ldr	r0, [pc, #268]	; (8000cb0 <InfoToUARTBeforeStart+0x240>)
 8000ba2:	f003 fbe3 	bl	800436c <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 8000ba6:	4831      	ldr	r0, [pc, #196]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000ba8:	f003 fb88 	bl	80042bc <printToBufferWithoutEndUART1>
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483f      	ldr	r0, [pc, #252]	; (8000cb4 <InfoToUARTBeforeStart+0x244>)
 8000bb6:	f003 fbd9 	bl	800436c <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bbc:	f003 fb7e 	bl	80042bc <printToBufferWithoutEndUART1>
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <InfoToUARTBeforeStart+0x248>)
 8000bca:	f003 fbcf 	bl	800436c <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 8000bce:	4827      	ldr	r0, [pc, #156]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bd0:	f003 fb74 	bl	80042bc <printToBufferWithoutEndUART1>
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4837      	ldr	r0, [pc, #220]	; (8000cbc <InfoToUARTBeforeStart+0x24c>)
 8000bde:	f003 fbc5 	bl	800436c <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000be4:	f003 fb6a 	bl	80042bc <printToBufferWithoutEndUART1>
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <InfoToUARTBeforeStart+0x22c>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <InfoToUARTBeforeStart+0x250>)
 8000bf2:	f003 fbbb 	bl	800436c <printToBufferUART1D>
	delay_ms(50);
 8000bf6:	2032      	movs	r0, #50	; 0x32
 8000bf8:	f000 f8bc 	bl	8000d74 <delay_ms>

	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000bfe:	f003 fb5d 	bl	80042bc <printToBufferWithoutEndUART1>
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <InfoToUARTBeforeStart+0x258>)
 8000c0c:	f003 fbae 	bl	800436c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c12:	f003 fb53 	bl	80042bc <printToBufferWithoutEndUART1>
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <InfoToUARTBeforeStart+0x25c>)
 8000c20:	f003 fba4 	bl	800436c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c26:	f003 fb49 	bl	80042bc <printToBufferWithoutEndUART1>
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <InfoToUARTBeforeStart+0x260>)
 8000c34:	f003 fb9a 	bl	800436c <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c3a:	f003 fb3f 	bl	80042bc <printToBufferWithoutEndUART1>
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <InfoToUARTBeforeStart+0x254>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <InfoToUARTBeforeStart+0x264>)
 8000c48:	f003 fb90 	bl	800436c <printToBufferUART1D>

	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <InfoToUARTBeforeStart+0x1fc>)
 8000c4e:	f003 fb35 	bl	80042bc <printToBufferWithoutEndUART1>
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <InfoToUARTBeforeStart+0x268>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <InfoToUARTBeforeStart+0x26c>)
 8000c5c:	f003 fb86 	bl	800436c <printToBufferUART1D>
	delay_ms(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f000 f887 	bl	8000d74 <delay_ms>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080055d8 	.word	0x080055d8
 8000c70:	20000004 	.word	0x20000004
 8000c74:	080055e0 	.word	0x080055e0
 8000c78:	080055f4 	.word	0x080055f4
 8000c7c:	08005614 	.word	0x08005614
 8000c80:	08005634 	.word	0x08005634
 8000c84:	08005654 	.word	0x08005654
 8000c88:	08005674 	.word	0x08005674
 8000c8c:	08005694 	.word	0x08005694
 8000c90:	080056b4 	.word	0x080056b4
 8000c94:	080056d4 	.word	0x080056d4
 8000c98:	080056f4 	.word	0x080056f4
 8000c9c:	20000054 	.word	0x20000054
 8000ca0:	0800570c 	.word	0x0800570c
 8000ca4:	08005720 	.word	0x08005720
 8000ca8:	0800573c 	.word	0x0800573c
 8000cac:	0800574c 	.word	0x0800574c
 8000cb0:	0800575c 	.word	0x0800575c
 8000cb4:	0800576c 	.word	0x0800576c
 8000cb8:	0800577c 	.word	0x0800577c
 8000cbc:	08005790 	.word	0x08005790
 8000cc0:	080057a4 	.word	0x080057a4
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	080057c4 	.word	0x080057c4
 8000ccc:	080057e0 	.word	0x080057e0
 8000cd0:	08005808 	.word	0x08005808
 8000cd4:	0800582c 	.word	0x0800582c
 8000cd8:	200000cc 	.word	0x200000cc
 8000cdc:	08005838 	.word	0x08005838

08000ce0 <delay_us>:
void delay_us(uint32_t us)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	volatile uint32_t n = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	if (us==1) n=1;//в тактах процесора
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <delay_us+0x16>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
	if (us==2) n=2;//в тактах процесора
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d101      	bne.n	8000d00 <delay_us+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
	if (us==3) n=18;//в тактах процесора
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d101      	bne.n	8000d0a <delay_us+0x2a>
 8000d06:	2312      	movs	r3, #18
 8000d08:	617b      	str	r3, [r7, #20]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d90a      	bls.n	8000d26 <delay_us+0x46>
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <delay_us+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <delay_us+0x8c>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	3a03      	subs	r2, #3
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <delay_us+0x90>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	613b      	str	r3, [r7, #16]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60fb      	str	r3, [r7, #12]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <delay_us+0x90>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	60bb      	str	r3, [r7, #8]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d305      	bcc.n	8000d4c <delay_us+0x6c>
            n0+=SysTick->LOAD+1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <delay_us+0x90>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4413      	add	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        np=nc;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60fb      	str	r3, [r7, #12]
    }while(n0-nc<n);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	1a9a      	subs	r2, r3, r2
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3e9      	bcc.n	8000d30 <delay_us+0x50>
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200000cc 	.word	0x200000cc
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	while(value>0)
 8000d7c:	e006      	b.n	8000d8c <delay_ms+0x18>
	{
		delay_us(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f7ff ffad 	bl	8000ce0 <delay_us>
		value--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
	while(value>0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f5      	bne.n	8000d7e <delay_ms+0xa>
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <calcCRC>:
* количество байтов, участвующих в расчете (ровно)
* начальный код CRC (если считается не с начала массива),
* Для ускорения расчета используется таблица
***********************************************************************/
char calcCRC(char *Ptr, char Num, char CRC1)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0c2      	sub	sp, #264	; 0x108
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	6018      	str	r0, [r3, #0]
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	1cfb      	adds	r3, r7, #3
 8000dac:	4602      	mov	r2, r0
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	460a      	mov	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
   char CrcTable[256] = {
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <calcCRC+0x70>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f004 f91d 	bl	8005004 <memcpy>
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1d3a      	adds	r2, r7, #4
 8000dd0:	1c59      	adds	r1, r3, #1
 8000dd2:	6011      	str	r1, [r2, #0]
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4053      	eors	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	f107 0208 	add.w	r2, r7, #8
 8000de6:	5c52      	ldrb	r2, [r2, r1]
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1cfb      	adds	r3, r7, #3
 8000dec:	1cfa      	adds	r2, r7, #3
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1cfb      	adds	r3, r7, #3
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e6      	bne.n	8000dca <calcCRC+0x2e>
  return CRC1;
 8000dfc:	1cbb      	adds	r3, r7, #2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800584c 	.word	0x0800584c

08000e10 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	int32_t sign;
	int8_t i,k;
	char s[16];
	static char s1[16];
     if ((sign = n) < 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da02      	bge.n	8000e28 <itoa+0x18>
         n = -n;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	425b      	negs	r3, r3
 8000e26:	607b      	str	r3, [r7, #4]
     i = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	77fb      	strb	r3, [r7, #31]
     do {
         s[i++] = n % 10 + '0';
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <itoa+0xec>)
 8000e30:	fb83 1302 	smull	r1, r3, r3, r2
 8000e34:	1099      	asrs	r1, r3, #2
 8000e36:	17d3      	asrs	r3, r2, #31
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	1ad1      	subs	r1, r2, r3
 8000e44:	b2cb      	uxtb	r3, r1
 8000e46:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	77fa      	strb	r2, [r7, #31]
 8000e52:	3330      	adds	r3, #48	; 0x30
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f803 2c18 	strb.w	r2, [r3, #-24]
     } while ((n /= 10) > 0);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <itoa+0xec>)
 8000e64:	fb82 1203 	smull	r1, r2, r2, r3
 8000e68:	1092      	asrs	r2, r2, #2
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dcda      	bgt.n	8000e2c <itoa+0x1c>
     if (sign < 0)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da0c      	bge.n	8000e96 <itoa+0x86>
         s[i++] = '-';
 8000e7c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e80:	b2d3      	uxtb	r3, r2
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	77fb      	strb	r3, [r7, #31]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	f107 0220 	add.w	r2, r7, #32
 8000e8e:	4413      	add	r3, r2
 8000e90:	222d      	movs	r2, #45	; 0x2d
 8000e92:	f803 2c18 	strb.w	r2, [r3, #-24]
     s[i] = '\0';
 8000e96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e9a:	f107 0220 	add.w	r2, r7, #32
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f803 2c18 	strb.w	r2, [r3, #-24]

     k=0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000eaa:	e017      	b.n	8000edc <itoa+0xcc>
     {
    	s1[k]=s[i-1];
 8000eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000eb6:	f107 0120 	add.w	r1, r7, #32
 8000eba:	440a      	add	r2, r1
 8000ebc:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <itoa+0xf0>)
 8000ec2:	54d1      	strb	r1, [r2, r3]
    	i--;
 8000ec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	77fb      	strb	r3, [r7, #31]
    	k++;
 8000ed0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	77bb      	strb	r3, [r7, #30]
     while (i)
 8000edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e3      	bne.n	8000eac <itoa+0x9c>
     }
     s1[k] = '\0';
 8000ee4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <itoa+0xf0>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	54d1      	strb	r1, [r2, r3]
     return s1;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <itoa+0xf0>)
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	66666667 	.word	0x66666667
 8000f00:	200009c0 	.word	0x200009c0

08000f04 <itoa_koma>:
     s1[k] = '\0';
     return s1;
}

char * itoa_koma(int32_t n,uint8_t koma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08f      	sub	sp, #60	; 0x3c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	int32_t sign;
	int8_t i,k,j;
	char s[17];
	char sKoma[17];
	static char s1[17];
    if ((sign = n) < 0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
 8000f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da02      	bge.n	8000f20 <itoa_koma+0x1c>
    	n = -n;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	607b      	str	r3, [r7, #4]
     i = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     do
     {
         s[i++] = n % 10 + '0';
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <itoa_koma+0x1c8>)
 8000f2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2e:	1099      	asrs	r1, r3, #2
 8000f30:	17d3      	asrs	r3, r2, #31
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	1ad1      	subs	r1, r2, r3
 8000f3e:	b2cb      	uxtb	r3, r1
 8000f40:	f997 1037 	ldrsb.w	r1, [r7, #55]	; 0x37
 8000f44:	b2ca      	uxtb	r2, r1
 8000f46:	3201      	adds	r2, #1
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f56:	440b      	add	r3, r1
 8000f58:	f803 2c1c 	strb.w	r2, [r3, #-28]
     } while ((n /= 10) > 0);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a5b      	ldr	r2, [pc, #364]	; (80010cc <itoa_koma+0x1c8>)
 8000f60:	fb82 1203 	smull	r1, r2, r2, r3
 8000f64:	1092      	asrs	r2, r2, #2
 8000f66:	17db      	asrs	r3, r3, #31
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dcd9      	bgt.n	8000f26 <itoa_koma+0x22>
     s[i] = '\0';
 8000f72:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
     if (i<=1)
 8000f82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	dc0e      	bgt.n	8000fa8 <itoa_koma+0xa4>
     {
       	 s[i] = '0';
 8000f8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f92:	4413      	add	r3, r2
 8000f94:	2230      	movs	r2, #48	; 0x30
 8000f96:	f803 2c1c 	strb.w	r2, [r3, #-28]
       	 i++;
 8000f9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     if (i<=2&&koma>1)
 8000fa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	dc11      	bgt.n	8000fd4 <itoa_koma+0xd0>
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d90e      	bls.n	8000fd4 <itoa_koma+0xd0>
     {
    	 s[i] = '0';
 8000fb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2230      	movs	r2, #48	; 0x30
 8000fc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
    	 i++;
 8000fc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     }
     k=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     j=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     while (j<i)
 8000fe0:	e02f      	b.n	8001042 <itoa_koma+0x13e>
     {
    	 if (k==koma)
 8000fe2:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10e      	bne.n	800100a <itoa_koma+0x106>
         {
         	 sKoma[k]='.';
 8000fec:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8000ff0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ff4:	4413      	add	r3, r2
 8000ff6:	222e      	movs	r2, #46	; 0x2e
 8000ff8:	f803 2c30 	strb.w	r2, [r3, #-48]
         	 k++;
 8000ffc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
         }
    	 sKoma[k]=s[j];
 800100a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800100e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001012:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001016:	440a      	add	r2, r1
 8001018:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800101c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001020:	440b      	add	r3, r1
 8001022:	f803 2c30 	strb.w	r2, [r3, #-48]
         j++;
 8001026:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
         k++;
 8001034:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     while (j<i)
 8001042:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001046:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800104a:	429a      	cmp	r2, r3
 800104c:	dbc9      	blt.n	8000fe2 <itoa_koma+0xde>
      }
     if (sign < 0) sKoma[k++] = '-';
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	2b00      	cmp	r3, #0
 8001052:	da0d      	bge.n	8001070 <itoa_koma+0x16c>
 8001054:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001058:	b2d3      	uxtb	r3, r2
 800105a:	3301      	adds	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001062:	4613      	mov	r3, r2
 8001064:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001068:	4413      	add	r3, r2
 800106a:	222d      	movs	r2, #45	; 0x2d
 800106c:	f803 2c30 	strb.w	r2, [r3, #-48]
     i=0;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 8001076:	e019      	b.n	80010ac <itoa_koma+0x1a8>
     {
    	s1[i]=sKoma[k-1];
 8001078:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001082:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001086:	440a      	add	r2, r1
 8001088:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 800108c:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <itoa_koma+0x1cc>)
 800108e:	54d1      	strb	r1, [r2, r3]
    	k--;
 8001090:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    	i++;
 800109e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     while (k)
 80010ac:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e1      	bne.n	8001078 <itoa_koma+0x174>
     }
     s1[i] = '\0';
 80010b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <itoa_koma+0x1cc>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	54d1      	strb	r1, [r2, r3]
     return s1;
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <itoa_koma+0x1cc>)
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	373c      	adds	r7, #60	; 0x3c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	66666667 	.word	0x66666667
 80010d0:	200009d0 	.word	0x200009d0

080010d4 <Module16>:
     }
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	if (value == 0) return 0;
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <Module16+0x16>
 80010e6:	2300      	movs	r3, #0
 80010e8:	e00f      	b.n	800110a <Module16+0x36>
	if (value > 0) return value;
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd02      	ble.n	80010f8 <Module16+0x24>
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	e008      	b.n	800110a <Module16+0x36>
	if (value < 0) return (-1)*value;
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da04      	bge.n	800110a <Module16+0x36>
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	425b      	negs	r3, r3
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21b      	sxth	r3, r3
 8001108:	e7ff      	b.n	800110a <Module16+0x36>
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <Module32>:
	if (value == 0) return 0;
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}
int32_t Module32 (int32_t value)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (value == 0) return 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <Module32+0x12>
 8001122:	2300      	movs	r3, #0
 8001124:	e00a      	b.n	800113c <Module32+0x28>
	if (value > 0) return value;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dd01      	ble.n	8001130 <Module32+0x1c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	e005      	b.n	800113c <Module32+0x28>
	if (value < 0) return (-1)*value;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da02      	bge.n	800113c <Module32+0x28>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	425b      	negs	r3, r3
 800113a:	e7ff      	b.n	800113c <Module32+0x28>
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <RunningAverageI1>:

   return middle;
}

int32_t RunningAverageI1(int32_t newValue)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <RunningAverageI1+0x4c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800116c:	fb02 f203 	mul.w	r2, r2, r3
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <RunningAverageI1+0x4c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <RunningAverageI1+0x4c>)
 8001178:	6013      	str	r3, [r2, #0]
	return filteredlValueI1/10;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <RunningAverageI1+0x4c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <RunningAverageI1+0x50>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1092      	asrs	r2, r2, #2
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	200009e4 	.word	0x200009e4
 8001198:	66666667 	.word	0x66666667

0800119c <RunningAverageI2>:

int32_t RunningAverageI2(int32_t newValue)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <RunningAverageI2+0x4c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80011c0:	fb02 f203 	mul.w	r2, r2, r3
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <RunningAverageI2+0x4c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <RunningAverageI2+0x4c>)
 80011cc:	6013      	str	r3, [r2, #0]
	return filteredlValueI2/10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <RunningAverageI2+0x4c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <RunningAverageI2+0x50>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	1092      	asrs	r2, r2, #2
 80011da:	17db      	asrs	r3, r3, #31
 80011dc:	1ad3      	subs	r3, r2, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	200009e8 	.word	0x200009e8
 80011ec:	66666667 	.word	0x66666667

080011f0 <RunningAverageU1>:

int32_t RunningAverageU1(int32_t newValue)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <RunningAverageU1+0x4c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001214:	fb02 f203 	mul.w	r2, r2, r3
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <RunningAverageU1+0x4c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <RunningAverageU1+0x4c>)
 8001220:	6013      	str	r3, [r2, #0]
	return filteredlValueU1/10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <RunningAverageU1+0x4c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <RunningAverageU1+0x50>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1092      	asrs	r2, r2, #2
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	200009ec 	.word	0x200009ec
 8001240:	66666667 	.word	0x66666667

08001244 <RunningAverageU2>:

int32_t RunningAverageU2(int32_t newValue)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <RunningAverageU2+0x4c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001268:	fb02 f203 	mul.w	r2, r2, r3
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <RunningAverageU2+0x4c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4413      	add	r3, r2
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <RunningAverageU2+0x4c>)
 8001274:	6013      	str	r3, [r2, #0]
	return filteredlValueU2/10;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <RunningAverageU2+0x4c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <RunningAverageU2+0x50>)
 800127c:	fb82 1203 	smull	r1, r2, r2, r3
 8001280:	1092      	asrs	r2, r2, #2
 8001282:	17db      	asrs	r3, r3, #31
 8001284:	1ad3      	subs	r3, r2, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200009f0 	.word	0x200009f0
 8001294:	66666667 	.word	0x66666667

08001298 <RunningAverageU3>:

int32_t RunningAverageU3(int32_t newValue)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU3 = 0;
	filteredlValueU3 += (newValue - filteredlValueU3) * k;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <RunningAverageU3+0x4c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80012bc:	fb02 f203 	mul.w	r2, r2, r3
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <RunningAverageU3+0x4c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <RunningAverageU3+0x4c>)
 80012c8:	6013      	str	r3, [r2, #0]
	return filteredlValueU3/10;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <RunningAverageU3+0x4c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <RunningAverageU3+0x50>)
 80012d0:	fb82 1203 	smull	r1, r2, r2, r3
 80012d4:	1092      	asrs	r2, r2, #2
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	200009f4 	.word	0x200009f4
 80012e8:	66666667 	.word	0x66666667

080012ec <RunningAverageU4>:

int32_t RunningAverageU4(int32_t newValue)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU4 = 0;
	filteredlValueU4 += (newValue - filteredlValueU4) * k;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <RunningAverageU4+0x4c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001310:	fb02 f203 	mul.w	r2, r2, r3
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <RunningAverageU4+0x4c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4413      	add	r3, r2
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <RunningAverageU4+0x4c>)
 800131c:	6013      	str	r3, [r2, #0]
	return filteredlValueU4/10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <RunningAverageU4+0x4c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <RunningAverageU4+0x50>)
 8001324:	fb82 1203 	smull	r1, r2, r2, r3
 8001328:	1092      	asrs	r2, r2, #2
 800132a:	17db      	asrs	r3, r3, #31
 800132c:	1ad3      	subs	r3, r2, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	200009f8 	.word	0x200009f8
 800133c:	66666667 	.word	0x66666667

08001340 <RunningAverageU5>:

int32_t RunningAverageU5(int32_t newValue)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU5 = 0;
	filteredlValueU5 += (newValue - filteredlValueU5) * k;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <RunningAverageU5+0x4c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001364:	fb02 f203 	mul.w	r2, r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <RunningAverageU5+0x4c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <RunningAverageU5+0x4c>)
 8001370:	6013      	str	r3, [r2, #0]
	return filteredlValueU5/10;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <RunningAverageU5+0x4c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a06      	ldr	r2, [pc, #24]	; (8001390 <RunningAverageU5+0x50>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	1092      	asrs	r2, r2, #2
 800137e:	17db      	asrs	r3, r3, #31
 8001380:	1ad3      	subs	r3, r2, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200009fc 	.word	0x200009fc
 8001390:	66666667 	.word	0x66666667

08001394 <RunningAverageU6>:

int32_t RunningAverageU6(int32_t newValue)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU6 = 0;
	filteredlValueU6 += (newValue - filteredlValueU6) * k;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <RunningAverageU6+0x4c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80013b8:	fb02 f203 	mul.w	r2, r2, r3
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <RunningAverageU6+0x4c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <RunningAverageU6+0x4c>)
 80013c4:	6013      	str	r3, [r2, #0]
	return filteredlValueU6/10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <RunningAverageU6+0x4c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <RunningAverageU6+0x50>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	1092      	asrs	r2, r2, #2
 80013d2:	17db      	asrs	r3, r3, #31
 80013d4:	1ad3      	subs	r3, r2, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000a00 	.word	0x20000a00
 80013e4:	66666667 	.word	0x66666667

080013e8 <RunningAverageU7>:

int32_t RunningAverageU7(int32_t newValue)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU7 = 0;
	filteredlValueU7 += (newValue - filteredlValueU7) * k;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <RunningAverageU7+0x4c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800140c:	fb02 f203 	mul.w	r2, r2, r3
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <RunningAverageU7+0x4c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4413      	add	r3, r2
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <RunningAverageU7+0x4c>)
 8001418:	6013      	str	r3, [r2, #0]
	return filteredlValueU7/10;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <RunningAverageU7+0x4c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <RunningAverageU7+0x50>)
 8001420:	fb82 1203 	smull	r1, r2, r2, r3
 8001424:	1092      	asrs	r2, r2, #2
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad3      	subs	r3, r2, r3
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	20000a04 	.word	0x20000a04
 8001438:	66666667 	.word	0x66666667

0800143c <RunningAverageU8>:

int32_t RunningAverageU8(int32_t newValue)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	int8_t k = 1;  // 1 - 10
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
	newValue = newValue*10;
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
	static int32_t filteredlValueU8 = 0;
	filteredlValueU8 += (newValue - filteredlValueU8) * k;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <RunningAverageU8+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001460:	fb02 f203 	mul.w	r2, r2, r3
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <RunningAverageU8+0x4c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <RunningAverageU8+0x4c>)
 800146c:	6013      	str	r3, [r2, #0]
	return filteredlValueU8/10;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <RunningAverageU8+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <RunningAverageU8+0x50>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1092      	asrs	r2, r2, #2
 800147a:	17db      	asrs	r3, r3, #31
 800147c:	1ad3      	subs	r3, r2, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000a08 	.word	0x20000a08
 800148c:	66666667 	.word	0x66666667

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <__NVIC_EnableIRQ+0x34>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff90 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <LL_ADC_DMA_GetRegAddr>:
  
  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	334c      	adds	r3, #76	; 0x4c
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	332c      	adds	r3, #44	; 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001680:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	fa92 f2a2 	rbit	r2, r2
 8001688:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	40d3      	lsrs	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	211f      	movs	r1, #31
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f003 011f 	and.w	r1, r3, #31
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	431a      	orrs	r2, r3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b08d      	sub	sp, #52	; 0x34
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	330c      	adds	r3, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	fa92 f2a2 	rbit	r2, r2
 80016f2:	617a      	str	r2, [r7, #20]
  return result;
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	fab2 f282 	clz	r2, r2
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	40d3      	lsrs	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800170e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001712:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	fa91 f1a1 	rbit	r1, r1
 800171a:	61f9      	str	r1, [r7, #28]
  return result;
 800171c:	69f9      	ldr	r1, [r7, #28]
 800171e:	fab1 f181 	clz	r1, r1
 8001722:	b2c9      	uxtb	r1, r1
 8001724:	40cb      	lsrs	r3, r1
 8001726:	2107      	movs	r1, #7
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	401a      	ands	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001736:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800173a:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173e:	fa91 f1a1 	rbit	r1, r1
 8001742:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001746:	fab1 f181 	clz	r1, r1
 800174a:	b2c9      	uxtb	r1, r1
 800174c:	40cb      	lsrs	r3, r1
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800175a:	bf00      	nop
 800175c:	3734      	adds	r7, #52	; 0x34
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <LL_DMA_EnableChannel+0x38>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	3a01      	subs	r2, #1
 8001802:	4906      	ldr	r1, [pc, #24]	; (800181c <LL_DMA_EnableChannel+0x38>)
 8001804:	5c8a      	ldrb	r2, [r1, r2]
 8001806:	4611      	mov	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	440a      	add	r2, r1
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	08005b04 	.word	0x08005b04

08001820 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <LL_DMA_SetDataTransferDirection+0x44>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001840:	f023 0310 	bic.w	r3, r3, #16
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	3a01      	subs	r2, #1
 8001848:	4906      	ldr	r1, [pc, #24]	; (8001864 <LL_DMA_SetDataTransferDirection+0x44>)
 800184a:	5c8a      	ldrb	r2, [r1, r2]
 800184c:	4611      	mov	r1, r2
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	440a      	add	r2, r1
 8001852:	4611      	mov	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	08005b04 	.word	0x08005b04

08001868 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3b01      	subs	r3, #1
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LL_DMA_SetMode+0x40>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	461a      	mov	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 0220 	bic.w	r2, r3, #32
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3b01      	subs	r3, #1
 800188c:	4906      	ldr	r1, [pc, #24]	; (80018a8 <LL_DMA_SetMode+0x40>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	4619      	mov	r1, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	440b      	add	r3, r1
 8001896:	4619      	mov	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	08005b04 	.word	0x08005b04

080018ac <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LL_DMA_SetPeriphIncMode+0x40>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <LL_DMA_SetPeriphIncMode+0x40>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	4619      	mov	r1, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	440b      	add	r3, r1
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	08005b04 	.word	0x08005b04

080018f0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3b01      	subs	r3, #1
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LL_DMA_SetMemoryIncMode+0x40>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3b01      	subs	r3, #1
 8001914:	4906      	ldr	r1, [pc, #24]	; (8001930 <LL_DMA_SetMemoryIncMode+0x40>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	4619      	mov	r1, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	440b      	add	r3, r1
 800191e:	4619      	mov	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	08005b04 	.word	0x08005b04

08001934 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LL_DMA_SetPeriphSize+0x40>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3b01      	subs	r3, #1
 8001958:	4906      	ldr	r1, [pc, #24]	; (8001974 <LL_DMA_SetPeriphSize+0x40>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	4619      	mov	r1, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	440b      	add	r3, r1
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	08005b04 	.word	0x08005b04

08001978 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3b01      	subs	r3, #1
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LL_DMA_SetMemorySize+0x40>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3b01      	subs	r3, #1
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <LL_DMA_SetMemorySize+0x40>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	4619      	mov	r1, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	440b      	add	r3, r1
 80019a6:	4619      	mov	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	08005b04 	.word	0x08005b04

080019bc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LL_DMA_SetChannelPriorityLevel+0x40>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	3b01      	subs	r3, #1
 80019e0:	4906      	ldr	r1, [pc, #24]	; (80019fc <LL_DMA_SetChannelPriorityLevel+0x40>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	440b      	add	r3, r1
 80019ea:	4619      	mov	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
             Priority);
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	08005b04 	.word	0x08005b04

08001a00 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LL_DMA_SetDataLength+0x40>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	461a      	mov	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	3a01      	subs	r2, #1
 8001a24:	4906      	ldr	r1, [pc, #24]	; (8001a40 <LL_DMA_SetDataLength+0x40>)
 8001a26:	5c8a      	ldrb	r2, [r1, r2]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	440a      	add	r2, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	08005b04 	.word	0x08005b04

08001a44 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d114      	bne.n	8001a82 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <LL_DMA_ConfigAddresses+0x70>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	461a      	mov	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <LL_DMA_ConfigAddresses+0x70>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001a80:	e013      	b.n	8001aaa <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LL_DMA_ConfigAddresses+0x70>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <LL_DMA_ConfigAddresses+0x70>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	60d3      	str	r3, [r2, #12]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	08005b04 	.word	0x08005b04

08001ab8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <LL_RCC_HSE_Enable+0x18>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <LL_RCC_HSE_Enable+0x18>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <LL_RCC_HSE_IsReady+0x20>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000

08001af8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <LL_RCC_SetSysClkSource+0x24>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 0203 	bic.w	r2, r3, #3
 8001b08:	4904      	ldr	r1, [pc, #16]	; (8001b1c <LL_RCC_SetSysClkSource+0x24>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <LL_RCC_GetSysClkSource+0x14>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40021000 	.word	0x40021000

08001b38 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	4904      	ldr	r1, [pc, #16]	; (8001b5c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LL_RCC_SetADCClockSource+0x24>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_RCC_SetADCClockSource+0x24>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <LL_RCC_PLL_Enable+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <LL_RCC_PLL_Enable+0x18>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LL_RCC_PLL_IsReady+0x20>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	4908      	ldr	r1, [pc, #32]	; (8001c58 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f023 020f 	bic.w	r2, r3, #15
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	605a      	str	r2, [r3, #4]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60da      	str	r2, [r3, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	615a      	str	r2, [r3, #20]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60da      	str	r2, [r3, #12]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	615a      	str	r2, [r3, #20]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e66:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e72:	6053      	str	r3, [r2, #4]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010000 	.word	0x40010000

08001e80 <OFF_Itself>:
}Key_Pressed_t ;

Key_Pressed_t pressedKey = 0;

void OFF_Itself()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if (EEpromSaveStatus == 0)
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <OFF_Itself+0x48>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <OFF_Itself+0x22>
	{
		if (BatteryCapacityDischargeCurrent/3600 > 200)
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <OFF_Itself+0x4c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <OFF_Itself+0x50>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d905      	bls.n	8001ea2 <OFF_Itself+0x22>
		{
			//SaveData.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
			//EEpromWrite();
			logInfo("Data saved ");
 8001e96:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <OFF_Itself+0x54>)
 8001e98:	f002 fa10 	bl	80042bc <printToBufferWithoutEndUART1>
 8001e9c:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <OFF_Itself+0x58>)
 8001e9e:	f002 f981 	bl	80041a4 <printToBufferUART1>
		}
	}
	EEpromSaveStatus = 1;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <OFF_Itself+0x48>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	801a      	strh	r2, [r3, #0]
	logInfo("OFF All System");
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <OFF_Itself+0x54>)
 8001eaa:	f002 fa07 	bl	80042bc <printToBufferWithoutEndUART1>
 8001eae:	480b      	ldr	r0, [pc, #44]	; (8001edc <OFF_Itself+0x5c>)
 8001eb0:	f002 f978 	bl	80041a4 <printToBufferUART1>
	delay_ms(100);
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	f7fe ff5d 	bl	8000d74 <delay_ms>
	GPIOA->BSRR =  GPIO_BSRR_BR11;//OFF CPU
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <OFF_Itself+0x60>)
 8001ebc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec0:	611a      	str	r2, [r3, #16]

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200009b4 	.word	0x200009b4
 8001ecc:	20000a28 	.word	0x20000a28
 8001ed0:	000b0a8f 	.word	0x000b0a8f
 8001ed4:	0800594c 	.word	0x0800594c
 8001ed8:	08005954 	.word	0x08005954
 8001edc:	08005960 	.word	0x08005960
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <AllBalansirON>:

void AllBalansirON()
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <AllBalansirON+0x48>)
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <AllBalansirON+0x48>)
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <AllBalansirON+0x4c>)
 8001ef6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001efa:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <AllBalansirON+0x4c>)
 8001efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f02:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <AllBalansirON+0x4c>)
 8001f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0a:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <AllBalansirON+0x4c>)
 8001f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f12:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <AllBalansirON+0x4c>)
 8001f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1a:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <AllBalansirON+0x4c>)
 8001f1e:	2220      	movs	r2, #32
 8001f20:	611a      	str	r2, [r3, #16]

}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <Balansir_handler>:


#define DEBAUNCE 3  //3 - 30mV
#define DEBAUNCE_FAIL 2 //1 - 10mV
void Balansir_handler()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	if(CellsDatabase[0].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS7;//Battery 1 Balansir ON
 8001f3a:	4b7d      	ldr	r3, [pc, #500]	; (8002130 <Balansir_handler+0x1fc>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001f42:	d302      	bcc.n	8001f4a <Balansir_handler+0x16>
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <Balansir_handler+0x200>)
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[0].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR7;//Battery 1 Balansir OFF
 8001f4a:	4b79      	ldr	r3, [pc, #484]	; (8002130 <Balansir_handler+0x1fc>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001f52:	d803      	bhi.n	8001f5c <Balansir_handler+0x28>
 8001f54:	4b77      	ldr	r3, [pc, #476]	; (8002134 <Balansir_handler+0x200>)
 8001f56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f5a:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[1].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOC->BSRR = GPIO_BSRR_BS6;//Battery 2 Balansir ON
 8001f5c:	4b74      	ldr	r3, [pc, #464]	; (8002130 <Balansir_handler+0x1fc>)
 8001f5e:	8b9b      	ldrh	r3, [r3, #28]
 8001f60:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001f64:	d302      	bcc.n	8001f6c <Balansir_handler+0x38>
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <Balansir_handler+0x200>)
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[1].Voltage<(MAX_VOLTAGE-1)) GPIOC->BSRR = GPIO_BSRR_BR6;//Battery 2 Balansir OFF
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <Balansir_handler+0x1fc>)
 8001f6e:	8b9b      	ldrh	r3, [r3, #28]
 8001f70:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001f74:	d803      	bhi.n	8001f7e <Balansir_handler+0x4a>
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <Balansir_handler+0x200>)
 8001f78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f7c:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[2].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS15;//Battery 3 Balansir ON
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <Balansir_handler+0x1fc>)
 8001f80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f82:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001f86:	d303      	bcc.n	8001f90 <Balansir_handler+0x5c>
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <Balansir_handler+0x204>)
 8001f8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f8e:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[2].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR15;//Battery 3 Balansir OFF
 8001f90:	4b67      	ldr	r3, [pc, #412]	; (8002130 <Balansir_handler+0x1fc>)
 8001f92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f94:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001f98:	d803      	bhi.n	8001fa2 <Balansir_handler+0x6e>
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <Balansir_handler+0x204>)
 8001f9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fa0:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[3].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS14;//Battery 4 Balansir ON
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <Balansir_handler+0x1fc>)
 8001fa4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa8:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001fac:	d303      	bcc.n	8001fb6 <Balansir_handler+0x82>
 8001fae:	4b62      	ldr	r3, [pc, #392]	; (8002138 <Balansir_handler+0x204>)
 8001fb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb4:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[3].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR14;//Battery 4 Balansir OFF
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	; (8002130 <Balansir_handler+0x1fc>)
 8001fb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fbc:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001fc0:	d803      	bhi.n	8001fca <Balansir_handler+0x96>
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <Balansir_handler+0x204>)
 8001fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc8:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[4].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS13;//Battery 5 Balansir ON
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <Balansir_handler+0x1fc>)
 8001fcc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001fd0:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001fd4:	d303      	bcc.n	8001fde <Balansir_handler+0xaa>
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <Balansir_handler+0x204>)
 8001fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fdc:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[4].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR13;//Battery 5 Balansir OFF
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <Balansir_handler+0x1fc>)
 8001fe0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001fe4:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001fe8:	d803      	bhi.n	8001ff2 <Balansir_handler+0xbe>
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <Balansir_handler+0x204>)
 8001fec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ff0:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[5].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS12;//Battery 6 Balansir ON
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <Balansir_handler+0x1fc>)
 8001ff4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001ff8:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001ffc:	d303      	bcc.n	8002006 <Balansir_handler+0xd2>
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <Balansir_handler+0x204>)
 8002000:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002004:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[5].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR12;//Battery 6 Balansir OFF
 8002006:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <Balansir_handler+0x1fc>)
 8002008:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800200c:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002010:	d803      	bhi.n	800201a <Balansir_handler+0xe6>
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <Balansir_handler+0x204>)
 8002014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002018:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[6].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS8;//Battery 7 Balansir ON
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <Balansir_handler+0x1fc>)
 800201c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002020:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8002024:	d303      	bcc.n	800202e <Balansir_handler+0xfa>
 8002026:	4b44      	ldr	r3, [pc, #272]	; (8002138 <Balansir_handler+0x204>)
 8002028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202c:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[6].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR8;//Battery 7 Balansir OFF
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <Balansir_handler+0x1fc>)
 8002030:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002034:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002038:	d803      	bhi.n	8002042 <Balansir_handler+0x10e>
 800203a:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <Balansir_handler+0x204>)
 800203c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002040:	611a      	str	r2, [r3, #16]

	if(CellsDatabase[7].Voltage>(MAX_VOLTAGE+DEBAUNCE)) GPIOB->BSRR = GPIO_BSRR_BS5;//Battery 8 Balansir ON
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <Balansir_handler+0x1fc>)
 8002044:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002048:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800204c:	d302      	bcc.n	8002054 <Balansir_handler+0x120>
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <Balansir_handler+0x204>)
 8002050:	2220      	movs	r2, #32
 8002052:	611a      	str	r2, [r3, #16]
	if(CellsDatabase[7].Voltage<(MAX_VOLTAGE-1)) GPIOB->BSRR = GPIO_BSRR_BR5;//Battery 8 Balansir OFF
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <Balansir_handler+0x1fc>)
 8002056:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800205a:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 800205e:	d803      	bhi.n	8002068 <Balansir_handler+0x134>
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <Balansir_handler+0x204>)
 8002062:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002066:	611a      	str	r2, [r3, #16]





	volatile uint8_t i = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageBeforeUmax  = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002070:	2300      	movs	r3, #0
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	e033      	b.n	80020de <Balansir_handler+0x1aa>
	{
		if(CellsDatabase[i].Voltage>(MAX_VOLTAGE+DEBAUNCE+DEBAUNCE_FAIL))
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <Balansir_handler+0x1fc>)
 800207e:	460b      	mov	r3, r1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 800208e:	d30f      	bcc.n	80020b0 <Balansir_handler+0x17c>
		{
			Output_OFF();
 8002090:	f000 ff76 	bl	8002f80 <Output_OFF>
			OverChargeStatus=1;
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <Balansir_handler+0x208>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
			logDebugD("OverCharge B",i+1,0);
 800209a:	4829      	ldr	r0, [pc, #164]	; (8002140 <Balansir_handler+0x20c>)
 800209c:	f002 f90e 	bl	80042bc <printToBufferWithoutEndUART1>
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	2200      	movs	r2, #0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4826      	ldr	r0, [pc, #152]	; (8002144 <Balansir_handler+0x210>)
 80020ac:	f002 f95e 	bl	800436c <printToBufferUART1D>
		}
		if(CellsDatabase[i].Voltage <= (MAX_VOLTAGE))
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <Balansir_handler+0x1fc>)
 80020b8:	460b      	mov	r3, r1
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a5b      	subs	r3, r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80020c8:	d804      	bhi.n	80020d4 <Balansir_handler+0x1a0>
		{
			RestoreVoltageBeforeUmax++;
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b07      	cmp	r3, #7
 80020e4:	d9c7      	bls.n	8002076 <Balansir_handler+0x142>
		}

	}

	if((OverChargeStatus==1)&&(RestoreVoltageBeforeUmax == i)&&(OverDisChargeStatus==0)&&(CurrentShortStatus==0))
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <Balansir_handler+0x208>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d11a      	bne.n	8002126 <Balansir_handler+0x1f2>
 80020f0:	79bb      	ldrb	r3, [r7, #6]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d114      	bne.n	8002126 <Balansir_handler+0x1f2>
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <Balansir_handler+0x214>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <Balansir_handler+0x1f2>
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <Balansir_handler+0x218>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <Balansir_handler+0x1f2>
	{
		Output_ON();
 8002110:	f000 ff22 	bl	8002f58 <Output_ON>
		OverChargeStatus=0;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <Balansir_handler+0x208>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
		logDebug("No OverCharge - Output_ON");
 800211a:	4809      	ldr	r0, [pc, #36]	; (8002140 <Balansir_handler+0x20c>)
 800211c:	f002 f8ce 	bl	80042bc <printToBufferWithoutEndUART1>
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <Balansir_handler+0x21c>)
 8002122:	f002 f83f 	bl	80041a4 <printToBufferUART1>
	}

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000ae0 	.word	0x20000ae0
 8002134:	40011000 	.word	0x40011000
 8002138:	40010c00 	.word	0x40010c00
 800213c:	200009b0 	.word	0x200009b0
 8002140:	08005970 	.word	0x08005970
 8002144:	08005978 	.word	0x08005978
 8002148:	200009b1 	.word	0x200009b1
 800214c:	200009b2 	.word	0x200009b2
 8002150:	08005988 	.word	0x08005988

08002154 <MinVoltage_handler>:
void MinVoltage_handler()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	volatile uint8_t i = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t RestoreVoltageonCells = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e087      	b.n	8002278 <MinVoltage_handler+0x124>
	{
		//logDebugD("i ",i+1,0);
		//logDebugD("CellsDatabase[i].Voltage ",CellsDatabase[i].Voltage,2);
		//logDebugD("Res ",(RESISTANCE*Module32(Battery.Current))/1000,2);
		//logDebugD("xxx ",(MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000),2);
		if(CellsDatabase[i].Voltage < (MIN_VOLTAGE - (RESISTANCE*Module32(Battery.Current))/1000))
 8002168:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <MinVoltage_handler+0x188>)
 800216a:	885b      	ldrh	r3, [r3, #2]
 800216c:	b21b      	sxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ffd0 	bl	8001114 <Module32>
 8002174:	4603      	mov	r3, r0
 8002176:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <MinVoltage_handler+0x18c>)
 8002178:	fb82 1203 	smull	r1, r2, r2, r3
 800217c:	1152      	asrs	r2, r2, #5
 800217e:	17db      	asrs	r3, r3, #31
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	f203 1217 	addw	r2, r3, #279	; 0x117
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	4955      	ldr	r1, [pc, #340]	; (80022e4 <MinVoltage_handler+0x190>)
 800218e:	4603      	mov	r3, r0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	db26      	blt.n	80021ec <MinVoltage_handler+0x98>
		{
			if(CellsDatabase[i].BatVoltLowerMin_Status==0)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <MinVoltage_handler+0x190>)
 80021a6:	460b      	mov	r3, r1
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3318      	adds	r3, #24
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12a      	bne.n	800220e <MinVoltage_handler+0xba>
			{
				CellsDatabase[i].TimeSec = time_sec;
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <MinVoltage_handler+0x194>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4948      	ldr	r1, [pc, #288]	; (80022e4 <MinVoltage_handler+0x190>)
 80021c4:	4603      	mov	r3, r0
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a1b      	subs	r3, r3, r0
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	330c      	adds	r3, #12
 80021d0:	601a      	str	r2, [r3, #0]
				CellsDatabase[i].BatVoltLowerMin_Status=1;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <MinVoltage_handler+0x190>)
 80021da:	460b      	mov	r3, r1
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a5b      	subs	r3, r3, r1
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3318      	adds	r3, #24
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	e010      	b.n	800220e <MinVoltage_handler+0xba>
			}
		}
		else
		{
			CellsDatabase[i].BatVoltLowerMin_Status=0;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <MinVoltage_handler+0x190>)
 80021f4:	460b      	mov	r3, r1
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a5b      	subs	r3, r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3318      	adds	r3, #24
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
			RestoreVoltageonCells++;
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	71bb      	strb	r3, [r7, #6]
		}

		if (CellsDatabase[i].BatVoltLowerMin_Status==1)
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	4619      	mov	r1, r3
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <MinVoltage_handler+0x190>)
 8002216:	460b      	mov	r3, r1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3318      	adds	r3, #24
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d122      	bne.n	800226e <MinVoltage_handler+0x11a>
			if((time_sec-CellsDatabase[i].TimeSec)>CELLS_MIN_VOLTAGE_TIMER_OFF_SEC)
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MinVoltage_handler+0x194>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	492c      	ldr	r1, [pc, #176]	; (80022e4 <MinVoltage_handler+0x190>)
 8002234:	4603      	mov	r3, r0
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a1b      	subs	r3, r3, r0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	330c      	adds	r3, #12
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b05      	cmp	r3, #5
 8002246:	d912      	bls.n	800226e <MinVoltage_handler+0x11a>
			{
				OverDisChargeStatus = 1;
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <MinVoltage_handler+0x198>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
				Output_OFF();
 800224e:	f000 fe97 	bl	8002f80 <Output_OFF>
				Battery.LowBattery = 0;
 8002252:	4b22      	ldr	r3, [pc, #136]	; (80022dc <MinVoltage_handler+0x188>)
 8002254:	2200      	movs	r2, #0
 8002256:	721a      	strb	r2, [r3, #8]
				logDebugD("OFF. Min voltage ",i+1,0);
 8002258:	4825      	ldr	r0, [pc, #148]	; (80022f0 <MinVoltage_handler+0x19c>)
 800225a:	f002 f82f 	bl	80042bc <printToBufferWithoutEndUART1>
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3301      	adds	r3, #1
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	4822      	ldr	r0, [pc, #136]	; (80022f4 <MinVoltage_handler+0x1a0>)
 800226a:	f002 f87f 	bl	800436c <printToBufferUART1D>
	for(i=0;i<ID_MAX_COUNT;i++)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b07      	cmp	r3, #7
 800227e:	f67f af73 	bls.w	8002168 <MinVoltage_handler+0x14>
			}
	}

	if((OverDisChargeStatus==1)&&(RestoreVoltageonCells==i)&&(OverChargeStatus==0)&&(CurrentShortStatus==0))
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <MinVoltage_handler+0x198>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d122      	bne.n	80022d2 <MinVoltage_handler+0x17e>
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	429a      	cmp	r2, r3
 8002296:	d11c      	bne.n	80022d2 <MinVoltage_handler+0x17e>
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MinVoltage_handler+0x1a4>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d117      	bne.n	80022d2 <MinVoltage_handler+0x17e>
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MinVoltage_handler+0x1a8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <MinVoltage_handler+0x17e>
	{
		Output_ON();
 80022ac:	f000 fe54 	bl	8002f58 <Output_ON>
		OverDisChargeStatus=0;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MinVoltage_handler+0x198>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
		Battery.LowBattery = 1;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MinVoltage_handler+0x188>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	721a      	strb	r2, [r3, #8]
		logDebugD("ON. B V > min V ",i+1,0);
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MinVoltage_handler+0x19c>)
 80022be:	f001 fffd 	bl	80042bc <printToBufferWithoutEndUART1>
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <MinVoltage_handler+0x1ac>)
 80022ce:	f002 f84d 	bl	800436c <printToBufferUART1D>
	}
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000bc0 	.word	0x20000bc0
 80022e0:	51eb851f 	.word	0x51eb851f
 80022e4:	20000ae0 	.word	0x20000ae0
 80022e8:	20000a0c 	.word	0x20000a0c
 80022ec:	200009b1 	.word	0x200009b1
 80022f0:	08005970 	.word	0x08005970
 80022f4:	080059a4 	.word	0x080059a4
 80022f8:	200009b0 	.word	0x200009b0
 80022fc:	200009b2 	.word	0x200009b2
 8002300:	080059b8 	.word	0x080059b8

08002304 <OffByTimeOutIfNoAction_handler>:
void OffByTimeOutIfNoAction_handler()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	if(PowerOffTimesec>TIMEOUT_OFF)
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <OffByTimeOutIfNoAction_handler+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002310:	d901      	bls.n	8002316 <OffByTimeOutIfNoAction_handler+0x12>
	{
		OFF_Itself();
 8002312:	f7ff fdb5 	bl	8001e80 <OFF_Itself>
	}
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000a24 	.word	0x20000a24

08002320 <VoltageLevelByLEDFlash>:

uint8_t flash = 1;
uint32_t FlashVoltage =0 ;
int32_t step;
void VoltageLevelByLEDFlash()
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

   if (Battery.Voltage <= ID_MAX_COUNT*MIN_VOLTAGE) GPIOB->BSRR =  GPIO_BSRR_BR3;//LED OFF always
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <VoltageLevelByLEDFlash+0xb4>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f5b3 6f0c 	cmp.w	r3, #2240	; 0x8c0
 800232e:	d804      	bhi.n	800233a <VoltageLevelByLEDFlash+0x1a>
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <VoltageLevelByLEDFlash+0xb8>)
 8002332:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002336:	611a      	str	r2, [r3, #16]
		}
		FlashVoltage = FlashVoltage+step;
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
   }

}
 8002338:	e047      	b.n	80023ca <VoltageLevelByLEDFlash+0xaa>
    	step =(10*ID_MAX_COUNT*(Voltage95Percent - Voltage10Percent))/100;//~30
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <VoltageLevelByLEDFlash+0xbc>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <VoltageLevelByLEDFlash+0xc0>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <VoltageLevelByLEDFlash+0xc4>)
 8002354:	fb82 1203 	smull	r1, r2, r2, r3
 8002358:	1152      	asrs	r2, r2, #5
 800235a:	17db      	asrs	r3, r3, #31
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <VoltageLevelByLEDFlash+0xc8>)
 8002360:	6013      	str	r3, [r2, #0]
		if (Battery.Voltage*10>FlashVoltage)
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <VoltageLevelByLEDFlash+0xb4>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	461a      	mov	r2, r3
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <VoltageLevelByLEDFlash+0xcc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d903      	bls.n	8002384 <VoltageLevelByLEDFlash+0x64>
			GPIOB->BSRR =  GPIO_BSRR_BS3;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <VoltageLevelByLEDFlash+0xb8>)
 800237e:	2208      	movs	r2, #8
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	e003      	b.n	800238c <VoltageLevelByLEDFlash+0x6c>
			GPIOB->BSRR =  GPIO_BSRR_BR3;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <VoltageLevelByLEDFlash+0xb8>)
 8002386:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800238a:	611a      	str	r2, [r3, #16]
		FlashVoltage = FlashVoltage+step;
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <VoltageLevelByLEDFlash+0xcc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <VoltageLevelByLEDFlash+0xc8>)
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4413      	add	r3, r2
 8002396:	4a15      	ldr	r2, [pc, #84]	; (80023ec <VoltageLevelByLEDFlash+0xcc>)
 8002398:	6013      	str	r3, [r2, #0]
		if (FlashVoltage>Voltage95Percent*ID_MAX_COUNT*10) FlashVoltage=Voltage10Percent*ID_MAX_COUNT*10;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <VoltageLevelByLEDFlash+0xbc>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <VoltageLevelByLEDFlash+0xcc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d20a      	bcs.n	80023ca <VoltageLevelByLEDFlash+0xaa>
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <VoltageLevelByLEDFlash+0xc0>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <VoltageLevelByLEDFlash+0xcc>)
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000bc0 	.word	0x20000bc0
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	20000e50 	.word	0x20000e50
 80023e0:	20000dd8 	.word	0x20000dd8
 80023e4:	51eb851f 	.word	0x51eb851f
 80023e8:	20000e48 	.word	0x20000e48
 80023ec:	20000a74 	.word	0x20000a74

080023f0 <BUT_Debrief>:


int16_t comp = 0;
void BUT_Debrief(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_10))
 80023f6:	491b      	ldr	r1, [pc, #108]	; (8002464 <BUT_Debrief+0x74>)
 80023f8:	481b      	ldr	r0, [pc, #108]	; (8002468 <BUT_Debrief+0x78>)
 80023fa:	f7ff fd07 	bl	8001e0c <LL_GPIO_IsInputPinSet>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <BUT_Debrief+0x1a>
		key = KEY_OK;
 8002404:	2303      	movs	r3, #3
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	e001      	b.n	800240e <BUT_Debrief+0x1e>
	//else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
	//	key = KEY_BACK;

	else
	{
		key = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
	}

	if (key)
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <BUT_Debrief+0x66>
	{
		if (comp > THRESHOLD2)
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <BUT_Debrief+0x7c>)
 8002416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800241e:	4293      	cmp	r3, r2
 8002420:	dd07      	ble.n	8002432 <BUT_Debrief+0x42>
		{
			comp = THRESHOLD2 - 40;
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <BUT_Debrief+0x7c>)
 8002424:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002428:	801a      	strh	r2, [r3, #0]
			pressedKey = key;
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <BUT_Debrief+0x80>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	7013      	strb	r3, [r2, #0]
			return;
 8002430:	e014      	b.n	800245c <BUT_Debrief+0x6c>
		}
		else comp++;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <BUT_Debrief+0x7c>)
 8002434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002438:	b29b      	uxth	r3, r3
 800243a:	3301      	adds	r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	b21a      	sxth	r2, r3
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <BUT_Debrief+0x7c>)
 8002442:	801a      	strh	r2, [r3, #0]

		if (comp == THRESHOLD)
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <BUT_Debrief+0x7c>)
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	2b14      	cmp	r3, #20
 800244c:	d106      	bne.n	800245c <BUT_Debrief+0x6c>
			{
			pressedKey = key;
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <BUT_Debrief+0x80>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	7013      	strb	r3, [r2, #0]
			return;
 8002454:	e002      	b.n	800245c <BUT_Debrief+0x6c>
		}
	}
	else comp=0;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <BUT_Debrief+0x7c>)
 8002458:	2200      	movs	r2, #0
 800245a:	801a      	strh	r2, [r3, #0]
}
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	04040004 	.word	0x04040004
 8002468:	40011000 	.word	0x40011000
 800246c:	20000a78 	.word	0x20000a78
 8002470:	20000a73 	.word	0x20000a73

08002474 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
	if (pressedKey) PowerOffTimesec=0;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <BUT_GetKey+0x2c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <BUT_GetKey+0x14>
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <BUT_GetKey+0x30>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
	Key_Pressed_t key = pressedKey;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <BUT_GetKey+0x2c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	71fb      	strb	r3, [r7, #7]
	pressedKey = 0;
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <BUT_GetKey+0x2c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
	return key;
 8002494:	79fb      	ldrb	r3, [r7, #7]
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000a73 	.word	0x20000a73
 80024a4:	20000a24 	.word	0x20000a24

080024a8 <SysTick_Callback>:
}



void SysTick_Callback()//1 mc
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	BUT_Debrief();
 80024ac:	f7ff ffa0 	bl	80023f0 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 80024b0:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <SysTick_Callback+0x1c8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <SysTick_Callback+0x1c8>)
 80024b8:	6013      	str	r3, [r2, #0]

	if (Count5mSecond >= 5)
 80024ba:	4b6e      	ldr	r3, [pc, #440]	; (8002674 <SysTick_Callback+0x1cc>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d904      	bls.n	80024ce <SysTick_Callback+0x26>
	{
		Count5mSecond = 0;
 80024c4:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <SysTick_Callback+0x1cc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	801a      	strh	r2, [r3, #0]

		adc_func();
 80024ca:	f000 f8fb 	bl	80026c4 <adc_func>

	}
	if (Count10mSecond >= 10)
 80024ce:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <SysTick_Callback+0x1d0>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d904      	bls.n	80024e2 <SysTick_Callback+0x3a>
	{

		VoltageLevelByLEDFlash();
 80024d8:	f7ff ff22 	bl	8002320 <VoltageLevelByLEDFlash>
		Count10mSecond = 0;
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <SysTick_Callback+0x1d0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
	}

	if (Count100mSecond >= 100)
 80024e2:	4b66      	ldr	r3, [pc, #408]	; (800267c <SysTick_Callback+0x1d4>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b63      	cmp	r3, #99	; 0x63
 80024ea:	d90e      	bls.n	800250a <SysTick_Callback+0x62>
	{
		if (Module16( Battery.Current) > 0 ) PowerOffTimesec = 0;
 80024ec:	4b64      	ldr	r3, [pc, #400]	; (8002680 <SysTick_Callback+0x1d8>)
 80024ee:	885b      	ldrh	r3, [r3, #2]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fdee 	bl	80010d4 <Module16>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	dd02      	ble.n	8002504 <SysTick_Callback+0x5c>
 80024fe:	4b61      	ldr	r3, [pc, #388]	; (8002684 <SysTick_Callback+0x1dc>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
		Count100mSecond = 0;
 8002504:	4b5d      	ldr	r3, [pc, #372]	; (800267c <SysTick_Callback+0x1d4>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]



	}

	if (Count1000mSecond >= 1000)
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <SysTick_Callback+0x1e0>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002514:	f0c0 808e 	bcc.w	8002634 <SysTick_Callback+0x18c>
	{
		OffByTimeOutIfNoAction_handler();
 8002518:	f7ff fef4 	bl	8002304 <OffByTimeOutIfNoAction_handler>
		PowerOffTimesec++;
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <SysTick_Callback+0x1dc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <SysTick_Callback+0x1dc>)
 8002524:	6013      	str	r3, [r2, #0]


		if (time_sec < 4) AllBalansirON();
 8002526:	4b59      	ldr	r3, [pc, #356]	; (800268c <SysTick_Callback+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d802      	bhi.n	8002534 <SysTick_Callback+0x8c>
 800252e:	f7ff fcd9 	bl	8001ee4 <AllBalansirON>
 8002532:	e001      	b.n	8002538 <SysTick_Callback+0x90>
		else 	Balansir_handler();
 8002534:	f7ff fcfe 	bl	8001f34 <Balansir_handler>


		MinVoltage_handler();
 8002538:	f7ff fe0c 	bl	8002154 <MinVoltage_handler>
		Count1000mSecond = 0;
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <SysTick_Callback+0x1e0>)
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
		if (Current < 2)
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <SysTick_Callback+0x1e8>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b21b      	sxth	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	dc0c      	bgt.n	8002566 <SysTick_Callback+0xbe>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <SysTick_Callback+0x1e8>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fdbe 	bl	80010d4 <Module16>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <SysTick_Callback+0x1ec>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4413      	add	r3, r2
 8002562:	4a4c      	ldr	r2, [pc, #304]	; (8002694 <SysTick_Callback+0x1ec>)
 8002564:	6013      	str	r3, [r2, #0]
		if (Current > 2)
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <SysTick_Callback+0x1e8>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	dd0c      	ble.n	800258a <SysTick_Callback+0xe2>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <SysTick_Callback+0x1e8>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b21b      	sxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fdac 	bl	80010d4 <Module16>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <SysTick_Callback+0x1f0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4413      	add	r3, r2
 8002586:	4a44      	ldr	r2, [pc, #272]	; (8002698 <SysTick_Callback+0x1f0>)
 8002588:	6013      	str	r3, [r2, #0]
		if (ChargeStatusForTimer == 1)
 800258a:	4b44      	ldr	r3, [pc, #272]	; (800269c <SysTick_Callback+0x1f4>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d104      	bne.n	800259e <SysTick_Callback+0xf6>
			ChargeTimeSec++;
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <SysTick_Callback+0x1f8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <SysTick_Callback+0x1f8>)
 800259c:	6013      	str	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <SysTick_Callback+0x1fc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d104      	bne.n	80025b2 <SysTick_Callback+0x10a>
			DischargeTimeSec++;
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <SysTick_Callback+0x200>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <SysTick_Callback+0x200>)
 80025b0:	6013      	str	r3, [r2, #0]
		//Global timer
		if (Status_Timer_Sec == 1)
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <SysTick_Callback+0x204>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d104      	bne.n	80025c6 <SysTick_Callback+0x11e>
			Timer_Sec++;
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <SysTick_Callback+0x208>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <SysTick_Callback+0x208>)
 80025c4:	6013      	str	r3, [r2, #0]
		time_sec++;
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <SysTick_Callback+0x1e4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <SysTick_Callback+0x1e4>)
 80025ce:	6013      	str	r3, [r2, #0]


		//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS4;// Battery level
		//else GPIOB->BSRR =  GPIO_BSRR_BR4;

		if (Battery.LowBattery == 0)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <SysTick_Callback+0x1d8>)
 80025d2:	7a1b      	ldrb	r3, [r3, #8]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <SysTick_Callback+0x13a>
		{
			//if (time_sec%2==0) GPIOB->BSRR =  GPIO_BSRR_BS6;//Fault
			//else GPIOB->BSRR =  GPIO_BSRR_BR6;

			GPIOD->BSRR =  GPIO_BSRR_BS2;//Fault
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <SysTick_Callback+0x20c>)
 80025dc:	2204      	movs	r2, #4
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e003      	b.n	80025ea <SysTick_Callback+0x142>
		}
		else
		{
			GPIOD->BSRR =  GPIO_BSRR_BR2;
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <SysTick_Callback+0x20c>)
 80025e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025e8:	611a      	str	r2, [r3, #16]
		//else GPIOB->BSRR =  GPIO_BSRR_BR8;




		if (time_sec%10==0) Output_ON();
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <SysTick_Callback+0x1e4>)
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <SysTick_Callback+0x210>)
 80025f0:	fba3 2301 	umull	r2, r3, r3, r1
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	1aca      	subs	r2, r1, r3
 8002600:	2a00      	cmp	r2, #0
 8002602:	d101      	bne.n	8002608 <SysTick_Callback+0x160>
 8002604:	f000 fca8 	bl	8002f58 <Output_ON>
		//if (time_sec%15==0) Output_OFF();

		if (Battery.Current>2)
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <SysTick_Callback+0x1d8>)
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	b21b      	sxth	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	dd08      	ble.n	8002624 <SysTick_Callback+0x17c>
		{
			Voltage95Percent = VOLTAGE_CHARGE_100_PERCENT;
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <SysTick_Callback+0x214>)
 8002614:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002618:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_CHARGE_10_PERCENT;
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <SysTick_Callback+0x218>)
 800261c:	f240 1245 	movw	r2, #325	; 0x145
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	e007      	b.n	8002634 <SysTick_Callback+0x18c>
		}
		else
		{
			Voltage95Percent = VOLTAGE_95_PERCENT;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <SysTick_Callback+0x214>)
 8002626:	f240 124f 	movw	r2, #335	; 0x14f
 800262a:	801a      	strh	r2, [r3, #0]
			Voltage10Percent = VOLTAGE_10_PERCENT;
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <SysTick_Callback+0x218>)
 800262e:	f240 121d 	movw	r2, #285	; 0x11d
 8002632:	801a      	strh	r2, [r3, #0]
		}
	}
	Count5mSecond++;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <SysTick_Callback+0x1cc>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	3301      	adds	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <SysTick_Callback+0x1cc>)
 8002640:	801a      	strh	r2, [r3, #0]
	Count10mSecond++;
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <SysTick_Callback+0x1d0>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <SysTick_Callback+0x1d0>)
 800264e:	801a      	strh	r2, [r3, #0]
	Count100mSecond++;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <SysTick_Callback+0x1d4>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <SysTick_Callback+0x1d4>)
 800265c:	801a      	strh	r2, [r3, #0]
	Count1000mSecond++;
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <SysTick_Callback+0x1e0>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <SysTick_Callback+0x1e0>)
 800266a:	801a      	strh	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000a14 	.word	0x20000a14
 8002674:	200000f0 	.word	0x200000f0
 8002678:	200000ee 	.word	0x200000ee
 800267c:	200000ec 	.word	0x200000ec
 8002680:	20000bc0 	.word	0x20000bc0
 8002684:	20000a24 	.word	0x20000a24
 8002688:	200000f2 	.word	0x200000f2
 800268c:	20000a0c 	.word	0x20000a0c
 8002690:	20000adc 	.word	0x20000adc
 8002694:	20000a28 	.word	0x20000a28
 8002698:	20000a30 	.word	0x20000a30
 800269c:	20000a71 	.word	0x20000a71
 80026a0:	20000a1c 	.word	0x20000a1c
 80026a4:	20000a72 	.word	0x20000a72
 80026a8:	20000a20 	.word	0x20000a20
 80026ac:	20000a18 	.word	0x20000a18
 80026b0:	20000a10 	.word	0x20000a10
 80026b4:	40011400 	.word	0x40011400
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	20000e50 	.word	0x20000e50
 80026c0:	20000dd8 	.word	0x20000dd8

080026c4 <adc_func>:


void adc_func()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
	//6  [6] I
	//5  [5] I
//	Vref [15]


	volatile int32_t Ut = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
	volatile int32_t It = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
	volatile int32_t Ut_m = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
	volatile int32_t It_m = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[15];// Uref V/10;  1200 * 4096/ChVref
 80026da:	4b97      	ldr	r3, [pc, #604]	; (8002938 <adc_func+0x274>)
 80026dc:	8bdb      	ldrh	r3, [r3, #30]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 80026e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b93      	ldr	r3, [pc, #588]	; (800293c <adc_func+0x278>)
 80026ee:	801a      	strh	r2, [r3, #0]

	It = (RegularConvData[6] * CalibrationData.CalibrationValueForCurrent1) / RegularConvData[15] ;//  Current
 80026f0:	4b91      	ldr	r3, [pc, #580]	; (8002938 <adc_func+0x274>)
 80026f2:	899b      	ldrh	r3, [r3, #12]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b91      	ldr	r3, [pc, #580]	; (8002940 <adc_func+0x27c>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	fb03 f302 	mul.w	r3, r3, r2
 8002700:	4a8d      	ldr	r2, [pc, #564]	; (8002938 <adc_func+0x274>)
 8002702:	8bd2      	ldrh	r2, [r2, #30]
 8002704:	b292      	uxth	r2, r2
 8002706:	fbb3 f3f2 	udiv	r3, r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
	It_m = It;//middle_of_3Imax1(It);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	607b      	str	r3, [r7, #4]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fd18 	bl	8001148 <RunningAverageI1>
 8002718:	4602      	mov	r2, r0
 800271a:	4b8a      	ldr	r3, [pc, #552]	; (8002944 <adc_func+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a88      	ldr	r2, [pc, #544]	; (8002944 <adc_func+0x280>)
 8002722:	6013      	str	r3, [r2, #0]
	SumI1Counter ++;
 8002724:	4b88      	ldr	r3, [pc, #544]	; (8002948 <adc_func+0x284>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b21b      	sxth	r3, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <adc_func+0x284>)
 8002734:	801a      	strh	r2, [r3, #0]
	if (SumI1Counter >= NUM_READ)
 8002736:	4b84      	ldr	r3, [pc, #528]	; (8002948 <adc_func+0x284>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b21b      	sxth	r3, r3
 800273c:	2b1f      	cmp	r3, #31
 800273e:	dd0e      	ble.n	800275e <adc_func+0x9a>
	{
		Battery.Current_Load = SumI1/NUM_READ;
 8002740:	4b80      	ldr	r3, [pc, #512]	; (8002944 <adc_func+0x280>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da00      	bge.n	800274a <adc_func+0x86>
 8002748:	331f      	adds	r3, #31
 800274a:	115b      	asrs	r3, r3, #5
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <adc_func+0x288>)
 8002750:	80da      	strh	r2, [r3, #6]
		SumI1Counter = 0;
 8002752:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <adc_func+0x284>)
 8002754:	2200      	movs	r2, #0
 8002756:	801a      	strh	r2, [r3, #0]
		SumI1 = 0;
 8002758:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <adc_func+0x280>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
	}

	It= (RegularConvData[5] * CalibrationData.CalibrationValueForCurrent2) / RegularConvData[15] ;//  Current
 800275e:	4b76      	ldr	r3, [pc, #472]	; (8002938 <adc_func+0x274>)
 8002760:	895b      	ldrh	r3, [r3, #10]
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <adc_func+0x27c>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	fb03 f302 	mul.w	r3, r3, r2
 800276e:	4a72      	ldr	r2, [pc, #456]	; (8002938 <adc_func+0x274>)
 8002770:	8bd2      	ldrh	r2, [r2, #30]
 8002772:	b292      	uxth	r2, r2
 8002774:	fbb3 f3f2 	udiv	r3, r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
	It_m =It;// middle_of_3Imax2(It);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	607b      	str	r3, [r7, #4]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fd0b 	bl	800119c <RunningAverageI2>
 8002786:	4602      	mov	r2, r0
 8002788:	4b71      	ldr	r3, [pc, #452]	; (8002950 <adc_func+0x28c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4413      	add	r3, r2
 800278e:	4a70      	ldr	r2, [pc, #448]	; (8002950 <adc_func+0x28c>)
 8002790:	6013      	str	r3, [r2, #0]
	SumI2Counter ++;
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <adc_func+0x290>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b21b      	sxth	r3, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <adc_func+0x290>)
 80027a2:	801a      	strh	r2, [r3, #0]
	if (SumI2Counter >= NUM_READ)
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <adc_func+0x290>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	2b1f      	cmp	r3, #31
 80027ac:	dd0e      	ble.n	80027cc <adc_func+0x108>
	{
		Battery.Current_Charge = SumI2/NUM_READ;
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <adc_func+0x28c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <adc_func+0xf4>
 80027b6:	331f      	adds	r3, #31
 80027b8:	115b      	asrs	r3, r3, #5
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <adc_func+0x288>)
 80027be:	809a      	strh	r2, [r3, #4]
		SumI2Counter = 0;
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <adc_func+0x290>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	801a      	strh	r2, [r3, #0]
		SumI2 = 0;
 80027c6:	4b62      	ldr	r3, [pc, #392]	; (8002950 <adc_func+0x28c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	}

	Ut= (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[15];
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <adc_func+0x274>)
 80027ce:	891b      	ldrh	r3, [r3, #8]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <adc_func+0x27c>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	fb03 f302 	mul.w	r3, r3, r2
 80027dc:	4a56      	ldr	r2, [pc, #344]	; (8002938 <adc_func+0x274>)
 80027de:	8bd2      	ldrh	r2, [r2, #30]
 80027e0:	b292      	uxth	r2, r2
 80027e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax1(Ut);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	60bb      	str	r3, [r7, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fcfe 	bl	80011f0 <RunningAverageU1>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b58      	ldr	r3, [pc, #352]	; (8002958 <adc_func+0x294>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a56      	ldr	r2, [pc, #344]	; (8002958 <adc_func+0x294>)
 80027fe:	6013      	str	r3, [r2, #0]
	SumU1Counter ++;
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <adc_func+0x298>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b21b      	sxth	r3, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b53      	ldr	r3, [pc, #332]	; (800295c <adc_func+0x298>)
 8002810:	801a      	strh	r2, [r3, #0]
	if (SumU1Counter >= NUM_READ)
 8002812:	4b52      	ldr	r3, [pc, #328]	; (800295c <adc_func+0x298>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b21b      	sxth	r3, r3
 8002818:	2b1f      	cmp	r3, #31
 800281a:	dd0e      	ble.n	800283a <adc_func+0x176>
	{
		CellsDatabase[0].Voltage = SumU1/NUM_READ;
 800281c:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <adc_func+0x294>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	da00      	bge.n	8002826 <adc_func+0x162>
 8002824:	331f      	adds	r3, #31
 8002826:	115b      	asrs	r3, r3, #5
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <adc_func+0x29c>)
 800282c:	801a      	strh	r2, [r3, #0]
		SumU1Counter = 0;
 800282e:	4b4b      	ldr	r3, [pc, #300]	; (800295c <adc_func+0x298>)
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
		SumU1 = 0;
 8002834:	4b48      	ldr	r3, [pc, #288]	; (8002958 <adc_func+0x294>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[15];
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <adc_func+0x274>)
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <adc_func+0x27c>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	fb03 f302 	mul.w	r3, r3, r2
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <adc_func+0x274>)
 800284c:	8bd2      	ldrh	r2, [r2, #30]
 800284e:	b292      	uxth	r2, r2
 8002850:	fbb3 f3f2 	udiv	r3, r3, r2
 8002854:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax2(Ut);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	60bb      	str	r3, [r7, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fcf1 	bl	8001244 <RunningAverageU2>
 8002862:	4602      	mov	r2, r0
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <adc_func+0x2a0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4413      	add	r3, r2
 800286a:	4a3e      	ldr	r2, [pc, #248]	; (8002964 <adc_func+0x2a0>)
 800286c:	6013      	str	r3, [r2, #0]
	SumU2Counter ++;
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <adc_func+0x2a4>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b21b      	sxth	r3, r3
 8002874:	b29b      	uxth	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <adc_func+0x2a4>)
 800287e:	801a      	strh	r2, [r3, #0]
	if (SumU2Counter >= NUM_READ)
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <adc_func+0x2a4>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b21b      	sxth	r3, r3
 8002886:	2b1f      	cmp	r3, #31
 8002888:	dd0e      	ble.n	80028a8 <adc_func+0x1e4>
	{
		CellsDatabase[1].Voltage = SumU2/NUM_READ;
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <adc_func+0x2a0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	da00      	bge.n	8002894 <adc_func+0x1d0>
 8002892:	331f      	adds	r3, #31
 8002894:	115b      	asrs	r3, r3, #5
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <adc_func+0x29c>)
 800289a:	839a      	strh	r2, [r3, #28]
		SumU2Counter = 0;
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <adc_func+0x2a4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
		SumU2 = 0;
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <adc_func+0x2a0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
	}


	Ut = (RegularConvData[1] * CalibrationData.CalibrationValueForVoltage3) / RegularConvData[15];//
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <adc_func+0x274>)
 80028aa:	885b      	ldrh	r3, [r3, #2]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <adc_func+0x27c>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	fb03 f302 	mul.w	r3, r3, r2
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <adc_func+0x274>)
 80028ba:	8bd2      	ldrh	r2, [r2, #30]
 80028bc:	b292      	uxth	r2, r2
 80028be:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;//middle_of_3Umax3(Ut);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	60bb      	str	r3, [r7, #8]
	SumU3 =SumU3 + RunningAverageU3(Ut_m);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fce4 	bl	8001298 <RunningAverageU3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <adc_func+0x2a8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <adc_func+0x2a8>)
 80028da:	6013      	str	r3, [r2, #0]
	SumU3Counter ++;
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <adc_func+0x2ac>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <adc_func+0x2ac>)
 80028ec:	801a      	strh	r2, [r3, #0]
	if (SumU3Counter >=NUM_READ)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <adc_func+0x2ac>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	2b1f      	cmp	r3, #31
 80028f6:	dd0e      	ble.n	8002916 <adc_func+0x252>
	{
		CellsDatabase[2].Voltage = SumU3/NUM_READ;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <adc_func+0x2a8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da00      	bge.n	8002902 <adc_func+0x23e>
 8002900:	331f      	adds	r3, #31
 8002902:	115b      	asrs	r3, r3, #5
 8002904:	b29a      	uxth	r2, r3
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <adc_func+0x29c>)
 8002908:	871a      	strh	r2, [r3, #56]	; 0x38
		SumU3Counter = 0;
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <adc_func+0x2ac>)
 800290c:	2200      	movs	r2, #0
 800290e:	801a      	strh	r2, [r3, #0]
		SumU3 = 0;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <adc_func+0x2a8>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[0] * CalibrationData.CalibrationValueForVoltage4) / RegularConvData[15];
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <adc_func+0x274>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <adc_func+0x27c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	fb03 f302 	mul.w	r3, r3, r2
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <adc_func+0x274>)
 8002928:	8bd2      	ldrh	r2, [r2, #30]
 800292a:	b292      	uxth	r2, r2
 800292c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002930:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	e01e      	b.n	8002974 <adc_func+0x2b0>
 8002936:	bf00      	nop
 8002938:	20000bcc 	.word	0x20000bcc
 800293c:	20000bec 	.word	0x20000bec
 8002940:	20000004 	.word	0x20000004
 8002944:	20000a34 	.word	0x20000a34
 8002948:	20000a5c 	.word	0x20000a5c
 800294c:	20000bc0 	.word	0x20000bc0
 8002950:	20000a38 	.word	0x20000a38
 8002954:	20000a5e 	.word	0x20000a5e
 8002958:	20000a3c 	.word	0x20000a3c
 800295c:	20000a60 	.word	0x20000a60
 8002960:	20000ae0 	.word	0x20000ae0
 8002964:	20000a40 	.word	0x20000a40
 8002968:	20000a62 	.word	0x20000a62
 800296c:	20000a44 	.word	0x20000a44
 8002970:	20000a64 	.word	0x20000a64
 8002974:	60bb      	str	r3, [r7, #8]
	SumU4 =SumU4 + RunningAverageU4(Ut_m);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fcb7 	bl	80012ec <RunningAverageU4>
 800297e:	4602      	mov	r2, r0
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <adc_func+0x4d0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4413      	add	r3, r2
 8002986:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <adc_func+0x4d0>)
 8002988:	6013      	str	r3, [r2, #0]
	SumU4Counter ++;
 800298a:	4b83      	ldr	r3, [pc, #524]	; (8002b98 <adc_func+0x4d4>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b21b      	sxth	r3, r3
 8002990:	b29b      	uxth	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	b21a      	sxth	r2, r3
 8002998:	4b7f      	ldr	r3, [pc, #508]	; (8002b98 <adc_func+0x4d4>)
 800299a:	801a      	strh	r2, [r3, #0]
	if (SumU4Counter >=NUM_READ)
 800299c:	4b7e      	ldr	r3, [pc, #504]	; (8002b98 <adc_func+0x4d4>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	2b1f      	cmp	r3, #31
 80029a4:	dd0f      	ble.n	80029c6 <adc_func+0x302>
	{
		CellsDatabase[3].Voltage = SumU4/NUM_READ;
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <adc_func+0x4d0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da00      	bge.n	80029b0 <adc_func+0x2ec>
 80029ae:	331f      	adds	r3, #31
 80029b0:	115b      	asrs	r3, r3, #5
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <adc_func+0x4d8>)
 80029b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		SumU4Counter = 0;
 80029ba:	4b77      	ldr	r3, [pc, #476]	; (8002b98 <adc_func+0x4d4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	801a      	strh	r2, [r3, #0]
		SumU4 = 0;
 80029c0:	4b74      	ldr	r3, [pc, #464]	; (8002b94 <adc_func+0x4d0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[12] * CalibrationData.CalibrationValueForVoltage5) / RegularConvData[15];
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <adc_func+0x4dc>)
 80029c8:	8b1b      	ldrh	r3, [r3, #24]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <adc_func+0x4e0>)
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	fb03 f302 	mul.w	r3, r3, r2
 80029d6:	4a72      	ldr	r2, [pc, #456]	; (8002ba0 <adc_func+0x4dc>)
 80029d8:	8bd2      	ldrh	r2, [r2, #30]
 80029da:	b292      	uxth	r2, r2
 80029dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	60bb      	str	r3, [r7, #8]
	SumU5 =SumU5 + RunningAverageU5(Ut_m);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fca9 	bl	8001340 <RunningAverageU5>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <adc_func+0x4e4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a6c      	ldr	r2, [pc, #432]	; (8002ba8 <adc_func+0x4e4>)
 80029f8:	6013      	str	r3, [r2, #0]
	SumU5Counter ++;
 80029fa:	4b6c      	ldr	r3, [pc, #432]	; (8002bac <adc_func+0x4e8>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <adc_func+0x4e8>)
 8002a0a:	801a      	strh	r2, [r3, #0]
	if (SumU5Counter >=NUM_READ)
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <adc_func+0x4e8>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	2b1f      	cmp	r3, #31
 8002a14:	dd0f      	ble.n	8002a36 <adc_func+0x372>
	{
		CellsDatabase[4].Voltage = SumU5/NUM_READ;
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <adc_func+0x4e4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da00      	bge.n	8002a20 <adc_func+0x35c>
 8002a1e:	331f      	adds	r3, #31
 8002a20:	115b      	asrs	r3, r3, #5
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <adc_func+0x4d8>)
 8002a26:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		SumU5Counter = 0;
 8002a2a:	4b60      	ldr	r3, [pc, #384]	; (8002bac <adc_func+0x4e8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
		SumU5 = 0;
 8002a30:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <adc_func+0x4e4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[11] * CalibrationData.CalibrationValueForVoltage6) / RegularConvData[15];//
 8002a36:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <adc_func+0x4dc>)
 8002a38:	8adb      	ldrh	r3, [r3, #22]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <adc_func+0x4e0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	fb03 f302 	mul.w	r3, r3, r2
 8002a46:	4a56      	ldr	r2, [pc, #344]	; (8002ba0 <adc_func+0x4dc>)
 8002a48:	8bd2      	ldrh	r2, [r2, #30]
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	60bb      	str	r3, [r7, #8]
	SumU6 =SumU6 + RunningAverageU6(Ut_m);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fc9b 	bl	8001394 <RunningAverageU6>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <adc_func+0x4ec>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <adc_func+0x4ec>)
 8002a68:	6013      	str	r3, [r2, #0]
	SumU6Counter ++;
 8002a6a:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <adc_func+0x4f0>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <adc_func+0x4f0>)
 8002a7a:	801a      	strh	r2, [r3, #0]
	if (SumU6Counter >=NUM_READ)
 8002a7c:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <adc_func+0x4f0>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	2b1f      	cmp	r3, #31
 8002a84:	dd0f      	ble.n	8002aa6 <adc_func+0x3e2>
	{
		CellsDatabase[5].Voltage = SumU6/NUM_READ;
 8002a86:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <adc_func+0x4ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da00      	bge.n	8002a90 <adc_func+0x3cc>
 8002a8e:	331f      	adds	r3, #31
 8002a90:	115b      	asrs	r3, r3, #5
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <adc_func+0x4d8>)
 8002a96:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		SumU6Counter = 0;
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <adc_func+0x4f0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
		SumU6 = 0;
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <adc_func+0x4ec>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[10] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <adc_func+0x4dc>)
 8002aa8:	8a9b      	ldrh	r3, [r3, #20]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <adc_func+0x4e0>)
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	fb03 f302 	mul.w	r3, r3, r2
 8002ab6:	4a3a      	ldr	r2, [pc, #232]	; (8002ba0 <adc_func+0x4dc>)
 8002ab8:	8bd2      	ldrh	r2, [r2, #30]
 8002aba:	b292      	uxth	r2, r2
 8002abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	60bb      	str	r3, [r7, #8]
	SumU7 =SumU7 + RunningAverageU7(Ut_m);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fc8d 	bl	80013e8 <RunningAverageU7>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <adc_func+0x4f4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <adc_func+0x4f4>)
 8002ad8:	6013      	str	r3, [r2, #0]
	SumU7Counter ++;
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <adc_func+0x4f8>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <adc_func+0x4f8>)
 8002aea:	801a      	strh	r2, [r3, #0]
	if (SumU7Counter >=NUM_READ)
 8002aec:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <adc_func+0x4f8>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	2b1f      	cmp	r3, #31
 8002af4:	dd0f      	ble.n	8002b16 <adc_func+0x452>
	{
		CellsDatabase[6].Voltage = SumU7/NUM_READ;
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <adc_func+0x4f4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da00      	bge.n	8002b00 <adc_func+0x43c>
 8002afe:	331f      	adds	r3, #31
 8002b00:	115b      	asrs	r3, r3, #5
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <adc_func+0x4d8>)
 8002b06:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		SumU7Counter = 0;
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <adc_func+0x4f8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	801a      	strh	r2, [r3, #0]
		SumU7 = 0;
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <adc_func+0x4f4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
	}

	Ut = (RegularConvData[9] * CalibrationData.CalibrationValueForVoltage7) / RegularConvData[15];
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <adc_func+0x4dc>)
 8002b18:	8a5b      	ldrh	r3, [r3, #18]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <adc_func+0x4e0>)
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	fb03 f302 	mul.w	r3, r3, r2
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <adc_func+0x4dc>)
 8002b28:	8bd2      	ldrh	r2, [r2, #30]
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
	Ut_m = Ut;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	60bb      	str	r3, [r7, #8]
	SumU8 =SumU8 + RunningAverageU8(Ut_m);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fc7f 	bl	800143c <RunningAverageU8>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <adc_func+0x4fc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <adc_func+0x4fc>)
 8002b48:	6013      	str	r3, [r2, #0]
	SumU8Counter ++;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <adc_func+0x500>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b21a      	sxth	r2, r3
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <adc_func+0x500>)
 8002b5a:	801a      	strh	r2, [r3, #0]
	if (SumU8Counter >=NUM_READ)
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <adc_func+0x500>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	2b1f      	cmp	r3, #31
 8002b64:	dd0f      	ble.n	8002b86 <adc_func+0x4c2>
	{
		CellsDatabase[7].Voltage = SumU8/NUM_READ;
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <adc_func+0x4fc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da00      	bge.n	8002b70 <adc_func+0x4ac>
 8002b6e:	331f      	adds	r3, #31
 8002b70:	115b      	asrs	r3, r3, #5
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <adc_func+0x4d8>)
 8002b76:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		SumU8Counter = 0;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <adc_func+0x500>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	801a      	strh	r2, [r3, #0]
		SumU8 = 0;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <adc_func+0x4fc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
	}



	uint8_t i = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
	uint16_t Volt = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
 8002b92:	e027      	b.n	8002be4 <adc_func+0x520>
 8002b94:	20000a48 	.word	0x20000a48
 8002b98:	20000a66 	.word	0x20000a66
 8002b9c:	20000ae0 	.word	0x20000ae0
 8002ba0:	20000bcc 	.word	0x20000bcc
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	20000a4c 	.word	0x20000a4c
 8002bac:	20000a68 	.word	0x20000a68
 8002bb0:	20000a50 	.word	0x20000a50
 8002bb4:	20000a6a 	.word	0x20000a6a
 8002bb8:	20000a54 	.word	0x20000a54
 8002bbc:	20000a6c 	.word	0x20000a6c
 8002bc0:	20000a58 	.word	0x20000a58
 8002bc4:	20000a6e 	.word	0x20000a6e
	{
		Volt = Volt + CellsDatabase[i].Voltage;
 8002bc8:	7dfa      	ldrb	r2, [r7, #23]
 8002bca:	4919      	ldr	r1, [pc, #100]	; (8002c30 <adc_func+0x56c>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	8abb      	ldrh	r3, [r7, #20]
 8002bda:	4413      	add	r3, r2
 8002bdc:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<ID_MAX_COUNT;i++)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	3301      	adds	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	d9ee      	bls.n	8002bc8 <adc_func+0x504>
	}
	Battery.Voltage = Volt;
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <adc_func+0x570>)
 8002bec:	8abb      	ldrh	r3, [r7, #20]
 8002bee:	8013      	strh	r3, [r2, #0]
	Battery.Current = 0;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <adc_func+0x570>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Charge > 2) Battery.Current = Battery.Current_Charge;
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <adc_func+0x570>)
 8002bf8:	889b      	ldrh	r3, [r3, #4]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d905      	bls.n	8002c0c <adc_func+0x548>
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <adc_func+0x570>)
 8002c02:	889b      	ldrh	r3, [r3, #4]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <adc_func+0x570>)
 8002c0a:	805a      	strh	r2, [r3, #2]
	if (Battery.Current_Load > 2) Battery.Current = Battery.Current_Load * (-1);
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <adc_func+0x570>)
 8002c0e:	88db      	ldrh	r3, [r3, #6]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d907      	bls.n	8002c26 <adc_func+0x562>
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <adc_func+0x570>)
 8002c18:	88db      	ldrh	r3, [r3, #6]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	425b      	negs	r3, r3
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <adc_func+0x570>)
 8002c24:	805a      	strh	r2, [r3, #2]
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000ae0 	.word	0x20000ae0
 8002c34:	20000bc0 	.word	0x20000bc0

08002c38 <MainScreenAnswer>:
};
struct RequestFromClientToSrv_struct RequestFromClientToSrv;
struct AnswerFromSrvToClient_struct  AnswerFromSrvToClient;

void MainScreenAnswer()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
	uint16_t var_16=0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	80fb      	strh	r3, [r7, #6]
	uint8_t *arrayPointer_16 = (uint8_t*) &var_16;
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	60fb      	str	r3, [r7, #12]

	uint16_t var_u16=0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	80bb      	strh	r3, [r7, #4]
	uint8_t *arrayPointer_u16 = (uint8_t*) &var_u16;
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	60bb      	str	r3, [r7, #8]
	arrayPointer_u16 = (uint8_t*) &Battery.Voltage;
 8002c4e:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <MainScreenAnswer+0x154>)
 8002c50:	60bb      	str	r3, [r7, #8]
	Master.Package[4]=arrayPointer_u16[0];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c58:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=arrayPointer_u16[1];
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785a      	ldrb	r2, [r3, #1]
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c60:	715a      	strb	r2, [r3, #5]

	arrayPointer_16 = (uint8_t*) &Battery.Current;
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <MainScreenAnswer+0x15c>)
 8002c64:	60fb      	str	r3, [r7, #12]
	Master.Package[6]=arrayPointer_16[0];
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c6c:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=arrayPointer_16[1];
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	785a      	ldrb	r2, [r3, #1]
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c74:	71da      	strb	r2, [r3, #7]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[0].Voltage;
 8002c76:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <MainScreenAnswer+0x160>)
 8002c78:	60bb      	str	r3, [r7, #8]
	Master.Package[8]=arrayPointer_u16[0];
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c80:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=arrayPointer_u16[1];
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	785a      	ldrb	r2, [r3, #1]
 8002c86:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c88:	725a      	strb	r2, [r3, #9]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[1].Voltage;
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <MainScreenAnswer+0x164>)
 8002c8c:	60bb      	str	r3, [r7, #8]
	Master.Package[10]=arrayPointer_u16[0];
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c94:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=arrayPointer_u16[1];
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	785a      	ldrb	r2, [r3, #1]
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <MainScreenAnswer+0x158>)
 8002c9c:	72da      	strb	r2, [r3, #11]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[2].Voltage;
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <MainScreenAnswer+0x168>)
 8002ca0:	60bb      	str	r3, [r7, #8]
	Master.Package[12]=arrayPointer_u16[0];
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <MainScreenAnswer+0x158>)
 8002ca8:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=arrayPointer_u16[1];
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	785a      	ldrb	r2, [r3, #1]
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cb0:	735a      	strb	r2, [r3, #13]

	arrayPointer_u16 = (uint8_t*) &CellsDatabase[3].Voltage;
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <MainScreenAnswer+0x16c>)
 8002cb4:	60bb      	str	r3, [r7, #8]
	Master.Package[14]=arrayPointer_u16[0];
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cbc:	739a      	strb	r2, [r3, #14]
	Master.Package[15]=arrayPointer_u16[1];
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	785a      	ldrb	r2, [r3, #1]
 8002cc2:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cc4:	73da      	strb	r2, [r3, #15]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
	}

	if (NUMBER_OF_CELLS == 8)
	{
		arrayPointer_u16 = (uint8_t*) &CellsDatabase[4].Voltage;
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <MainScreenAnswer+0x170>)
 8002cc8:	60bb      	str	r3, [r7, #8]
		Master.Package[16]=arrayPointer_u16[0];
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cd0:	741a      	strb	r2, [r3, #16]
		Master.Package[17]=arrayPointer_u16[1];
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785a      	ldrb	r2, [r3, #1]
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cd8:	745a      	strb	r2, [r3, #17]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[5].Voltage;
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <MainScreenAnswer+0x174>)
 8002cdc:	60bb      	str	r3, [r7, #8]
		Master.Package[18]=arrayPointer_u16[0];
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <MainScreenAnswer+0x158>)
 8002ce4:	749a      	strb	r2, [r3, #18]
		Master.Package[19]=arrayPointer_u16[1];
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785a      	ldrb	r2, [r3, #1]
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cec:	74da      	strb	r2, [r3, #19]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[6].Voltage;
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <MainScreenAnswer+0x178>)
 8002cf0:	60bb      	str	r3, [r7, #8]
		Master.Package[20]=arrayPointer_u16[0];
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <MainScreenAnswer+0x158>)
 8002cf8:	751a      	strb	r2, [r3, #20]
		Master.Package[21]=arrayPointer_u16[1];
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	785a      	ldrb	r2, [r3, #1]
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d00:	755a      	strb	r2, [r3, #21]

		arrayPointer_u16 = (uint8_t*) &CellsDatabase[7].Voltage;
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <MainScreenAnswer+0x17c>)
 8002d04:	60bb      	str	r3, [r7, #8]
		Master.Package[22]=arrayPointer_u16[0];
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d0c:	759a      	strb	r2, [r3, #22]
		Master.Package[23]=arrayPointer_u16[1];
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785a      	ldrb	r2, [r3, #1]
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d14:	75da      	strb	r2, [r3, #23]

		Master.Package[24]=95;
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d18:	225f      	movs	r2, #95	; 0x5f
 8002d1a:	761a      	strb	r2, [r3, #24]
		Master.Package[25]=On_off;
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <MainScreenAnswer+0x180>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d24:	765a      	strb	r2, [r3, #25]
		Master.Data_length = 27-1;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d28:	221a      	movs	r2, #26
 8002d2a:	779a      	strb	r2, [r3, #30]

		Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d2e:	7f9b      	ldrb	r3, [r3, #30]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	4619      	mov	r1, r3
 8002d36:	4816      	ldr	r0, [pc, #88]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d38:	f7fe f830 	bl	8000d9c <calcCRC>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d42:	77da      	strb	r2, [r3, #31]
		Master.Package[26] = Master.DataCRC;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d46:	7fdb      	ldrb	r3, [r3, #31]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d4c:	769a      	strb	r2, [r3, #26]
		Master.Package[27] = 0x0A;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d50:	220a      	movs	r2, #10
 8002d52:	76da      	strb	r2, [r3, #27]
		putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d56:	7f9b      	ldrb	r3, [r3, #30]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	480b      	ldr	r0, [pc, #44]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d62:	f001 f9a1 	bl	80040a8 <putDataInBufferUart2>

	}


	Master.Package[0] = PACKAGE_BEGIN;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d68:	22fe      	movs	r2, #254	; 0xfe
 8002d6a:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d6e:	7f9b      	ldrb	r3, [r3, #30]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d74:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d78:	22fa      	movs	r2, #250	; 0xfa
 8002d7a:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = MAIN_SCREEN;
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <MainScreenAnswer+0x158>)
 8002d7e:	2214      	movs	r2, #20
 8002d80:	70da      	strb	r2, [r3, #3]

}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000bc0 	.word	0x20000bc0
 8002d90:	20000db0 	.word	0x20000db0
 8002d94:	20000bc2 	.word	0x20000bc2
 8002d98:	20000ae0 	.word	0x20000ae0
 8002d9c:	20000afc 	.word	0x20000afc
 8002da0:	20000b18 	.word	0x20000b18
 8002da4:	20000b34 	.word	0x20000b34
 8002da8:	20000b50 	.word	0x20000b50
 8002dac:	20000b6c 	.word	0x20000b6c
 8002db0:	20000b88 	.word	0x20000b88
 8002db4:	20000ba4 	.word	0x20000ba4
 8002db8:	20000a70 	.word	0x20000a70

08002dbc <SystemInfoAnswer>:

void SystemInfoAnswer()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	Master.Package[4]=1;//version before point
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	711a      	strb	r2, [r3, #4]
	Master.Package[5]=0;//version after point
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	715a      	strb	r2, [r3, #5]
	Master.Package[6]=1;// 1- LIFEPO4, 2 - LIon
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	719a      	strb	r2, [r3, #6]
	Master.Package[7]=NUMBER_OF_CELLS;//Number of cells
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	71da      	strb	r2, [r3, #7]
	Master.Package[8]=0;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	721a      	strb	r2, [r3, #8]
	Master.Package[9]=0;
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	725a      	strb	r2, [r3, #9]
	Master.Package[10]=0;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	729a      	strb	r2, [r3, #10]
	Master.Package[11]=0;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	72da      	strb	r2, [r3, #11]
	Master.Package[12]=0;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	731a      	strb	r2, [r3, #12]
	Master.Package[13]=0;
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	735a      	strb	r2, [r3, #13]

	Master.Data_length = 15-1;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002dfe:	220e      	movs	r2, #14
 8002e00:	779a      	strb	r2, [r3, #30]

	Master.Package[0] = PACKAGE_BEGIN;
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e04:	22fe      	movs	r2, #254	; 0xfe
 8002e06:	701a      	strb	r2, [r3, #0]
	Master.Package[1] = Master.Data_length;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e0a:	7f9b      	ldrb	r3, [r3, #30]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e10:	705a      	strb	r2, [r3, #1]
	Master.Package[2] = READ_DATA;
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e14:	22fa      	movs	r2, #250	; 0xfa
 8002e16:	709a      	strb	r2, [r3, #2]
	Master.Package[3] = SYSTEM_INFO;
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	70da      	strb	r2, [r3, #3]
	Master.DataCRC = calcCRC(Master.Package, Master.Data_length, 0);
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e20:	7f9b      	ldrb	r3, [r3, #30]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e2a:	f7fd ffb7 	bl	8000d9c <calcCRC>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e34:	77da      	strb	r2, [r3, #31]
	Master.Package[14] = Master.DataCRC;
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e38:	7fdb      	ldrb	r3, [r3, #31]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e3e:	739a      	strb	r2, [r3, #14]
	Master.Package[15] = 0x0A;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e42:	220a      	movs	r2, #10
 8002e44:	73da      	strb	r2, [r3, #15]
	putDataInBufferUart2(Master.Package,Master.Data_length+2);
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e48:	7f9b      	ldrb	r3, [r3, #30]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	4802      	ldr	r0, [pc, #8]	; (8002e5c <SystemInfoAnswer+0xa0>)
 8002e54:	f001 f928 	bl	80040a8 <putDataInBufferUart2>
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000db0 	.word	0x20000db0

08002e60 <TIM7_Callback>:

void TIM7_Callback()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

	//logDebugD("l=",bufferUart1.rx_counter,0);
	//logDebugD("Le=",ParsingData.IsPassedPackageLengthFlag,0);
	//logDebugD("PB=",ParsingData.IsPassedPackageBeginFlag,0);
	//logDebugD("RE=",ParsingData.IsDataReadyReadFromBuffer,0)
	if (ParsingData.IsDataReadyReadFromBuffer == 1)
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <TIM7_Callback+0xe8>)
 8002e68:	789b      	ldrb	r3, [r3, #2]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d166      	bne.n	8002f3e <TIM7_Callback+0xde>
	{
		if ( (getCharFromBufferUART2() == PACKAGE_BEGIN) )
 8002e70:	f001 f954 	bl	800411c <getCharFromBufferUART2>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2bfe      	cmp	r3, #254	; 0xfe
 8002e78:	d161      	bne.n	8002f3e <TIM7_Callback+0xde>
		{
			ParsingData.IsDataReadyReadFromBuffer = 0;
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <TIM7_Callback+0xe8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	709a      	strb	r2, [r3, #2]
			//logDebug("PACKAGE_BEGIN");
			//logDebugD("l=",bufferUart1.rx_counter,0);

			Slave.Data_length = getCharFromBufferUART2();
 8002e80:	f001 f94c 	bl	800411c <getCharFromBufferUART2>
 8002e84:	4603      	mov	r3, r0
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <TIM7_Callback+0xec>)
 8002e8a:	779a      	strb	r2, [r3, #30]
			Slave.Package[0] = PACKAGE_BEGIN;
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <TIM7_Callback+0xec>)
 8002e8e:	22fe      	movs	r2, #254	; 0xfe
 8002e90:	701a      	strb	r2, [r3, #0]
			Slave.Package[1] = Slave.Data_length;
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <TIM7_Callback+0xec>)
 8002e94:	7f9b      	ldrb	r3, [r3, #30]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <TIM7_Callback+0xec>)
 8002e9a:	705a      	strb	r2, [r3, #1]
			//logDebugD("Slave.Data_length  ",Slave.Data_length,0);
			if (Slave.Data_length <= DATALENGTH_MAX)
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <TIM7_Callback+0xec>)
 8002e9e:	7f9b      	ldrb	r3, [r3, #30]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b1e      	cmp	r3, #30
 8002ea4:	d84b      	bhi.n	8002f3e <TIM7_Callback+0xde>
			{
				uint8_t i=0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	71fb      	strb	r3, [r7, #7]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8002eaa:	2302      	movs	r3, #2
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	e009      	b.n	8002ec4 <TIM7_Callback+0x64>
				{
					Slave.Package[i] = getCharFromBufferUART2();
 8002eb0:	f001 f934 	bl	800411c <getCharFromBufferUART2>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	b2d1      	uxtb	r1, r2
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <TIM7_Callback+0xec>)
 8002ebc:	54d1      	strb	r1, [r2, r3]
				for(i = 2; i<=Slave.Data_length+1;i++)
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <TIM7_Callback+0xec>)
 8002ec8:	7f9b      	ldrb	r3, [r3, #30]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	ddee      	ble.n	8002eb0 <TIM7_Callback+0x50>
					//logDebugD("pack ",Slave.Package[i],0)
				}
				Slave.DataCRC = Slave.Package[i-2];
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	3b02      	subs	r3, #2
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <TIM7_Callback+0xec>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <TIM7_Callback+0xec>)
 8002ede:	77da      	strb	r2, [r3, #31]
				//logDebugD("CRC1",Slave.Package[i-2],0);
				//logDebugD("CRC2",Slave.Package[i-1],0);
				Slave.DataCRC_Calc = calcCRC(Slave.Package, Slave.Data_length, 0);
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <TIM7_Callback+0xec>)
 8002ee2:	7f9b      	ldrb	r3, [r3, #30]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4818      	ldr	r0, [pc, #96]	; (8002f4c <TIM7_Callback+0xec>)
 8002eec:	f7fd ff56 	bl	8000d9c <calcCRC>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <TIM7_Callback+0xec>)
 8002ef6:	f883 2020 	strb.w	r2, [r3, #32]
				if (Slave.DataCRC_Calc == Slave.DataCRC)
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <TIM7_Callback+0xec>)
 8002efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <TIM7_Callback+0xec>)
 8002f04:	7fdb      	ldrb	r3, [r3, #31]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d118      	bne.n	8002f3e <TIM7_Callback+0xde>
				{
					//logDebug("CRC OK");
					if (Slave.Package[2] == READ_DATA)
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <TIM7_Callback+0xec>)
 8002f0e:	789b      	ldrb	r3, [r3, #2]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2bfa      	cmp	r3, #250	; 0xfa
 8002f14:	d113      	bne.n	8002f3e <TIM7_Callback+0xde>
					{
						//logDebug("READ Command");
						if(Slave.Package[3] == MAIN_SCREEN)
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <TIM7_Callback+0xec>)
 8002f18:	78db      	ldrb	r3, [r3, #3]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b14      	cmp	r3, #20
 8002f1e:	d101      	bne.n	8002f24 <TIM7_Callback+0xc4>
						{
							//logDebug("MAIN_SCREEN");
							MainScreenAnswer();
 8002f20:	f7ff fe8a 	bl	8002c38 <MainScreenAnswer>
						}
						if(Slave.Package[3] == SYSTEM_INFO)
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <TIM7_Callback+0xec>)
 8002f26:	78db      	ldrb	r3, [r3, #3]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d107      	bne.n	8002f3e <TIM7_Callback+0xde>
						{
							logDebug("SYSTEM_INFO");
 8002f2e:	4808      	ldr	r0, [pc, #32]	; (8002f50 <TIM7_Callback+0xf0>)
 8002f30:	f001 f9c4 	bl	80042bc <printToBufferWithoutEndUART1>
 8002f34:	4807      	ldr	r0, [pc, #28]	; (8002f54 <TIM7_Callback+0xf4>)
 8002f36:	f001 f935 	bl	80041a4 <printToBufferUART1>
							SystemInfoAnswer();
 8002f3a:	f7ff ff3f 	bl	8002dbc <SystemInfoAnswer>
					}
				}//CRC
			}//DATALENGTH_MAX
		}//PACKAGE_BEGIN
	}//ParsingData.IsDataReadyReadFromBuffer
}//f
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200009b8 	.word	0x200009b8
 8002f4c:	20000ddc 	.word	0x20000ddc
 8002f50:	08005970 	.word	0x08005970
 8002f54:	080059cc 	.word	0x080059cc

08002f58 <Output_ON>:

void Output_ON()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BS8;//ON OUT
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <Output_ON+0x1c>)
 8002f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f62:	611a      	str	r2, [r3, #16]
    logDebug("out on");
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <Output_ON+0x20>)
 8002f66:	f001 f9a9 	bl	80042bc <printToBufferWithoutEndUART1>
 8002f6a:	4804      	ldr	r0, [pc, #16]	; (8002f7c <Output_ON+0x24>)
 8002f6c:	f001 f91a 	bl	80041a4 <printToBufferUART1>
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010800 	.word	0x40010800
 8002f78:	08005970 	.word	0x08005970
 8002f7c:	080059d8 	.word	0x080059d8

08002f80 <Output_OFF>:
void Output_OFF()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    GPIOA->BSRR =  GPIO_BSRR_BR8;//ON OUT
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <Output_OFF+0x1c>)
 8002f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f8a:	611a      	str	r2, [r3, #16]
    logDebug("out off");
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <Output_OFF+0x20>)
 8002f8e:	f001 f995 	bl	80042bc <printToBufferWithoutEndUART1>
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <Output_OFF+0x24>)
 8002f94:	f001 f906 	bl	80041a4 <printToBufferUART1>
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010800 	.word	0x40010800
 8002fa0:	08005970 	.word	0x08005970
 8002fa4:	080059e0 	.word	0x080059e0

08002fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f7fe fe84 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002fb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002fb8:	f7fe fe68 	bl	8001c8c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f7fe fa67 	bl	8001490 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002fc2:	f7fe fa89 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	210f      	movs	r1, #15
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fad7 	bl	8001580 <NVIC_EncodePriority>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	f7fe faa7 	bl	800152c <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002fde:	f7fe ff3b 	bl	8001e58 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fe2:	f000 fa17 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe6:	f000 fd0d 	bl	8003a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fea:	f000 fcf3 	bl	80039d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002fee:	f000 fa49 	bl	8003484 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002ff2:	f000 fc15 	bl	8003820 <MX_USART1_UART_Init>

  MX_USART3_UART_Init();
 8002ff6:	f000 fc7f 	bl	80038f8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8002ffa:	f000 fbd1 	bl	80037a0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  SystemCoreClockUpdate();
 8002ffe:	f000 ff5d 	bl	8003ebc <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8003002:	4bb5      	ldr	r3, [pc, #724]	; (80032d8 <main+0x330>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4ab5      	ldr	r2, [pc, #724]	; (80032dc <main+0x334>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fae8 	bl	80015e4 <SysTick_Config>

	LoggingData.RecordsQuantity= 0;
 8003014:	4bb2      	ldr	r3, [pc, #712]	; (80032e0 <main+0x338>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
	uint8_t EEpromReadStatus;

	delay_ms(100);
 800301a:	2064      	movs	r0, #100	; 0x64
 800301c:	f7fd feaa 	bl	8000d74 <delay_ms>
   GPIOA->BSRR =  GPIO_BSRR_BS11;//ON CPU
 8003020:	4bb0      	ldr	r3, [pc, #704]	; (80032e4 <main+0x33c>)
 8003022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003026:	611a      	str	r2, [r3, #16]
   GPIOA->BSRR =  GPIO_BSRR_BS12;//12 V for
 8003028:	4bae      	ldr	r3, [pc, #696]	; (80032e4 <main+0x33c>)
 800302a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800302e:	611a      	str	r2, [r3, #16]
   GPIOB->BSRR =  GPIO_BSRR_BS4;//12 V for
 8003030:	4bad      	ldr	r3, [pc, #692]	; (80032e8 <main+0x340>)
 8003032:	2210      	movs	r2, #16
 8003034:	611a      	str	r2, [r3, #16]
   logDebug("System ON");
 8003036:	48ad      	ldr	r0, [pc, #692]	; (80032ec <main+0x344>)
 8003038:	f001 f940 	bl	80042bc <printToBufferWithoutEndUART1>
 800303c:	48ac      	ldr	r0, [pc, #688]	; (80032f0 <main+0x348>)
 800303e:	f001 f8b1 	bl	80041a4 <printToBufferUART1>
	FlashVoltage = Voltage10Percent*ID_MAX_COUNT*10;
 8003042:	4bac      	ldr	r3, [pc, #688]	; (80032f4 <main+0x34c>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	461a      	mov	r2, r3
 8003054:	4ba8      	ldr	r3, [pc, #672]	; (80032f8 <main+0x350>)
 8003056:	601a      	str	r2, [r3, #0]

  //FactoryWriteToFlash_CRC();
	delay_ms(1000);
 8003058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800305c:	f7fd fe8a 	bl	8000d74 <delay_ms>

	flash_read_block();
 8003060:	f7fd f9d4 	bl	800040c <flash_read_block>



	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <main+0x338>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b17      	cmp	r3, #23
 800306a:	d902      	bls.n	8003072 <main+0xca>
 800306c:	4b9c      	ldr	r3, [pc, #624]	; (80032e0 <main+0x338>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
	EEpromReadStatus = ReadFromFlash();
 8003072:	f7fd fb63 	bl	800073c <ReadFromFlash>
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
	if (EEpromReadStatus==0)
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <main+0xf4>
	{
		delay_ms(1000);
 8003080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003084:	f7fd fe76 	bl	8000d74 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8003088:	f7fd fb58 	bl	800073c <ReadFromFlash>
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
		logInfo("Read from EEprom - FAIL");
 8003090:	489a      	ldr	r0, [pc, #616]	; (80032fc <main+0x354>)
 8003092:	f001 f913 	bl	80042bc <printToBufferWithoutEndUART1>
 8003096:	489a      	ldr	r0, [pc, #616]	; (8003300 <main+0x358>)
 8003098:	f001 f884 	bl	80041a4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 0)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <main+0x114>
	{

		delay_ms(4000);
 80030a2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80030a6:	f7fd fe65 	bl	8000d74 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 80030aa:	4896      	ldr	r0, [pc, #600]	; (8003304 <main+0x35c>)
 80030ac:	f7fd fb92 	bl	80007d4 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 80030b0:	4892      	ldr	r0, [pc, #584]	; (80032fc <main+0x354>)
 80030b2:	f001 f903 	bl	80042bc <printToBufferWithoutEndUART1>
 80030b6:	4892      	ldr	r0, [pc, #584]	; (8003300 <main+0x358>)
 80030b8:	f001 f874 	bl	80041a4 <printToBufferUART1>
	}
	if (EEpromReadStatus == 1)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <main+0x126>
		logInfo("Read from EEprom - SUCCESS");
 80030c2:	488e      	ldr	r0, [pc, #568]	; (80032fc <main+0x354>)
 80030c4:	f001 f8fa 	bl	80042bc <printToBufferWithoutEndUART1>
 80030c8:	488f      	ldr	r0, [pc, #572]	; (8003308 <main+0x360>)
 80030ca:	f001 f86b 	bl	80041a4 <printToBufferUART1>



  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 80030ce:	4b8f      	ldr	r3, [pc, #572]	; (800330c <main+0x364>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	4a8f      	ldr	r2, [pc, #572]	; (8003310 <main+0x368>)
 80030d4:	6013      	str	r3, [r2, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 80030d6:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <main+0x36c>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a8d      	ldr	r2, [pc, #564]	; (8003318 <main+0x370>)
 80030e4:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <main+0x36c>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4a8c      	ldr	r2, [pc, #560]	; (800331c <main+0x374>)
 80030ec:	6013      	str	r3, [r2, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 80030ee:	4b89      	ldr	r3, [pc, #548]	; (8003314 <main+0x36c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a8b      	ldr	r2, [pc, #556]	; (8003320 <main+0x378>)
 80030f4:	6013      	str	r3, [r2, #0]
 // Generation_Coefficients_R_A_B();
  InfoToUARTBeforeStart();
 80030f6:	f7fd fcbb 	bl	8000a70 <InfoToUARTBeforeStart>
  logInfo(Version);
 80030fa:	4880      	ldr	r0, [pc, #512]	; (80032fc <main+0x354>)
 80030fc:	f001 f8de 	bl	80042bc <printToBufferWithoutEndUART1>
 8003100:	4888      	ldr	r0, [pc, #544]	; (8003324 <main+0x37c>)
 8003102:	f001 f84f 	bl	80041a4 <printToBufferUART1>
  delay_ms(1000);
 8003106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800310a:	f7fd fe33 	bl	8000d74 <delay_ms>

  //Output_ON();
  logDebug("OUTPUT ON");
 800310e:	4877      	ldr	r0, [pc, #476]	; (80032ec <main+0x344>)
 8003110:	f001 f8d4 	bl	80042bc <printToBufferWithoutEndUART1>
 8003114:	4884      	ldr	r0, [pc, #528]	; (8003328 <main+0x380>)
 8003116:	f001 f845 	bl	80041a4 <printToBufferUART1>
  //printToBufferUART1("Hello");

//	  GPIOC->BSRR =  GPIO_BSRR_BS15;
  Battery.LowBattery = 1;
 800311a:	4b84      	ldr	r3, [pc, #528]	; (800332c <main+0x384>)
 800311c:	2201      	movs	r2, #1
 800311e:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BUT_GetKey();
 8003120:	f7ff f9a8 	bl	8002474 <BUT_GetKey>
		//11 [10] B7
		//10 [9] B8
		//6  [6] I
		//5  [5] I
	//	Vref [15]
	  logDebugD("sec ",time_sec,0);
 8003124:	4871      	ldr	r0, [pc, #452]	; (80032ec <main+0x344>)
 8003126:	f001 f8c9 	bl	80042bc <printToBufferWithoutEndUART1>
 800312a:	4b81      	ldr	r3, [pc, #516]	; (8003330 <main+0x388>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	4619      	mov	r1, r3
 8003132:	4880      	ldr	r0, [pc, #512]	; (8003334 <main+0x38c>)
 8003134:	f001 f91a 	bl	800436c <printToBufferUART1D>
	  logDebugD("[6] ", RegularConvData[6],0);
 8003138:	486c      	ldr	r0, [pc, #432]	; (80032ec <main+0x344>)
 800313a:	f001 f8bf 	bl	80042bc <printToBufferWithoutEndUART1>
 800313e:	4b7e      	ldr	r3, [pc, #504]	; (8003338 <main+0x390>)
 8003140:	899b      	ldrh	r3, [r3, #12]
 8003142:	b29b      	uxth	r3, r3
 8003144:	2200      	movs	r2, #0
 8003146:	4619      	mov	r1, r3
 8003148:	487c      	ldr	r0, [pc, #496]	; (800333c <main+0x394>)
 800314a:	f001 f90f 	bl	800436c <printToBufferUART1D>
	  logDebugD("I charge ", Battery.Current_Load,2);
 800314e:	4867      	ldr	r0, [pc, #412]	; (80032ec <main+0x344>)
 8003150:	f001 f8b4 	bl	80042bc <printToBufferWithoutEndUART1>
 8003154:	4b75      	ldr	r3, [pc, #468]	; (800332c <main+0x384>)
 8003156:	88db      	ldrh	r3, [r3, #6]
 8003158:	b29b      	uxth	r3, r3
 800315a:	2202      	movs	r2, #2
 800315c:	4619      	mov	r1, r3
 800315e:	4878      	ldr	r0, [pc, #480]	; (8003340 <main+0x398>)
 8003160:	f001 f904 	bl	800436c <printToBufferUART1D>
	  logDebugD("[5] ", RegularConvData[5],0);
 8003164:	4861      	ldr	r0, [pc, #388]	; (80032ec <main+0x344>)
 8003166:	f001 f8a9 	bl	80042bc <printToBufferWithoutEndUART1>
 800316a:	4b73      	ldr	r3, [pc, #460]	; (8003338 <main+0x390>)
 800316c:	895b      	ldrh	r3, [r3, #10]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2200      	movs	r2, #0
 8003172:	4619      	mov	r1, r3
 8003174:	4873      	ldr	r0, [pc, #460]	; (8003344 <main+0x39c>)
 8003176:	f001 f8f9 	bl	800436c <printToBufferUART1D>
	  logDebugD("I Discharge ", Battery.Current_Charge,2);
 800317a:	485c      	ldr	r0, [pc, #368]	; (80032ec <main+0x344>)
 800317c:	f001 f89e 	bl	80042bc <printToBufferWithoutEndUART1>
 8003180:	4b6a      	ldr	r3, [pc, #424]	; (800332c <main+0x384>)
 8003182:	889b      	ldrh	r3, [r3, #4]
 8003184:	b29b      	uxth	r3, r3
 8003186:	2202      	movs	r2, #2
 8003188:	4619      	mov	r1, r3
 800318a:	486f      	ldr	r0, [pc, #444]	; (8003348 <main+0x3a0>)
 800318c:	f001 f8ee 	bl	800436c <printToBufferUART1D>
	  logDebugD("[4] ", RegularConvData[4],0);
 8003190:	4856      	ldr	r0, [pc, #344]	; (80032ec <main+0x344>)
 8003192:	f001 f893 	bl	80042bc <printToBufferWithoutEndUART1>
 8003196:	4b68      	ldr	r3, [pc, #416]	; (8003338 <main+0x390>)
 8003198:	891b      	ldrh	r3, [r3, #8]
 800319a:	b29b      	uxth	r3, r3
 800319c:	2200      	movs	r2, #0
 800319e:	4619      	mov	r1, r3
 80031a0:	486a      	ldr	r0, [pc, #424]	; (800334c <main+0x3a4>)
 80031a2:	f001 f8e3 	bl	800436c <printToBufferUART1D>
	  logDebugD("B1 ", CellsDatabase[0].Voltage,2);
 80031a6:	4851      	ldr	r0, [pc, #324]	; (80032ec <main+0x344>)
 80031a8:	f001 f888 	bl	80042bc <printToBufferWithoutEndUART1>
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <main+0x3a8>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	2202      	movs	r2, #2
 80031b2:	4619      	mov	r1, r3
 80031b4:	4867      	ldr	r0, [pc, #412]	; (8003354 <main+0x3ac>)
 80031b6:	f001 f8d9 	bl	800436c <printToBufferUART1D>
	  logDebugD("[3] ", RegularConvData[3],0);
 80031ba:	484c      	ldr	r0, [pc, #304]	; (80032ec <main+0x344>)
 80031bc:	f001 f87e 	bl	80042bc <printToBufferWithoutEndUART1>
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <main+0x390>)
 80031c2:	88db      	ldrh	r3, [r3, #6]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	4619      	mov	r1, r3
 80031ca:	4863      	ldr	r0, [pc, #396]	; (8003358 <main+0x3b0>)
 80031cc:	f001 f8ce 	bl	800436c <printToBufferUART1D>
	  logDebugD("B2 ", CellsDatabase[1].Voltage,2);
 80031d0:	4846      	ldr	r0, [pc, #280]	; (80032ec <main+0x344>)
 80031d2:	f001 f873 	bl	80042bc <printToBufferWithoutEndUART1>
 80031d6:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <main+0x3a8>)
 80031d8:	8b9b      	ldrh	r3, [r3, #28]
 80031da:	2202      	movs	r2, #2
 80031dc:	4619      	mov	r1, r3
 80031de:	485f      	ldr	r0, [pc, #380]	; (800335c <main+0x3b4>)
 80031e0:	f001 f8c4 	bl	800436c <printToBufferUART1D>
	  logDebugD("[1] ", RegularConvData[1],0);
 80031e4:	4841      	ldr	r0, [pc, #260]	; (80032ec <main+0x344>)
 80031e6:	f001 f869 	bl	80042bc <printToBufferWithoutEndUART1>
 80031ea:	4b53      	ldr	r3, [pc, #332]	; (8003338 <main+0x390>)
 80031ec:	885b      	ldrh	r3, [r3, #2]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	4619      	mov	r1, r3
 80031f4:	485a      	ldr	r0, [pc, #360]	; (8003360 <main+0x3b8>)
 80031f6:	f001 f8b9 	bl	800436c <printToBufferUART1D>
	  logDebugD("B3 ", CellsDatabase[2].Voltage,2);
 80031fa:	483c      	ldr	r0, [pc, #240]	; (80032ec <main+0x344>)
 80031fc:	f001 f85e 	bl	80042bc <printToBufferWithoutEndUART1>
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <main+0x3a8>)
 8003202:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003204:	2202      	movs	r2, #2
 8003206:	4619      	mov	r1, r3
 8003208:	4856      	ldr	r0, [pc, #344]	; (8003364 <main+0x3bc>)
 800320a:	f001 f8af 	bl	800436c <printToBufferUART1D>
	  logDebugD("[0] ", RegularConvData[0],0);
 800320e:	4837      	ldr	r0, [pc, #220]	; (80032ec <main+0x344>)
 8003210:	f001 f854 	bl	80042bc <printToBufferWithoutEndUART1>
 8003214:	4b48      	ldr	r3, [pc, #288]	; (8003338 <main+0x390>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	2200      	movs	r2, #0
 800321c:	4619      	mov	r1, r3
 800321e:	4852      	ldr	r0, [pc, #328]	; (8003368 <main+0x3c0>)
 8003220:	f001 f8a4 	bl	800436c <printToBufferUART1D>
	  logDebugD("B4 ", CellsDatabase[3].Voltage,2);
 8003224:	4831      	ldr	r0, [pc, #196]	; (80032ec <main+0x344>)
 8003226:	f001 f849 	bl	80042bc <printToBufferWithoutEndUART1>
 800322a:	4b49      	ldr	r3, [pc, #292]	; (8003350 <main+0x3a8>)
 800322c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003230:	2202      	movs	r2, #2
 8003232:	4619      	mov	r1, r3
 8003234:	484d      	ldr	r0, [pc, #308]	; (800336c <main+0x3c4>)
 8003236:	f001 f899 	bl	800436c <printToBufferUART1D>
	  logDebugD("[12] ", RegularConvData[12],0);
 800323a:	482c      	ldr	r0, [pc, #176]	; (80032ec <main+0x344>)
 800323c:	f001 f83e 	bl	80042bc <printToBufferWithoutEndUART1>
 8003240:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <main+0x390>)
 8003242:	8b1b      	ldrh	r3, [r3, #24]
 8003244:	b29b      	uxth	r3, r3
 8003246:	2200      	movs	r2, #0
 8003248:	4619      	mov	r1, r3
 800324a:	4849      	ldr	r0, [pc, #292]	; (8003370 <main+0x3c8>)
 800324c:	f001 f88e 	bl	800436c <printToBufferUART1D>
	  logDebugD("B5 ", CellsDatabase[4].Voltage,2);
 8003250:	4826      	ldr	r0, [pc, #152]	; (80032ec <main+0x344>)
 8003252:	f001 f833 	bl	80042bc <printToBufferWithoutEndUART1>
 8003256:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <main+0x3a8>)
 8003258:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800325c:	2202      	movs	r2, #2
 800325e:	4619      	mov	r1, r3
 8003260:	4844      	ldr	r0, [pc, #272]	; (8003374 <main+0x3cc>)
 8003262:	f001 f883 	bl	800436c <printToBufferUART1D>
	  logDebugD("[11] ", RegularConvData[11],0);
 8003266:	4821      	ldr	r0, [pc, #132]	; (80032ec <main+0x344>)
 8003268:	f001 f828 	bl	80042bc <printToBufferWithoutEndUART1>
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <main+0x390>)
 800326e:	8adb      	ldrh	r3, [r3, #22]
 8003270:	b29b      	uxth	r3, r3
 8003272:	2200      	movs	r2, #0
 8003274:	4619      	mov	r1, r3
 8003276:	4840      	ldr	r0, [pc, #256]	; (8003378 <main+0x3d0>)
 8003278:	f001 f878 	bl	800436c <printToBufferUART1D>
	  logDebugD("B6 ", CellsDatabase[5].Voltage,2);
 800327c:	481b      	ldr	r0, [pc, #108]	; (80032ec <main+0x344>)
 800327e:	f001 f81d 	bl	80042bc <printToBufferWithoutEndUART1>
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <main+0x3a8>)
 8003284:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8003288:	2202      	movs	r2, #2
 800328a:	4619      	mov	r1, r3
 800328c:	483b      	ldr	r0, [pc, #236]	; (800337c <main+0x3d4>)
 800328e:	f001 f86d 	bl	800436c <printToBufferUART1D>
	  logDebugD("[10] ", RegularConvData[10],0);
 8003292:	4816      	ldr	r0, [pc, #88]	; (80032ec <main+0x344>)
 8003294:	f001 f812 	bl	80042bc <printToBufferWithoutEndUART1>
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <main+0x390>)
 800329a:	8a9b      	ldrh	r3, [r3, #20]
 800329c:	b29b      	uxth	r3, r3
 800329e:	2200      	movs	r2, #0
 80032a0:	4619      	mov	r1, r3
 80032a2:	4837      	ldr	r0, [pc, #220]	; (8003380 <main+0x3d8>)
 80032a4:	f001 f862 	bl	800436c <printToBufferUART1D>
	  logDebugD("B7 ", CellsDatabase[6].Voltage,2);
 80032a8:	4810      	ldr	r0, [pc, #64]	; (80032ec <main+0x344>)
 80032aa:	f001 f807 	bl	80042bc <printToBufferWithoutEndUART1>
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <main+0x3a8>)
 80032b0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80032b4:	2202      	movs	r2, #2
 80032b6:	4619      	mov	r1, r3
 80032b8:	4832      	ldr	r0, [pc, #200]	; (8003384 <main+0x3dc>)
 80032ba:	f001 f857 	bl	800436c <printToBufferUART1D>
	  logDebugD("[9] ", RegularConvData[9],0);
 80032be:	480b      	ldr	r0, [pc, #44]	; (80032ec <main+0x344>)
 80032c0:	f000 fffc 	bl	80042bc <printToBufferWithoutEndUART1>
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <main+0x390>)
 80032c6:	8a5b      	ldrh	r3, [r3, #18]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	4619      	mov	r1, r3
 80032ce:	482e      	ldr	r0, [pc, #184]	; (8003388 <main+0x3e0>)
 80032d0:	f001 f84c 	bl	800436c <printToBufferUART1D>
 80032d4:	e05a      	b.n	800338c <main+0x3e4>
 80032d6:	bf00      	nop
 80032d8:	200000cc 	.word	0x200000cc
 80032dc:	10624dd3 	.word	0x10624dd3
 80032e0:	20000bf0 	.word	0x20000bf0
 80032e4:	40010800 	.word	0x40010800
 80032e8:	40010c00 	.word	0x40010c00
 80032ec:	08005970 	.word	0x08005970
 80032f0:	080059e8 	.word	0x080059e8
 80032f4:	20000dd8 	.word	0x20000dd8
 80032f8:	20000a74 	.word	0x20000a74
 80032fc:	0800594c 	.word	0x0800594c
 8003300:	080059f4 	.word	0x080059f4
 8003304:	08005a0c 	.word	0x08005a0c
 8003308:	08005a1c 	.word	0x08005a1c
 800330c:	2000009c 	.word	0x2000009c
 8003310:	20000a2c 	.word	0x20000a2c
 8003314:	20000054 	.word	0x20000054
 8003318:	20000e44 	.word	0x20000e44
 800331c:	20000e4c 	.word	0x20000e4c
 8003320:	20000dd4 	.word	0x20000dd4
 8003324:	200000bc 	.word	0x200000bc
 8003328:	08005a38 	.word	0x08005a38
 800332c:	20000bc0 	.word	0x20000bc0
 8003330:	20000a0c 	.word	0x20000a0c
 8003334:	08005a44 	.word	0x08005a44
 8003338:	20000bcc 	.word	0x20000bcc
 800333c:	08005a4c 	.word	0x08005a4c
 8003340:	08005a54 	.word	0x08005a54
 8003344:	08005a60 	.word	0x08005a60
 8003348:	08005a68 	.word	0x08005a68
 800334c:	08005a78 	.word	0x08005a78
 8003350:	20000ae0 	.word	0x20000ae0
 8003354:	08005a80 	.word	0x08005a80
 8003358:	08005a84 	.word	0x08005a84
 800335c:	08005a8c 	.word	0x08005a8c
 8003360:	08005a90 	.word	0x08005a90
 8003364:	08005a98 	.word	0x08005a98
 8003368:	08005a9c 	.word	0x08005a9c
 800336c:	08005aa4 	.word	0x08005aa4
 8003370:	08005aa8 	.word	0x08005aa8
 8003374:	08005ab0 	.word	0x08005ab0
 8003378:	08005ab4 	.word	0x08005ab4
 800337c:	08005abc 	.word	0x08005abc
 8003380:	08005ac0 	.word	0x08005ac0
 8003384:	08005ac8 	.word	0x08005ac8
 8003388:	08005acc 	.word	0x08005acc
	  logDebugD("B8 ", CellsDatabase[7].Voltage,2);
 800338c:	4818      	ldr	r0, [pc, #96]	; (80033f0 <main+0x448>)
 800338e:	f000 ff95 	bl	80042bc <printToBufferWithoutEndUART1>
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <main+0x44c>)
 8003394:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003398:	2202      	movs	r2, #2
 800339a:	4619      	mov	r1, r3
 800339c:	4816      	ldr	r0, [pc, #88]	; (80033f8 <main+0x450>)
 800339e:	f000 ffe5 	bl	800436c <printToBufferUART1D>

	  logDebugD("Ref ", RegularConvData[15],0);
 80033a2:	4813      	ldr	r0, [pc, #76]	; (80033f0 <main+0x448>)
 80033a4:	f000 ff8a 	bl	80042bc <printToBufferWithoutEndUART1>
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <main+0x454>)
 80033aa:	8bdb      	ldrh	r3, [r3, #30]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2200      	movs	r2, #0
 80033b0:	4619      	mov	r1, r3
 80033b2:	4813      	ldr	r0, [pc, #76]	; (8003400 <main+0x458>)
 80033b4:	f000 ffda 	bl	800436c <printToBufferUART1D>
	  logDebugD("Ucontroller:", U_Controller,2);
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <main+0x448>)
 80033ba:	f000 ff7f 	bl	80042bc <printToBufferWithoutEndUART1>
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <main+0x45c>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2202      	movs	r2, #2
 80033c6:	4619      	mov	r1, r3
 80033c8:	480f      	ldr	r0, [pc, #60]	; (8003408 <main+0x460>)
 80033ca:	f000 ffcf 	bl	800436c <printToBufferUART1D>
	  logDebugD("Battery.Voltage:", Battery.Voltage,2);
 80033ce:	4808      	ldr	r0, [pc, #32]	; (80033f0 <main+0x448>)
 80033d0:	f000 ff74 	bl	80042bc <printToBufferWithoutEndUART1>
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <main+0x464>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2202      	movs	r2, #2
 80033dc:	4619      	mov	r1, r3
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <main+0x468>)
 80033e0:	f000 ffc4 	bl	800436c <printToBufferUART1D>
	 // logDebugD("PowerOffTimesec = ",PowerOffTimesec, 0);




	  delay_ms(1000);
 80033e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e8:	f7fd fcc4 	bl	8000d74 <delay_ms>
	  BUT_GetKey();
 80033ec:	e698      	b.n	8003120 <main+0x178>
 80033ee:	bf00      	nop
 80033f0:	08005970 	.word	0x08005970
 80033f4:	20000ae0 	.word	0x20000ae0
 80033f8:	08005ad4 	.word	0x08005ad4
 80033fc:	20000bcc 	.word	0x20000bcc
 8003400:	08005ad8 	.word	0x08005ad8
 8003404:	20000bec 	.word	0x20000bec
 8003408:	08005ae0 	.word	0x08005ae0
 800340c:	20000bc0 	.word	0x20000bc0
 8003410:	08005af0 	.word	0x08005af0

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 8003418:	f7fe fb4e 	bl	8001ab8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800341c:	bf00      	nop
 800341e:	f7fe fb59 	bl	8001ad4 <LL_RCC_HSE_IsReady>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d1fa      	bne.n	800341e <SystemClock_Config+0xa>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 8003428:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800342c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003430:	f7fe fbf2 	bl	8001c18 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003434:	f7fe fbd0 	bl	8001bd8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003438:	bf00      	nop
 800343a:	f7fe fbdb 	bl	8001bf4 <LL_RCC_PLL_IsReady>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d1fa      	bne.n	800343a <SystemClock_Config+0x26>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003444:	2000      	movs	r0, #0
 8003446:	f7fe fb77 	bl	8001b38 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fe fb88 	bl	8001b60 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003450:	2000      	movs	r0, #0
 8003452:	f7fe fb99 	bl	8001b88 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003456:	2002      	movs	r0, #2
 8003458:	f7fe fb4e 	bl	8001af8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800345c:	bf00      	nop
 800345e:	f7fe fb5f 	bl	8001b20 <LL_RCC_GetSysClkSource>
 8003462:	4603      	mov	r3, r0
 8003464:	2b08      	cmp	r3, #8
 8003466:	d1fa      	bne.n	800345e <SystemClock_Config+0x4a>
  {

  }
  LL_Init1msTick(24000000);
 8003468:	4805      	ldr	r0, [pc, #20]	; (8003480 <SystemClock_Config+0x6c>)
 800346a:	f001 fd8b 	bl	8004f84 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 800346e:	4804      	ldr	r0, [pc, #16]	; (8003480 <SystemClock_Config+0x6c>)
 8003470:	f001 fd96 	bl	8004fa0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8003474:	2000      	movs	r0, #0
 8003476:	f7fe fb9b 	bl	8001bb0 <LL_RCC_SetADCClockSource>
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	016e3600 	.word	0x016e3600

08003484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800348a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	463b      	mov	r3, r7
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80034b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034b6:	f7fe fc01 	bl	8001cbc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80034ba:	2010      	movs	r0, #16
 80034bc:	f7fe fbfe 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80034c0:	2004      	movs	r0, #4
 80034c2:	f7fe fbfb 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80034c6:	2008      	movs	r0, #8
 80034c8:	f7fe fbf8 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  PA7   ------> ADC1_IN7
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80034cc:	f643 733f 	movw	r3, #16191	; 0x3f3f
 80034d0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d6:	463b      	mov	r3, r7
 80034d8:	4619      	mov	r1, r3
 80034da:	489d      	ldr	r0, [pc, #628]	; (8003750 <MX_ADC1_Init+0x2cc>)
 80034dc:	f001 f990 	bl	8004800 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80034e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	463b      	mov	r3, r7
 80034ec:	4619      	mov	r1, r3
 80034ee:	4899      	ldr	r0, [pc, #612]	; (8003754 <MX_ADC1_Init+0x2d0>)
 80034f0:	f001 f986 	bl	8004800 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80034f4:	f240 2302 	movw	r3, #514	; 0x202
 80034f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	463b      	mov	r3, r7
 8003500:	4619      	mov	r1, r3
 8003502:	4895      	ldr	r0, [pc, #596]	; (8003758 <MX_ADC1_Init+0x2d4>)
 8003504:	f001 f97c 	bl	8004800 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003508:	2200      	movs	r2, #0
 800350a:	2101      	movs	r1, #1
 800350c:	4893      	ldr	r0, [pc, #588]	; (800375c <MX_ADC1_Init+0x2d8>)
 800350e:	f7fe f987 	bl	8001820 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	4891      	ldr	r0, [pc, #580]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003518:	f7fe fa50 	bl	80019bc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800351c:	2220      	movs	r2, #32
 800351e:	2101      	movs	r1, #1
 8003520:	488e      	ldr	r0, [pc, #568]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003522:	f7fe f9a1 	bl	8001868 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003526:	2200      	movs	r2, #0
 8003528:	2101      	movs	r1, #1
 800352a:	488c      	ldr	r0, [pc, #560]	; (800375c <MX_ADC1_Init+0x2d8>)
 800352c:	f7fe f9be 	bl	80018ac <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	2101      	movs	r1, #1
 8003534:	4889      	ldr	r0, [pc, #548]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003536:	f7fe f9db 	bl	80018f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800353a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800353e:	2101      	movs	r1, #1
 8003540:	4886      	ldr	r0, [pc, #536]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003542:	f7fe f9f7 	bl	8001934 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8003546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800354a:	2101      	movs	r1, #1
 800354c:	4883      	ldr	r0, [pc, #524]	; (800375c <MX_ADC1_Init+0x2d8>)
 800354e:	f7fe fa13 	bl	8001978 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_ConfigAddresses(DMA1,
 8003552:	2100      	movs	r1, #0
 8003554:	4882      	ldr	r0, [pc, #520]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003556:	f7fe f867 	bl	8001628 <LL_ADC_DMA_GetRegAddr>
 800355a:	4602      	mov	r2, r0
 800355c:	4981      	ldr	r1, [pc, #516]	; (8003764 <MX_ADC1_Init+0x2e0>)
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	460b      	mov	r3, r1
 8003564:	2101      	movs	r1, #1
 8003566:	487d      	ldr	r0, [pc, #500]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003568:	f7fe fa6c 	bl	8001a44 <LL_DMA_ConfigAddresses>
                           (uint32_t)RegularConvData,
                           LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

   //LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,LL_ADC_DMA_GetRegAddr(ADC1,LL_ADC_DMA_REG_REGULAR_DATA));
   //LL_DMA_SetMemoryAddress(DMA1,LL_DMA_CHANNEL_1,RegularConvData);
   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, NUMBER_OF_CHANNELS);
 800356c:	2210      	movs	r2, #16
 800356e:	2101      	movs	r1, #1
 8003570:	487a      	ldr	r0, [pc, #488]	; (800375c <MX_ADC1_Init+0x2d8>)
 8003572:	f7fe fa45 	bl	8001a00 <LL_DMA_SetDataLength>
   //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
   //LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8003576:	2101      	movs	r1, #1
 8003578:	4878      	ldr	r0, [pc, #480]	; (800375c <MX_ADC1_Init+0x2d8>)
 800357a:	f7fe f933 	bl	80017e4 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800357e:	2300      	movs	r3, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358c:	4619      	mov	r1, r3
 800358e:	4874      	ldr	r0, [pc, #464]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003590:	f001 f811 	bl	80045b6 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003594:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8003598:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS;
 800359a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800359e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80035a4:	2302      	movs	r3, #2
 80035a6:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80035a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	486a      	ldr	r0, [pc, #424]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035b6:	f001 f825 	bl	8004604 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80035ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035c2:	4867      	ldr	r0, [pc, #412]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035c4:	f7fe f84e 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80035c8:	2207      	movs	r2, #7
 80035ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035ce:	4864      	ldr	r0, [pc, #400]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035d0:	f7fe f87d 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80035d4:	4a64      	ldr	r2, [pc, #400]	; (8003768 <MX_ADC1_Init+0x2e4>)
 80035d6:	f240 2105 	movw	r1, #517	; 0x205
 80035da:	4861      	ldr	r0, [pc, #388]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035dc:	f7fe f842 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80035e0:	2207      	movs	r2, #7
 80035e2:	4961      	ldr	r1, [pc, #388]	; (8003768 <MX_ADC1_Init+0x2e4>)
 80035e4:	485e      	ldr	r0, [pc, #376]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035e6:	f7fe f872 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80035ea:	4a60      	ldr	r2, [pc, #384]	; (800376c <MX_ADC1_Init+0x2e8>)
 80035ec:	f240 210a 	movw	r1, #522	; 0x20a
 80035f0:	485b      	ldr	r0, [pc, #364]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035f2:	f7fe f837 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80035f6:	2207      	movs	r2, #7
 80035f8:	495c      	ldr	r1, [pc, #368]	; (800376c <MX_ADC1_Init+0x2e8>)
 80035fa:	4859      	ldr	r0, [pc, #356]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80035fc:	f7fe f867 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8003600:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <MX_ADC1_Init+0x2ec>)
 8003602:	f240 210f 	movw	r1, #527	; 0x20f
 8003606:	4856      	ldr	r0, [pc, #344]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003608:	f7fe f82c 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800360c:	2207      	movs	r2, #7
 800360e:	4958      	ldr	r1, [pc, #352]	; (8003770 <MX_ADC1_Init+0x2ec>)
 8003610:	4853      	ldr	r0, [pc, #332]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003612:	f7fe f85c 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8003616:	4a57      	ldr	r2, [pc, #348]	; (8003774 <MX_ADC1_Init+0x2f0>)
 8003618:	f44f 7105 	mov.w	r1, #532	; 0x214
 800361c:	4850      	ldr	r0, [pc, #320]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800361e:	f7fe f821 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003622:	2207      	movs	r2, #7
 8003624:	4953      	ldr	r1, [pc, #332]	; (8003774 <MX_ADC1_Init+0x2f0>)
 8003626:	484e      	ldr	r0, [pc, #312]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003628:	f7fe f851 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 800362c:	4a52      	ldr	r2, [pc, #328]	; (8003778 <MX_ADC1_Init+0x2f4>)
 800362e:	f240 2119 	movw	r1, #537	; 0x219
 8003632:	484b      	ldr	r0, [pc, #300]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003634:	f7fe f816 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003638:	2207      	movs	r2, #7
 800363a:	494f      	ldr	r1, [pc, #316]	; (8003778 <MX_ADC1_Init+0x2f4>)
 800363c:	4848      	ldr	r0, [pc, #288]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800363e:	f7fe f846 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8003642:	4a4e      	ldr	r2, [pc, #312]	; (800377c <MX_ADC1_Init+0x2f8>)
 8003644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003648:	4845      	ldr	r0, [pc, #276]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800364a:	f7fe f80b 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800364e:	2207      	movs	r2, #7
 8003650:	494a      	ldr	r1, [pc, #296]	; (800377c <MX_ADC1_Init+0x2f8>)
 8003652:	4843      	ldr	r0, [pc, #268]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003654:	f7fe f83b 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8003658:	4a49      	ldr	r2, [pc, #292]	; (8003780 <MX_ADC1_Init+0x2fc>)
 800365a:	f240 1105 	movw	r1, #261	; 0x105
 800365e:	4840      	ldr	r0, [pc, #256]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003660:	f7fe f800 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003664:	2207      	movs	r2, #7
 8003666:	4946      	ldr	r1, [pc, #280]	; (8003780 <MX_ADC1_Init+0x2fc>)
 8003668:	483d      	ldr	r0, [pc, #244]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800366a:	f7fe f830 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_9);
 800366e:	4a45      	ldr	r2, [pc, #276]	; (8003784 <MX_ADC1_Init+0x300>)
 8003670:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003674:	483a      	ldr	r0, [pc, #232]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003676:	f7fd fff5 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800367a:	2207      	movs	r2, #7
 800367c:	4941      	ldr	r1, [pc, #260]	; (8003784 <MX_ADC1_Init+0x300>)
 800367e:	4838      	ldr	r0, [pc, #224]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003680:	f7fe f825 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_10);
 8003684:	220a      	movs	r2, #10
 8003686:	f240 110f 	movw	r1, #271	; 0x10f
 800368a:	4835      	ldr	r0, [pc, #212]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800368c:	f7fd ffea 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003690:	2207      	movs	r2, #7
 8003692:	210a      	movs	r1, #10
 8003694:	4832      	ldr	r0, [pc, #200]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003696:	f7fe f81a 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_11);
 800369a:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <MX_ADC1_Init+0x304>)
 800369c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80036a0:	482f      	ldr	r0, [pc, #188]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036a2:	f7fd ffdf 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036a6:	2207      	movs	r2, #7
 80036a8:	4937      	ldr	r1, [pc, #220]	; (8003788 <MX_ADC1_Init+0x304>)
 80036aa:	482d      	ldr	r0, [pc, #180]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036ac:	f7fe f80f 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_12);
 80036b0:	4a36      	ldr	r2, [pc, #216]	; (800378c <MX_ADC1_Init+0x308>)
 80036b2:	f240 1119 	movw	r1, #281	; 0x119
 80036b6:	482a      	ldr	r0, [pc, #168]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036b8:	f7fd ffd4 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036bc:	2207      	movs	r2, #7
 80036be:	4933      	ldr	r1, [pc, #204]	; (800378c <MX_ADC1_Init+0x308>)
 80036c0:	4827      	ldr	r0, [pc, #156]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036c2:	f7fe f804 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_13);
 80036c6:	4a32      	ldr	r2, [pc, #200]	; (8003790 <MX_ADC1_Init+0x30c>)
 80036c8:	2100      	movs	r1, #0
 80036ca:	4825      	ldr	r0, [pc, #148]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036cc:	f7fd ffca 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036d0:	2207      	movs	r2, #7
 80036d2:	492f      	ldr	r1, [pc, #188]	; (8003790 <MX_ADC1_Init+0x30c>)
 80036d4:	4822      	ldr	r0, [pc, #136]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036d6:	f7fd fffa 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_14);
 80036da:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <MX_ADC1_Init+0x310>)
 80036dc:	2105      	movs	r1, #5
 80036de:	4820      	ldr	r0, [pc, #128]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036e0:	f7fd ffc0 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036e4:	2207      	movs	r2, #7
 80036e6:	492b      	ldr	r1, [pc, #172]	; (8003794 <MX_ADC1_Init+0x310>)
 80036e8:	481d      	ldr	r0, [pc, #116]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036ea:	f7fd fff0 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_15);
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <MX_ADC1_Init+0x314>)
 80036f0:	210a      	movs	r1, #10
 80036f2:	481b      	ldr	r0, [pc, #108]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036f4:	f7fd ffb6 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80036f8:	2207      	movs	r2, #7
 80036fa:	4927      	ldr	r1, [pc, #156]	; (8003798 <MX_ADC1_Init+0x314>)
 80036fc:	4818      	ldr	r0, [pc, #96]	; (8003760 <MX_ADC1_Init+0x2dc>)
 80036fe:	f7fd ffe6 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_16, LL_ADC_CHANNEL_VREFINT);
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <MX_ADC1_Init+0x318>)
 8003704:	210f      	movs	r1, #15
 8003706:	4816      	ldr	r0, [pc, #88]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003708:	f7fd ffac 	bl	8001664 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800370c:	2207      	movs	r2, #7
 800370e:	4923      	ldr	r1, [pc, #140]	; (800379c <MX_ADC1_Init+0x318>)
 8003710:	4813      	ldr	r0, [pc, #76]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003712:	f7fd ffdc 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8003716:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800371a:	4811      	ldr	r0, [pc, #68]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800371c:	f7fd ff90 	bl	8001640 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */
	 LL_ADC_Enable(ADC1);
 8003720:	480f      	ldr	r0, [pc, #60]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003722:	f7fe f81f 	bl	8001764 <LL_ADC_Enable>
	  delay_ms(100);
 8003726:	2064      	movs	r0, #100	; 0x64
 8003728:	f7fd fb24 	bl	8000d74 <delay_ms>
	  LL_ADC_StartCalibration(ADC1);
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <MX_ADC1_Init+0x2dc>)
 800372e:	f7fe f828 	bl	8001782 <LL_ADC_StartCalibration>
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8003732:	bf00      	nop
 8003734:	480a      	ldr	r0, [pc, #40]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003736:	f7fe f833 	bl	80017a0 <LL_ADC_IsCalibrationOnGoing>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f9      	bne.n	8003734 <MX_ADC1_Init+0x2b0>
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8003740:	4807      	ldr	r0, [pc, #28]	; (8003760 <MX_ADC1_Init+0x2dc>)
 8003742:	f7fe f83f 	bl	80017c4 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	3730      	adds	r7, #48	; 0x30
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40011000 	.word	0x40011000
 8003754:	40010800 	.word	0x40010800
 8003758:	40010c00 	.word	0x40010c00
 800375c:	40020000 	.word	0x40020000
 8003760:	40012400 	.word	0x40012400
 8003764:	20000bcc 	.word	0x20000bcc
 8003768:	02300001 	.word	0x02300001
 800376c:	02600002 	.word	0x02600002
 8003770:	02900003 	.word	0x02900003
 8003774:	02c00004 	.word	0x02c00004
 8003778:	02f00005 	.word	0x02f00005
 800377c:	03200006 	.word	0x03200006
 8003780:	03500007 	.word	0x03500007
 8003784:	03b00009 	.word	0x03b00009
 8003788:	0030000b 	.word	0x0030000b
 800378c:	0060000c 	.word	0x0060000c
 8003790:	0090000d 	.word	0x0090000d
 8003794:	00c0000e 	.word	0x00c0000e
 8003798:	00f0000f 	.word	0x00f0000f
 800379c:	81500011 	.word	0x81500011

080037a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80037b4:	2020      	movs	r0, #32
 80037b6:	f7fe fa69 	bl	8001c8c <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80037ba:	f7fd fe8d 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 80037be:	4603      	mov	r3, r0
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd fedb 	bl	8001580 <NVIC_EncodePriority>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4619      	mov	r1, r3
 80037ce:	2037      	movs	r0, #55	; 0x37
 80037d0:	f7fd feac 	bl	800152c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 80037d4:	2037      	movs	r0, #55	; 0x37
 80037d6:	f7fd fe8d 	bl	80014f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 24000;
 80037da:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80037de:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 80037e4:	230a      	movs	r3, #10
 80037e6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	480b      	ldr	r0, [pc, #44]	; (800381c <MX_TIM7_Init+0x7c>)
 80037ee:	f001 f9b3 	bl	8004b58 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 80037f2:	480a      	ldr	r0, [pc, #40]	; (800381c <MX_TIM7_Init+0x7c>)
 80037f4:	f7fe fa89 	bl	8001d0a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
 80037f8:	2120      	movs	r1, #32
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <MX_TIM7_Init+0x7c>)
 80037fc:	f7fe fa94 	bl	8001d28 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8003800:	4806      	ldr	r0, [pc, #24]	; (800381c <MX_TIM7_Init+0x7c>)
 8003802:	f7fe faa3 	bl	8001d4c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
  LL_TIM_EnableCounter(TIM7);
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_TIM7_Init+0x7c>)
 8003808:	f7fe fa70 	bl	8001cec <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 800380c:	4803      	ldr	r0, [pc, #12]	; (800381c <MX_TIM7_Init+0x7c>)
 800380e:	f7fe faac 	bl	8001d6a <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM7_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40001400 	.word	0x40001400

08003820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383a:	463b      	mov	r3, r7
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003848:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800384c:	f7fe fa36 	bl	8001cbc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003850:	2004      	movs	r0, #4
 8003852:	f7fe fa33 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <MX_USART1_UART_Init+0xc8>)
 8003858:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800385a:	2309      	movs	r3, #9
 800385c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800385e:	2303      	movs	r3, #3
 8003860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003866:	463b      	mov	r3, r7
 8003868:	4619      	mov	r1, r3
 800386a:	4820      	ldr	r0, [pc, #128]	; (80038ec <MX_USART1_UART_Init+0xcc>)
 800386c:	f000 ffc8 	bl	8004800 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <MX_USART1_UART_Init+0xd0>)
 8003872:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003874:	2304      	movs	r3, #4
 8003876:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	463b      	mov	r3, r7
 800387a:	4619      	mov	r1, r3
 800387c:	481b      	ldr	r0, [pc, #108]	; (80038ec <MX_USART1_UART_Init+0xcc>)
 800387e:	f000 ffbf 	bl	8004800 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003882:	f7fd fe29 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8003886:	4603      	mov	r3, r0
 8003888:	2200      	movs	r2, #0
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fe77 	bl	8001580 <NVIC_EncodePriority>
 8003892:	4603      	mov	r3, r0
 8003894:	4619      	mov	r1, r3
 8003896:	2025      	movs	r0, #37	; 0x25
 8003898:	f7fd fe48 	bl	800152c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800389c:	2025      	movs	r0, #37	; 0x25
 800389e:	f7fd fe29 	bl	80014f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80038a2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80038a6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80038b4:	230c      	movs	r3, #12
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	480b      	ldr	r0, [pc, #44]	; (80038f4 <MX_USART1_UART_Init+0xd4>)
 80038c8:	f001 facc 	bl	8004e64 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80038cc:	4809      	ldr	r0, [pc, #36]	; (80038f4 <MX_USART1_UART_Init+0xd4>)
 80038ce:	f7fe fa6a 	bl	8001da6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80038d2:	4808      	ldr	r0, [pc, #32]	; (80038f4 <MX_USART1_UART_Init+0xd4>)
 80038d4:	f7fe fa58 	bl	8001d88 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableIT_TXE(USART1);
 80038d8:	4806      	ldr	r0, [pc, #24]	; (80038f4 <MX_USART1_UART_Init+0xd4>)
 80038da:	f7fe fa88 	bl	8001dee <LL_USART_EnableIT_TXE>
  // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END USART1_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	3730      	adds	r7, #48	; 0x30
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	04020002 	.word	0x04020002
 80038ec:	40010800 	.word	0x40010800
 80038f0:	04040004 	.word	0x04040004
 80038f4:	40013800 	.word	0x40013800

080038f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	615a      	str	r2, [r3, #20]
 8003910:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003912:	463b      	mov	r3, r7
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003920:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003924:	f7fe f9b2 	bl	8001c8c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003928:	2008      	movs	r0, #8
 800392a:	f7fe f9c7 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800392e:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <MX_USART3_UART_Init+0xcc>)
 8003930:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003932:	2309      	movs	r3, #9
 8003934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003936:	2303      	movs	r3, #3
 8003938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393e:	463b      	mov	r3, r7
 8003940:	4619      	mov	r1, r3
 8003942:	4821      	ldr	r0, [pc, #132]	; (80039c8 <MX_USART3_UART_Init+0xd0>)
 8003944:	f000 ff5c 	bl	8004800 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003948:	4b20      	ldr	r3, [pc, #128]	; (80039cc <MX_USART3_UART_Init+0xd4>)
 800394a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800394c:	2304      	movs	r3, #4
 800394e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	463b      	mov	r3, r7
 8003952:	4619      	mov	r1, r3
 8003954:	481c      	ldr	r0, [pc, #112]	; (80039c8 <MX_USART3_UART_Init+0xd0>)
 8003956:	f000 ff53 	bl	8004800 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800395a:	f7fd fdbd 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 800395e:	4603      	mov	r3, r0
 8003960:	2200      	movs	r2, #0
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fe0b 	bl	8001580 <NVIC_EncodePriority>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	2027      	movs	r0, #39	; 0x27
 8003970:	f7fd fddc 	bl	800152c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003974:	2027      	movs	r0, #39	; 0x27
 8003976:	f7fd fdbd 	bl	80014f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800397a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800397e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800398c:	230c      	movs	r3, #12
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	480c      	ldr	r0, [pc, #48]	; (80039d0 <MX_USART3_UART_Init+0xd8>)
 80039a0:	f001 fa60 	bl	8004e64 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80039a4:	480a      	ldr	r0, [pc, #40]	; (80039d0 <MX_USART3_UART_Init+0xd8>)
 80039a6:	f7fe f9fe 	bl	8001da6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80039aa:	4809      	ldr	r0, [pc, #36]	; (80039d0 <MX_USART3_UART_Init+0xd8>)
 80039ac:	f7fe f9ec 	bl	8001d88 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  //LL_USART_EnableIT_TXE(USART3);


  LL_USART_EnableIT_TXE(USART3);
 80039b0:	4807      	ldr	r0, [pc, #28]	; (80039d0 <MX_USART3_UART_Init+0xd8>)
 80039b2:	f7fe fa1c 	bl	8001dee <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(USART3);
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <MX_USART3_UART_Init+0xd8>)
 80039b8:	f7fe fa0a 	bl	8001dd0 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART3_Init 2 */

}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	04040004 	.word	0x04040004
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	04080008 	.word	0x04080008
 80039d0:	40004800 	.word	0x40004800

080039d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fe f93f 	bl	8001c5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80039de:	f7fd fd7b 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd fdc9 	bl	8001580 <NVIC_EncodePriority>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	200b      	movs	r0, #11
 80039f4:	f7fd fd9a 	bl	800152c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039f8:	200b      	movs	r0, #11
 80039fa:	f7fd fd7b 	bl	80014f4 <__NVIC_EnableIRQ>

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003a18:	2020      	movs	r0, #32
 8003a1a:	f7fe f94f 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003a1e:	2010      	movs	r0, #16
 8003a20:	f7fe f94c 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003a24:	2004      	movs	r0, #4
 8003a26:	f7fe f949 	bl	8001cbc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003a2a:	2008      	movs	r0, #8
 8003a2c:	f7fe f946 	bl	8001cbc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8003a30:	492e      	ldr	r1, [pc, #184]	; (8003aec <MX_GPIO_Init+0xe8>)
 8003a32:	482f      	ldr	r0, [pc, #188]	; (8003af0 <MX_GPIO_Init+0xec>)
 8003a34:	f7fe fa00 	bl	8001e38 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8003a38:	492e      	ldr	r1, [pc, #184]	; (8003af4 <MX_GPIO_Init+0xf0>)
 8003a3a:	482f      	ldr	r0, [pc, #188]	; (8003af8 <MX_GPIO_Init+0xf4>)
 8003a3c:	f7fe f9fc 	bl	8001e38 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8003a40:	492e      	ldr	r1, [pc, #184]	; (8003afc <MX_GPIO_Init+0xf8>)
 8003a42:	482f      	ldr	r0, [pc, #188]	; (8003b00 <MX_GPIO_Init+0xfc>)
 8003a44:	f7fe f9f8 	bl	8001e38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8003a48:	f240 4104 	movw	r1, #1028	; 0x404
 8003a4c:	482d      	ldr	r0, [pc, #180]	; (8003b04 <MX_GPIO_Init+0x100>)
 8003a4e:	f7fe f9f3 	bl	8001e38 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <MX_GPIO_Init+0xe8>)
 8003a54:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a56:	2301      	movs	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4822      	ldr	r0, [pc, #136]	; (8003af0 <MX_GPIO_Init+0xec>)
 8003a68:	f000 feca 	bl	8004800 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_9|LL_GPIO_PIN_11
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <MX_GPIO_Init+0xf0>)
 8003a6e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a70:	2301      	movs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a74:	2302      	movs	r3, #2
 8003a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	481d      	ldr	r0, [pc, #116]	; (8003af8 <MX_GPIO_Init+0xf4>)
 8003a82:	f000 febd 	bl	8004800 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <MX_GPIO_Init+0x104>)
 8003a88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4819      	ldr	r0, [pc, #100]	; (8003af8 <MX_GPIO_Init+0xf4>)
 8003a94:	f000 feb4 	bl	8004800 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003a98:	4b18      	ldr	r3, [pc, #96]	; (8003afc <MX_GPIO_Init+0xf8>)
 8003a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4814      	ldr	r0, [pc, #80]	; (8003b00 <MX_GPIO_Init+0xfc>)
 8003aae:	f000 fea7 	bl	8004800 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <MX_GPIO_Init+0x108>)
 8003ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480d      	ldr	r0, [pc, #52]	; (8003af8 <MX_GPIO_Init+0xf4>)
 8003ac4:	f000 fe9c 	bl	8004800 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003ac8:	f240 4304 	movw	r3, #1028	; 0x404
 8003acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4809      	ldr	r0, [pc, #36]	; (8003b04 <MX_GPIO_Init+0x100>)
 8003ae0:	f000 fe8e 	bl	8004800 <LL_GPIO_Init>

}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	04f138f9 	.word	0x04f138f9
 8003af0:	40010c00 	.word	0x40010c00
 8003af4:	041ac0da 	.word	0x041ac0da
 8003af8:	40011000 	.word	0x40011000
 8003afc:	04190019 	.word	0x04190019
 8003b00:	40010800 	.word	0x40010800
 8003b04:	40011400 	.word	0x40011400
 8003b08:	04010001 	.word	0x04010001
 8003b0c:	04040004 	.word	0x04040004

08003b10 <LL_TIM_ClearFlag_UPDATE>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f06f 0201 	mvn.w	r2, #1
 8003b1e:	611a      	str	r2, [r3, #16]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <LL_USART_IsActiveFlag_RXNE>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <NMI_Handler+0x4>

08003b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <HardFault_Handler+0x4>

08003b7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <MemManage_Handler+0x4>

08003b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <BusFault_Handler+0x4>

08003b8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <UsageFault_Handler+0x4>

08003b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_Callback();
 8003bb8:	f7fe fc76 	bl	80024a8 <SysTick_Callback>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART2)) //прерывание по передачи
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <USART1_IRQHandler+0x7c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d031      	beq.n	8003c40 <USART1_IRQHandler+0x74>
	{
		if (bufferUart1.tx_counter > 0) //е�?ли е�?ть что передать
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003bde:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d025      	beq.n	8003c34 <USART1_IRQHandler+0x68>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количе�?тво не переданных данных
 8003be8:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003bea:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003bf6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART3,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003bfc:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	b291      	uxth	r1, r2
 8003c06:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003c08:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003c10:	4413      	add	r3, r2
 8003c12:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <USART1_IRQHandler+0x7c>)
 8003c1a:	605a      	str	r2, [r3, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003c1e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c28:	d10a      	bne.n	8003c40 <USART1_IRQHandler+0x74>
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <USART1_IRQHandler+0x80>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
	    	//LL_USART_DisableIT_TXE(USART2);
	    }
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8003c32:	e005      	b.n	8003c40 <USART1_IRQHandler+0x74>
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <USART1_IRQHandler+0x7c>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <USART1_IRQHandler+0x7c>)
 8003c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	200000f8 	.word	0x200000f8

08003c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//if ( (USART1->SR & USART_SR_RXNE) !=0 ) //Ждем по�?туплени�? данных от компьютера
	volatile uint8_t data;
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8003c56:	4889      	ldr	r0, [pc, #548]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003c58:	f7ff ff79 	bl	8003b4e <LL_USART_IsActiveFlag_RXNE>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80cb 	beq.w	8003dfa <USART3_IRQHandler+0x1aa>
	{
	  data = (uint8_t) (USART3->DR & 0xFF);
 8003c64:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	71fb      	strb	r3, [r7, #7]

	  if ( (ParsingData.IsPassedPackageLengthFlag == 1)  )
 8003c6c:	4b84      	ldr	r3, [pc, #528]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003c6e:	785b      	ldrb	r3, [r3, #1]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d149      	bne.n	8003d0a <USART3_IRQHandler+0xba>
	  {
		  //logDebug("PD");
		  //logDebugD("i=",ParsingData.i,0);
		  //logDebugD("Le=",ParsingData.Length,0)
		  //logDebugD("Data=",data,0);
		  if (ParsingData.i < ParsingData.Length-2)
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003c78:	88db      	ldrh	r3, [r3, #6]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003c80:	889b      	ldrh	r3, [r3, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b02      	subs	r3, #2
 8003c86:	429a      	cmp	r2, r3
 8003c88:	da33      	bge.n	8003cf2 <USART3_IRQHandler+0xa2>
		  {
			  ParsingData.i++;
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003c8c:	88db      	ldrh	r3, [r3, #6]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003c96:	80da      	strh	r2, [r3, #6]
			  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003c98:	4b7a      	ldr	r3, [pc, #488]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003c9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	b291      	uxth	r1, r2
 8003ca4:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003ca6:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	b2d9      	uxtb	r1, r3
 8003cb0:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cb2:	5499      	strb	r1, [r3, r2]

			  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003cb4:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b64      	cmp	r3, #100	; 0x64
 8003cbe:	d103      	bne.n	8003cc8 <USART3_IRQHandler+0x78>
 8003cc0:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003cc8:	4b6e      	ldr	r3, [pc, #440]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d114      	bne.n	8003d0a <USART3_IRQHandler+0xba>
			  {
				  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003ce8:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003cf0:	e00b      	b.n	8003d0a <USART3_IRQHandler+0xba>
			  }
		  }
		  else
		  {
			  //logDebug("else");
			  ParsingData.i = 0;
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	80da      	strh	r2, [r3, #6]
			  ParsingData.IsPassedPackageLengthFlag = 0;
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	705a      	strb	r2, [r3, #1]
			  ParsingData.IsPassedPackageBeginFlag = 0;
 8003cfe:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
			  ParsingData.IsDataReadyReadFromBuffer = 1;
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	709a      	strb	r2, [r3, #2]
		  }
	  }
	  //
	  if ( (ParsingData.IsPassedPackageBeginFlag == 1) && (ParsingData.IsPassedPackageLengthFlag == 0) )
 8003d0a:	4b5d      	ldr	r3, [pc, #372]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d13a      	bne.n	8003d8a <USART3_IRQHandler+0x13a>
 8003d14:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d135      	bne.n	8003d8a <USART3_IRQHandler+0x13a>
	  {
		  //logDebug("Length");
		  ParsingData.IsPassedPackageLengthFlag = 1;
 8003d1e:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	705a      	strb	r2, [r3, #1]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003d24:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	b291      	uxth	r1, r2
 8003d30:	4a54      	ldr	r2, [pc, #336]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d32:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	b2d9      	uxtb	r1, r3
 8003d3c:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d3e:	5499      	strb	r1, [r3, r2]
		  ParsingData.Length = data+1+1;
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3302      	adds	r3, #2
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d4c:	809a      	strh	r2, [r3, #4]

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d103      	bne.n	8003d62 <USART3_IRQHandler+0x112>
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003d62:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4a45      	ldr	r2, [pc, #276]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d70:	4619      	mov	r1, r3
 8003d72:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d107      	bne.n	8003d8a <USART3_IRQHandler+0x13a>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }
	  //
	  if ( (data == PACKAGE_BEGIN) && (ParsingData.IsPassedPackageBeginFlag == 0) )
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d90:	d133      	bne.n	8003dfa <USART3_IRQHandler+0x1aa>
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d12e      	bne.n	8003dfa <USART3_IRQHandler+0x1aa>
	  {
		  //logDebug("PB");
		  ParsingData.IsPassedPackageBeginFlag = 1;
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <USART3_IRQHandler+0x230>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
		  bufferUart2.rx_buffer[bufferUart2.rx_wr_index++] = data; //�?читываем данные в буфер, инкрементиру�? хво�?т буфера
 8003da2:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003da4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	b291      	uxth	r1, r2
 8003dae:	4a35      	ldr	r2, [pc, #212]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003db0:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8003db4:	461a      	mov	r2, r3
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	b2d9      	uxtb	r1, r3
 8003dba:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003dbc:	5499      	strb	r1, [r3, r2]
		  //bufferUart2.rx_buffer[bufferUart1.rx_wr_index++] = data; //BUG STUCK

		  if (bufferUart2.rx_wr_index == RX_BUFFER_SIZE) bufferUart2.rx_wr_index=0; //идем по кругу
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003dc0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d103      	bne.n	8003dd2 <USART3_IRQHandler+0x182>
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		  if (++bufferUart2.rx_counter == RX_BUFFER_SIZE) //переполнение буфера
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003dd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003de0:	4619      	mov	r1, r3
 8003de2:	f8a2 1068 	strh.w	r1, [r2, #104]	; 0x68
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d107      	bne.n	8003dfa <USART3_IRQHandler+0x1aa>
		  {
			  bufferUart2.rx_counter=0; //начинаем �?начала (удал�?ем в�?е данные)
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			  bufferUart2.rx_buffer_overflow=1;  //�?ообщаем о переполнении
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		  }
	  }

	}

	if ( (USART3->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d036      	beq.n	8003e74 <USART3_IRQHandler+0x224>
	{
		vard2++;
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <USART3_IRQHandler+0x238>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <USART3_IRQHandler+0x238>)
 8003e0e:	6013      	str	r3, [r2, #0]
		if (bufferUart2.tx_counter > 0) //е�?ли е�?ть что передать
 8003e10:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e12:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d025      	beq.n	8003e68 <USART3_IRQHandler+0x218>
	    {
	      --bufferUart2.tx_counter; // уменьшаем количе�?тво не переданных данных
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e1e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e2a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART3->DR = bufferUart2.tx_buffer[bufferUart2.tx_rd_index++]; //передаем данные инкрементиру�? хво�?т буфера
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e30:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	b291      	uxth	r1, r2
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e3c:	f8a2 1456 	strh.w	r1, [r2, #1110]	; 0x456
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e44:	4413      	add	r3, r2
 8003e46:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003e4e:	605a      	str	r2, [r3, #4]
	      if (bufferUart2.tx_rd_index == TX_BUFFER_SIZE) bufferUart2.tx_rd_index=0; //идем по кругу
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e52:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e5c:	d10a      	bne.n	8003e74 <USART3_IRQHandler+0x224>
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <USART3_IRQHandler+0x234>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e66:	e005      	b.n	8003e74 <USART3_IRQHandler+0x224>
	    	USART3->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a03      	ldr	r2, [pc, #12]	; (8003e7c <USART3_IRQHandler+0x22c>)
 8003e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e72:	60d3      	str	r3, [r2, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40004800 	.word	0x40004800
 8003e80:	200009b8 	.word	0x200009b8
 8003e84:	20000554 	.word	0x20000554
 8003e88:	200000f4 	.word	0x200000f4

08003e8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8003e90:	4806      	ldr	r0, [pc, #24]	; (8003eac <TIM7_IRQHandler+0x20>)
 8003e92:	f7ff fe4a 	bl	8003b2a <LL_TIM_IsActiveFlag_UPDATE>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <TIM7_IRQHandler+0x1a>
	  {
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8003e9c:	4803      	ldr	r0, [pc, #12]	; (8003eac <TIM7_IRQHandler+0x20>)
 8003e9e:	f7ff fe37 	bl	8003b10 <LL_TIM_ClearFlag_UPDATE>
		TIM7_Callback();
 8003ea2:	f7fe ffdd 	bl	8002e60 <TIM7_Callback>
	  }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40001400 	.word	0x40001400

08003eb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
#endif /* STM32F105xC */

#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <SystemCoreClockUpdate+0xcc>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d011      	beq.n	8003f06 <SystemCoreClockUpdate+0x4a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d836      	bhi.n	8003f56 <SystemCoreClockUpdate+0x9a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <SystemCoreClockUpdate+0x3a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d004      	beq.n	8003efe <SystemCoreClockUpdate+0x42>
 8003ef4:	e02f      	b.n	8003f56 <SystemCoreClockUpdate+0x9a>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <SystemCoreClockUpdate+0xd4>)
 8003efa:	601a      	str	r2, [r3, #0]
      break;
 8003efc:	e02f      	b.n	8003f5e <SystemCoreClockUpdate+0xa2>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <SystemCoreClockUpdate+0xd4>)
 8003f02:	601a      	str	r2, [r3, #0]
      break;
 8003f04:	e02b      	b.n	8003f5e <SystemCoreClockUpdate+0xa2>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <SystemCoreClockUpdate+0xcc>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f0e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <SystemCoreClockUpdate+0xcc>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	3302      	adds	r3, #2
 8003f20:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <SystemCoreClockUpdate+0xd8>)
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f32:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8003f34:	e013      	b.n	8003f5e <SystemCoreClockUpdate+0xa2>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <SystemCoreClockUpdate+0xcc>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3301      	adds	r3, #1
 8003f40:	603b      	str	r3, [r7, #0]
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <SystemCoreClockUpdate+0xd4>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f52:	6013      	str	r3, [r2, #0]
      break;
 8003f54:	e003      	b.n	8003f5e <SystemCoreClockUpdate+0xa2>

    default:
      SystemCoreClock = HSI_VALUE;
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <SystemCoreClockUpdate+0xd4>)
 8003f5a:	601a      	str	r2, [r3, #0]
      break;
 8003f5c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <SystemCoreClockUpdate+0xcc>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <SystemCoreClockUpdate+0xdc>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <SystemCoreClockUpdate+0xd0>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	200000cc 	.word	0x200000cc
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	003d0900 	.word	0x003d0900
 8003f98:	08005b0c 	.word	0x08005b0c

08003f9c <LL_USART_IsActiveFlag_TXE>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <LL_USART_EnableIT_TXE>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60da      	str	r2, [r3, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <putCharInBufferUart2>:
#endif
}


void putCharInBufferUart2(uint8_t c) //вывод данных
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
	//while (bufferUart2.tx_counter >= TX_BUFFER_SIZE); //если буфер переполнен, ждем
	LL_USART_DisableIT_TXE(USART3); //запрещаем прерывание, чтобы оно не мешало менять переменную
 8004022:	481f      	ldr	r0, [pc, #124]	; (80040a0 <putCharInBufferUart2+0x88>)
 8004024:	f7ff ffdb 	bl	8003fde <LL_USART_DisableIT_TXE>
	bufferUart2.tx_buffer[bufferUart2.tx_wr_index++]=c; //то кладем данные в буфер
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <putCharInBufferUart2+0x8c>)
 800402a:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800402e:	b29b      	uxth	r3, r3
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	b291      	uxth	r1, r2
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004036:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 800403a:	461a      	mov	r2, r3
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <putCharInBufferUart2+0x8c>)
 800403e:	4413      	add	r3, r2
 8004040:	79fa      	ldrb	r2, [r7, #7]
 8004042:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart2.tx_wr_index == TX_BUFFER_SIZE)
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004048:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800404c:	b29b      	uxth	r3, r3
 800404e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004052:	d103      	bne.n	800405c <putCharInBufferUart2+0x44>
		bufferUart2.tx_wr_index=0; //идем по кругу
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004056:	2200      	movs	r2, #0
 8004058:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart2.tx_counter; //увеличиваем счетчик количества данных в буфере
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <putCharInBufferUart2+0x8c>)
 800405e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004062:	b29b      	uxth	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <putCharInBufferUart2+0x8c>)
 800406a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart2.tx_buffer_overflow < bufferUart2.tx_counter)
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004070:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004078:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800407c:	b29b      	uxth	r3, r3
 800407e:	429a      	cmp	r2, r3
 8004080:	d206      	bcs.n	8004090 <putCharInBufferUart2+0x78>
			bufferUart2.tx_buffer_overflow = bufferUart2.tx_counter;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <putCharInBufferUart2+0x8c>)
 8004084:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004088:	b29a      	uxth	r2, r3
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <putCharInBufferUart2+0x8c>)
 800408c:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	LL_USART_EnableIT_TXE(USART3); //разрешаем прерывание
 8004090:	4803      	ldr	r0, [pc, #12]	; (80040a0 <putCharInBufferUart2+0x88>)
 8004092:	f7ff ff95 	bl	8003fc0 <LL_USART_EnableIT_TXE>

}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40004800 	.word	0x40004800
 80040a4:	20000554 	.word	0x20000554

080040a8 <putDataInBufferUart2>:
  while (*s != 0)
	  putCharInBufferUart2(*s++);
}

void putDataInBufferUart2(volatile char *s, uint8_t lenght)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
    for (i = 0; i < lenght; i++ )
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e00a      	b.n	80040d0 <putDataInBufferUart2+0x28>
    {
	   putCharInBufferUart2(s[i]);
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff ffa7 	bl	8004018 <putCharInBufferUart2>
    for (i = 0; i < lenght; i++ )
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3301      	adds	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3f0      	bcc.n	80040ba <putDataInBufferUart2+0x12>
    }
    putCharInBufferUart2('\n');
 80040d8:	200a      	movs	r0, #10
 80040da:	f7ff ff9d 	bl	8004018 <putCharInBufferUart2>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <putCharDirectToUart2>:



void putCharDirectToUart2(uint8_t c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3));
 80040f2:	bf00      	nop
 80040f4:	4808      	ldr	r0, [pc, #32]	; (8004118 <putCharDirectToUart2+0x30>)
 80040f6:	f7ff ff51 	bl	8003f9c <LL_USART_IsActiveFlag_TXE>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f9      	beq.n	80040f4 <putCharDirectToUart2+0xc>
	LL_USART_TransmitData8(USART3, c);
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	4619      	mov	r1, r3
 8004104:	4804      	ldr	r0, [pc, #16]	; (8004118 <putCharDirectToUart2+0x30>)
 8004106:	f7ff ff79 	bl	8003ffc <LL_USART_TransmitData8>
	c++;
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	3301      	adds	r3, #1
 800410e:	71fb      	strb	r3, [r7, #7]
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40004800 	.word	0x40004800

0800411c <getCharFromBufferUART2>:
  while (*s != 0)
	  putCharDirectToUart2(*s++);
}

uint8_t getCharFromBufferUART2(void) //прием данных
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
	uint8_t data; //переменная для данных
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 8004122:	bf00      	nop
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <getCharFromBufferUART2+0x80>)
 8004126:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02d      	beq.n	800418c <getCharFromBufferUART2+0x70>
	data=bufferUart2.rx_buffer[bufferUart2.rx_rd_index++]; //берем данные из буфера
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <getCharFromBufferUART2+0x80>)
 8004132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004136:	b29b      	uxth	r3, r3
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	b291      	uxth	r1, r2
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <getCharFromBufferUART2+0x80>)
 800413e:	f8a2 1066 	strh.w	r1, [r2, #102]	; 0x66
 8004142:	461a      	mov	r2, r3
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <getCharFromBufferUART2+0x80>)
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	71fb      	strb	r3, [r7, #7]
	if (bufferUart2.rx_rd_index == RX_BUFFER_SIZE) bufferUart2.rx_rd_index=0; //идем по кругу
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <getCharFromBufferUART2+0x80>)
 800414c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d103      	bne.n	800415e <getCharFromBufferUART2+0x42>
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <getCharFromBufferUART2+0x80>)
 8004158:	2200      	movs	r2, #0
 800415a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	USART3->CR1 &= ~USART_CR1_RXNEIE;  // Interrupt Disable
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <getCharFromBufferUART2+0x84>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <getCharFromBufferUART2+0x84>)
 8004164:	f023 0320 	bic.w	r3, r3, #32
 8004168:	60d3      	str	r3, [r2, #12]
	--bufferUart2.rx_counter; //чтобы оно не помешало изменить переменную
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <getCharFromBufferUART2+0x80>)
 800416c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <getCharFromBufferUART2+0x80>)
 8004178:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	USART3->CR1 |= USART_CR1_RXNEIE;// Interrupt enable
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <getCharFromBufferUART2+0x84>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <getCharFromBufferUART2+0x84>)
 8004182:	f043 0320 	orr.w	r3, r3, #32
 8004186:	60d3      	str	r3, [r2, #12]
	return data;
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	e001      	b.n	8004190 <getCharFromBufferUART2+0x74>
	while (bufferUart2.rx_counter==0) return;  //если данных нет, ждем
 800418c:	bf00      	nop
 800418e:	bf00      	nop

}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000554 	.word	0x20000554
 80041a0:	40004800 	.word	0x40004800

080041a4 <printToBufferUART1>:

//UART3===========================================================


void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80041ac:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <printToBufferUART1+0x110>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <printToBufferUART1+0x110>)
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80041b8:	e037      	b.n	800422a <printToBufferUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <printToBufferUART1+0x114>)
 80041c2:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80041c6:	b292      	uxth	r2, r2
 80041c8:	1c51      	adds	r1, r2, #1
 80041ca:	b288      	uxth	r0, r1
 80041cc:	493a      	ldr	r1, [pc, #232]	; (80042b8 <printToBufferUART1+0x114>)
 80041ce:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80041d2:	4611      	mov	r1, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <printToBufferUART1+0x114>)
 80041da:	440b      	add	r3, r1
 80041dc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80041e0:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <printToBufferUART1+0x114>)
 80041e2:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ec:	d103      	bne.n	80041f6 <printToBufferUART1+0x52>
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <printToBufferUART1+0x114>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80041f6:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <printToBufferUART1+0x114>)
 80041f8:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <printToBufferUART1+0x114>)
 8004204:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004208:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <printToBufferUART1+0x114>)
 800420a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800420e:	b29a      	uxth	r2, r3
 8004210:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <printToBufferUART1+0x114>)
 8004212:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004216:	b29b      	uxth	r3, r3
 8004218:	429a      	cmp	r2, r3
 800421a:	d206      	bcs.n	800422a <printToBufferUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <printToBufferUART1+0x114>)
 800421e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004222:	b29a      	uxth	r2, r3
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <printToBufferUART1+0x114>)
 8004226:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1c2      	bne.n	80041ba <printToBufferUART1+0x16>
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <printToBufferUART1+0x114>)
 8004236:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 800423a:	b29b      	uxth	r3, r3
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	b291      	uxth	r1, r2
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <printToBufferUART1+0x114>)
 8004242:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 8004246:	461a      	mov	r2, r3
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <printToBufferUART1+0x114>)
 800424a:	4413      	add	r3, r2
 800424c:	220a      	movs	r2, #10
 800424e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004252:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <printToBufferUART1+0x114>)
 8004254:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004258:	b29b      	uxth	r3, r3
 800425a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800425e:	d103      	bne.n	8004268 <printToBufferUART1+0xc4>
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <printToBufferUART1+0x114>)
 8004262:	2200      	movs	r2, #0
 8004264:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <printToBufferUART1+0x114>)
 800426a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800426e:	b29b      	uxth	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <printToBufferUART1+0x114>)
 8004276:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <printToBufferUART1+0x114>)
 800427c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004280:	b29a      	uxth	r2, r3
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <printToBufferUART1+0x114>)
 8004284:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004288:	b29b      	uxth	r3, r3
 800428a:	429a      	cmp	r2, r3
 800428c:	d206      	bcs.n	800429c <printToBufferUART1+0xf8>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <printToBufferUART1+0x114>)
 8004290:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004294:	b29a      	uxth	r2, r3
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <printToBufferUART1+0x114>)
 8004298:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <printToBufferUART1+0x110>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <printToBufferUART1+0x110>)
 80042a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a6:	60d3      	str	r3, [r2, #12]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40013800 	.word	0x40013800
 80042b8:	200000f8 	.word	0x200000f8

080042bc <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <printToBufferWithoutEndUART1+0xa8>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <printToBufferWithoutEndUART1+0xa8>)
 80042ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ce:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80042d0:	e037      	b.n	8004342 <printToBufferWithoutEndUART1+0x86>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	4a23      	ldr	r2, [pc, #140]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 80042da:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80042de:	b292      	uxth	r2, r2
 80042e0:	1c51      	adds	r1, r2, #1
 80042e2:	b288      	uxth	r0, r1
 80042e4:	4920      	ldr	r1, [pc, #128]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 80042e6:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80042ea:	4611      	mov	r1, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 80042fa:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004304:	d103      	bne.n	800430e <printToBufferWithoutEndUART1+0x52>
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 8004308:	2200      	movs	r2, #0
 800430a:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 8004310:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004314:	b29b      	uxth	r3, r3
 8004316:	3301      	adds	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 800431c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 8004322:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004326:	b29a      	uxth	r2, r3
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 800432a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800432e:	b29b      	uxth	r3, r3
 8004330:	429a      	cmp	r2, r3
 8004332:	d206      	bcs.n	8004342 <printToBufferWithoutEndUART1+0x86>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 8004336:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800433a:	b29a      	uxth	r2, r3
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <printToBufferWithoutEndUART1+0xac>)
 800433e:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1c2      	bne.n	80042d2 <printToBufferWithoutEndUART1+0x16>
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <printToBufferWithoutEndUART1+0xa8>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <printToBufferWithoutEndUART1+0xa8>)
 8004352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40013800 	.word	0x40013800
 8004368:	200000f8 	.word	0x200000f8

0800436c <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
	char *str1;
	if (koma == 0)
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <printToBufferUART1D+0x22>
		str1 = itoa(value);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc fd43 	bl	8000e10 <itoa>
 800438a:	6178      	str	r0, [r7, #20]
 800438c:	e007      	b.n	800439e <printToBufferUART1D+0x32>
	else
		str1 = itoa_koma(value,koma);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	79fa      	ldrb	r2, [r7, #7]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc fdb4 	bl	8000f04 <itoa_koma>
 800439c:	6178      	str	r0, [r7, #20]

	//while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем

	//LL_USART_DisableIT_TXE(USART2); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <printToBufferUART1D+0x1b0>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4a5e      	ldr	r2, [pc, #376]	; (800451c <printToBufferUART1D+0x1b0>)
 80043a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a8:	60d3      	str	r3, [r2, #12]

	while (*str != 0)
 80043aa:	e037      	b.n	800441c <printToBufferUART1D+0xb0>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	60fa      	str	r2, [r7, #12]
 80043b2:	4a5b      	ldr	r2, [pc, #364]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043b4:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 80043b8:	b292      	uxth	r2, r2
 80043ba:	1c51      	adds	r1, r2, #1
 80043bc:	b288      	uxth	r0, r1
 80043be:	4958      	ldr	r1, [pc, #352]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043c0:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 80043c4:	4611      	mov	r1, r2
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043cc:	440b      	add	r3, r1
 80043ce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043d4:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d103      	bne.n	80043e8 <printToBufferUART1D+0x7c>
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80043e8:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043ea:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043f6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <printToBufferUART1D+0x1b4>)
 80043fc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8004400:	b29a      	uxth	r2, r3
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004404:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004408:	b29b      	uxth	r3, r3
 800440a:	429a      	cmp	r2, r3
 800440c:	d206      	bcs.n	800441c <printToBufferUART1D+0xb0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004410:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004414:	b29a      	uxth	r2, r3
 8004416:	4b42      	ldr	r3, [pc, #264]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004418:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str != 0)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1c2      	bne.n	80043ac <printToBufferUART1D+0x40>
		#endif

	}

	while (*str1 != 0)
 8004426:	e036      	b.n	8004496 <printToBufferUART1D+0x12a>
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	617a      	str	r2, [r7, #20]
 800442e:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004430:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	; 0x454
 8004434:	b292      	uxth	r2, r2
 8004436:	1c51      	adds	r1, r2, #1
 8004438:	b288      	uxth	r0, r1
 800443a:	4939      	ldr	r1, [pc, #228]	; (8004520 <printToBufferUART1D+0x1b4>)
 800443c:	f8a1 0454 	strh.w	r0, [r1, #1108]	; 0x454
 8004440:	4611      	mov	r1, r2
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004446:	440b      	add	r3, r1
 8004448:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <printToBufferUART1D+0x1b4>)
 800444e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8004452:	b29b      	uxth	r3, r3
 8004454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004458:	d103      	bne.n	8004462 <printToBufferUART1D+0xf6>
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <printToBufferUART1D+0x1b4>)
 800445c:	2200      	movs	r2, #0
 800445e:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004462:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004464:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004468:	b29b      	uxth	r3, r3
 800446a:	3301      	adds	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004470:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004476:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b28      	ldr	r3, [pc, #160]	; (8004520 <printToBufferUART1D+0x1b4>)
 800447e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8004482:	b29b      	uxth	r3, r3
 8004484:	429a      	cmp	r2, r3
 8004486:	d206      	bcs.n	8004496 <printToBufferUART1D+0x12a>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <printToBufferUART1D+0x1b4>)
 800448a:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800448e:	b29a      	uxth	r2, r3
 8004490:	4b23      	ldr	r3, [pc, #140]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004492:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	while (*str1 != 0)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1c4      	bne.n	8004428 <printToBufferUART1D+0xbc>
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044a0:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	b291      	uxth	r1, r2
 80044aa:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044ac:	f8a2 1454 	strh.w	r1, [r2, #1108]	; 0x454
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044b4:	4413      	add	r3, r2
 80044b6:	220a      	movs	r2, #10
 80044b8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044be:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	d103      	bne.n	80044d2 <printToBufferUART1D+0x166>
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044d4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044e0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044e6:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044ee:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d206      	bcs.n	8004506 <printToBufferUART1D+0x19a>
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <printToBufferUART1D+0x1b4>)
 80044fa:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80044fe:	b29a      	uxth	r2, r3
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <printToBufferUART1D+0x1b4>)
 8004502:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART2); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <printToBufferUART1D+0x1b0>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <printToBufferUART1D+0x1b0>)
 800450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004510:	60d3      	str	r3, [r2, #12]
}
 8004512:	bf00      	nop
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40013800 	.word	0x40013800
 8004520:	200000f8 	.word	0x200000f8

08004524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004524:	480c      	ldr	r0, [pc, #48]	; (8004558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004526:	490d      	ldr	r1, [pc, #52]	; (800455c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800452a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800452c:	e002      	b.n	8004534 <LoopCopyDataInit>

0800452e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800452e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004532:	3304      	adds	r3, #4

08004534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004538:	d3f9      	bcc.n	800452e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800453c:	4c0a      	ldr	r4, [pc, #40]	; (8004568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800453e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004540:	e001      	b.n	8004546 <LoopFillZerobss>

08004542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004544:	3204      	adds	r2, #4

08004546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004548:	d3fb      	bcc.n	8004542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800454a:	f7ff fcb1 	bl	8003eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800454e:	f000 fd35 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004552:	f7fe fd29 	bl	8002fa8 <main>
  bx lr
 8004556:	4770      	bx	lr
  ldr r0, =_sdata
 8004558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800455c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8004560:	08005b2c 	.word	0x08005b2c
  ldr r2, =_sbss
 8004564:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004568:	20000e54 	.word	0x20000e54

0800456c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800456c:	e7fe      	b.n	800456c <ADC1_IRQHandler>

0800456e <LL_ADC_REG_SetSequencerLength>:
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <LL_ADC_IsEnabled>:
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ffe4 	bl	8004592 <LL_ADC_IsEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d112      	bne.n	80045f6 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	e001      	b.n	80045fa <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ffbd 	bl	8004592 <LL_ADC_IsEnabled>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d131      	bne.n	8004682 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	430b      	orrs	r3, r1
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	e008      	b.n	8004652 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800465a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	68d2      	ldr	r2, [r2, #12]
 8004666:	4311      	orrs	r1, r2
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	6912      	ldr	r2, [r2, #16]
 800466c:	430a      	orrs	r2, r1
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff77 	bl	800456e <LL_ADC_REG_SetSequencerLength>
 8004680:	e001      	b.n	8004686 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <LL_GPIO_SetPinMode>:
{
 8004690:	b490      	push	{r4, r7}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	0e1b      	lsrs	r3, r3, #24
 80046a4:	4413      	add	r3, r2
 80046a6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	613b      	str	r3, [r7, #16]
  return result;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	210f      	movs	r1, #15
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	401a      	ands	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	61bb      	str	r3, [r7, #24]
  return result;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	4313      	orrs	r3, r2
 80046e8:	6023      	str	r3, [r4, #0]
}
 80046ea:	bf00      	nop
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc90      	pop	{r4, r7}
 80046f2:	4770      	bx	lr

080046f4 <LL_GPIO_SetPinSpeed>:
{
 80046f4:	b490      	push	{r4, r7}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	0e1b      	lsrs	r3, r3, #24
 8004708:	4413      	add	r3, r2
 800470a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	613b      	str	r3, [r7, #16]
  return result;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	2103      	movs	r1, #3
 8004726:	fa01 f303 	lsl.w	r3, r1, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	401a      	ands	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa93 f3a3 	rbit	r3, r3
 8004738:	61bb      	str	r3, [r7, #24]
  return result;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	6023      	str	r3, [r4, #0]
}
 800474e:	bf00      	nop
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bc90      	pop	{r4, r7}
 8004756:	4770      	bx	lr

08004758 <LL_GPIO_SetPinOutputType>:
{
 8004758:	b490      	push	{r4, r7}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0e1b      	lsrs	r3, r3, #24
 800476c:	4413      	add	r3, r2
 800476e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	613b      	str	r3, [r7, #16]
  return result;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	2104      	movs	r1, #4
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	401a      	ands	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	61bb      	str	r3, [r7, #24]
  return result;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	6023      	str	r3, [r4, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc90      	pop	{r4, r7}
 80047ba:	4770      	bx	lr

080047bc <LL_GPIO_SetPinPull>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	613b      	str	r3, [r7, #16]
  return result;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	4619      	mov	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	408b      	lsls	r3, r1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	60da      	str	r2, [r3, #12]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	60fb      	str	r3, [r7, #12]
  return result;
 8004820:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800482a:	e044      	b.n	80048b6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	409a      	lsls	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03a      	beq.n	80048b0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b07      	cmp	r3, #7
 800483e:	d806      	bhi.n	800484e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004840:	f240 1201 	movw	r2, #257	; 0x101
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e008      	b.n	8004860 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3b08      	subs	r3, #8
 8004852:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800485e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d106      	bne.n	8004876 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	461a      	mov	r2, r3
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ffa3 	bl	80047bc <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	69b9      	ldr	r1, [r7, #24]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff06 	bl	8004690 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d003      	beq.n	8004894 <LL_GPIO_Init+0x94>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b09      	cmp	r3, #9
 8004892:	d10d      	bne.n	80048b0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	461a      	mov	r2, r3
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff29 	bl	80046f4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ff54 	bl	8004758 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1b4      	bne.n	800482c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <LL_RCC_GetSysClkSource>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <LL_RCC_GetSysClkSource+0x14>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 030c 	and.w	r3, r3, #12
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	40021000 	.word	0x40021000

080048e4 <LL_RCC_GetAHBPrescaler>:
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40021000 	.word	0x40021000

080048fc <LL_RCC_GetAPB1Prescaler>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40021000 	.word	0x40021000

08004914 <LL_RCC_GetAPB2Prescaler>:
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <LL_RCC_GetAPB2Prescaler+0x14>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	40021000 	.word	0x40021000

0800492c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <LL_RCC_PLL_GetMainSource+0x14>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	40021000 	.word	0x40021000

08004944 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	40021000 	.word	0x40021000

0800495c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <LL_RCC_PLL_GetPrediv+0x14>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40021000 	.word	0x40021000

08004974 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800497c:	f000 f820 	bl	80049c0 <RCC_GetSystemClockFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f83e 	bl	8004a0c <RCC_GetHCLKClockFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f84c 	bl	8004a38 <RCC_GetPCLK1ClockFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f858 	bl	8004a60 <RCC_GetPCLK2ClockFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60da      	str	r2, [r3, #12]
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80049ca:	f7ff ff7f 	bl	80048cc <LL_RCC_GetSysClkSource>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d00c      	beq.n	80049ee <RCC_GetSystemClockFreq+0x2e>
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d80e      	bhi.n	80049f6 <RCC_GetSystemClockFreq+0x36>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <RCC_GetSystemClockFreq+0x22>
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d003      	beq.n	80049e8 <RCC_GetSystemClockFreq+0x28>
 80049e0:	e009      	b.n	80049f6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <RCC_GetSystemClockFreq+0x48>)
 80049e4:	607b      	str	r3, [r7, #4]
      break;
 80049e6:	e009      	b.n	80049fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <RCC_GetSystemClockFreq+0x48>)
 80049ea:	607b      	str	r3, [r7, #4]
      break;
 80049ec:	e006      	b.n	80049fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80049ee:	f000 f84b 	bl	8004a88 <RCC_PLL_GetFreqDomain_SYS>
 80049f2:	6078      	str	r0, [r7, #4]
      break;
 80049f4:	e002      	b.n	80049fc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <RCC_GetSystemClockFreq+0x48>)
 80049f8:	607b      	str	r3, [r7, #4]
      break;
 80049fa:	bf00      	nop
  }

  return frequency;
 80049fc:	687b      	ldr	r3, [r7, #4]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	007a1200 	.word	0x007a1200

08004a0c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004a14:	f7ff ff66 	bl	80048e4 <LL_RCC_GetAHBPrescaler>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <RCC_GetHCLKClockFreq+0x28>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	40d3      	lsrs	r3, r2
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08005b0c 	.word	0x08005b0c

08004a38 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004a40:	f7ff ff5c 	bl	80048fc <LL_RCC_GetAPB1Prescaler>
 8004a44:	4603      	mov	r3, r0
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <RCC_GetPCLK1ClockFreq+0x24>)
 8004a4a:	5cd3      	ldrb	r3, [r2, r3]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	40d3      	lsrs	r3, r2
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08005b1c 	.word	0x08005b1c

08004a60 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004a68:	f7ff ff54 	bl	8004914 <LL_RCC_GetAPB2Prescaler>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	0adb      	lsrs	r3, r3, #11
 8004a70:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	40d3      	lsrs	r3, r2
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08005b1c 	.word	0x08005b1c

08004a88 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	2300      	movs	r3, #0
 8004a94:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a96:	f7ff ff49 	bl	800492c <LL_RCC_PLL_GetMainSource>
 8004a9a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d003      	beq.n	8004ab2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004aaa:	e00b      	b.n	8004ac4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004aae:	607b      	str	r3, [r7, #4]
      break;
 8004ab0:	e00b      	b.n	8004aca <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004ab2:	f7ff ff53 	bl	800495c <LL_RCC_PLL_GetPrediv>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	607b      	str	r3, [r7, #4]
      break;
 8004ac2:	e002      	b.n	8004aca <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004ac6:	607b      	str	r3, [r7, #4]
      break;
 8004ac8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004aca:	f7ff ff3b 	bl	8004944 <LL_RCC_PLL_GetMultiplicator>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	0c9b      	lsrs	r3, r3, #18
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	003d0900 	.word	0x003d0900
 8004ae8:	007a1200 	.word	0x007a1200

08004aec <LL_TIM_SetPrescaler>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <LL_TIM_SetAutoReload>:
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <LL_TIM_SetRepetitionCounter>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f043 0201 	orr.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	615a      	str	r2, [r3, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <LL_TIM_Init+0x108>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00f      	beq.n	8004b90 <LL_TIM_Init+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d00b      	beq.n	8004b90 <LL_TIM_Init+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <LL_TIM_Init+0x10c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <LL_TIM_Init+0x38>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a39      	ldr	r2, [pc, #228]	; (8004c68 <LL_TIM_Init+0x110>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <LL_TIM_Init+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <LL_TIM_Init+0x114>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d106      	bne.n	8004b9e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <LL_TIM_Init+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d023      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <LL_TIM_Init+0x10c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2b      	ldr	r2, [pc, #172]	; (8004c68 <LL_TIM_Init+0x110>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01b      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <LL_TIM_Init+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d017      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <LL_TIM_Init+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a28      	ldr	r2, [pc, #160]	; (8004c74 <LL_TIM_Init+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00f      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <LL_TIM_Init+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <LL_TIM_Init+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <LL_TIM_Init+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <LL_TIM_Init+0x9e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <LL_TIM_Init+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d106      	bne.n	8004c04 <LL_TIM_Init+0xac>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff78 	bl	8004b06 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff65 	bl	8004aec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <LL_TIM_Init+0x108>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <LL_TIM_Init+0xea>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <LL_TIM_Init+0x124>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <LL_TIM_Init+0xea>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <LL_TIM_Init+0x128>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <LL_TIM_Init+0xea>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <LL_TIM_Init+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d105      	bne.n	8004c4e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff69 	bl	8004b20 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff ff73 	bl	8004b3a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40001800 	.word	0x40001800
 8004c74:	40001c00 	.word	0x40001c00
 8004c78:	40002000 	.word	0x40002000
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <LL_USART_IsEnabled>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <LL_USART_SetStopBitsLength>:
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	611a      	str	r2, [r3, #16]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <LL_USART_SetHWFlowCtrl>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	615a      	str	r2, [r3, #20]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
	...

08004cf8 <LL_USART_SetBaudRate>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d152      	bne.n	8004db4 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009a      	lsls	r2, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	4a4f      	ldr	r2, [pc, #316]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	b299      	uxth	r1, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009a      	lsls	r2, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004d46:	fba3 0302 	umull	r0, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2064      	movs	r0, #100	; 0x64
 8004d4e:	fb00 f303 	mul.w	r3, r0, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	3332      	adds	r3, #50	; 0x32
 8004d58:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	b299      	uxth	r1, r3
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009a      	lsls	r2, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d84:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004d86:	fba3 0302 	umull	r0, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2064      	movs	r0, #100	; 0x64
 8004d8e:	fb00 f303 	mul.w	r3, r0, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a31      	ldr	r2, [pc, #196]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	440b      	add	r3, r1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	e04f      	b.n	8004e54 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	b299      	uxth	r1, r3
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004dec:	fba3 0302 	umull	r0, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	2064      	movs	r0, #100	; 0x64
 8004df4:	fb00 f303 	mul.w	r3, r0, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	3332      	adds	r3, #50	; 0x32
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	440b      	add	r3, r1
 8004e10:	b299      	uxth	r1, r3
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009a      	lsls	r2, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004e28:	fba3 0302 	umull	r0, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2064      	movs	r0, #100	; 0x64
 8004e30:	fb00 f303 	mul.w	r3, r0, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	3332      	adds	r3, #50	; 0x32
 8004e3a:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <LL_USART_SetBaudRate+0x168>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	51eb851f 	.word	0x51eb851f

08004e64 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff06 	bl	8004c88 <LL_USART_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d157      	bne.n	8004f32 <LL_USART_Init+0xce>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e8a:	f023 030c 	bic.w	r3, r3, #12
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6851      	ldr	r1, [r2, #4]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	6912      	ldr	r2, [r2, #16]
 8004e9c:	4311      	orrs	r1, r2
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	6992      	ldr	r2, [r2, #24]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fefc 	bl	8004cae <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff08 	bl	8004cd2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fd54 	bl	8004974 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <LL_USART_Init+0xd8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d102      	bne.n	8004eda <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e01a      	b.n	8004f10 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <LL_USART_Init+0xdc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d102      	bne.n	8004ee8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e013      	b.n	8004f10 <LL_USART_Init+0xac>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <LL_USART_Init+0xe0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d102      	bne.n	8004ef6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e00c      	b.n	8004f10 <LL_USART_Init+0xac>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <LL_USART_Init+0xe4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d102      	bne.n	8004f04 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e005      	b.n	8004f10 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <LL_USART_Init+0xe8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69b9      	ldr	r1, [r7, #24]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fee3 	bl	8004cf8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40013800 	.word	0x40013800
 8004f40:	40004400 	.word	0x40004400
 8004f44:	40004800 	.word	0x40004800
 8004f48:	40004c00 	.word	0x40004c00
 8004f4c:	40005000 	.word	0x40005000

08004f50 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <LL_InitTick+0x30>)
 8004f64:	3b01      	subs	r3, #1
 8004f66:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <LL_InitTick+0x30>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <LL_InitTick+0x30>)
 8004f70:	2205      	movs	r2, #5
 8004f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010

08004f84 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ffdd 	bl	8004f50 <LL_InitTick>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004fa8:	4a03      	ldr	r2, [pc, #12]	; (8004fb8 <LL_SetSystemCoreClock+0x18>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6013      	str	r3, [r2, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	200000cc 	.word	0x200000cc

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	f000 f828 	bl	8005020 <_init>
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005b24 	.word	0x08005b24
 8004ff8:	08005b24 	.word	0x08005b24
 8004ffc:	08005b24 	.word	0x08005b24
 8005000:	08005b28 	.word	0x08005b28

08005004 <memcpy>:
 8005004:	440a      	add	r2, r1
 8005006:	4291      	cmp	r1, r2
 8005008:	f100 33ff 	add.w	r3, r0, #4294967295
 800500c:	d100      	bne.n	8005010 <memcpy+0xc>
 800500e:	4770      	bx	lr
 8005010:	b510      	push	{r4, lr}
 8005012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005016:	4291      	cmp	r1, r2
 8005018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800501c:	d1f9      	bne.n	8005012 <memcpy+0xe>
 800501e:	bd10      	pop	{r4, pc}

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
